package androidx.cardview.widget;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.FillType;
import android.graphics.RadialGradient;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.Drawable;
import c.d.b;
import c.d.c;

class g
  extends Drawable
{
  private static final double a = Math.cos(Math.toRadians(45.0D));
  static a b;
  private final int c;
  private Paint d;
  private Paint e;
  private Paint f;
  private final RectF g;
  private float h;
  private Path i;
  private float j;
  private float k;
  private float l;
  private ColorStateList m;
  private boolean n = true;
  private final int o;
  private final int p;
  private boolean q = true;
  private boolean r = false;
  
  g(Resources paramResources, ColorStateList paramColorStateList, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    o = paramResources.getColor(b.d);
    p = paramResources.getColor(b.c);
    c = paramResources.getDimensionPixelSize(c.a);
    d = new Paint(5);
    n(paramColorStateList);
    paramResources = new Paint(5);
    e = paramResources;
    paramResources.setStyle(Paint.Style.FILL);
    h = ((int)(paramFloat1 + 0.5F));
    g = new RectF();
    paramResources = new Paint(e);
    f = paramResources;
    paramResources.setAntiAlias(false);
    s(paramFloat2, paramFloat3);
  }
  
  private void a(Rect paramRect)
  {
    float f1 = j;
    float f2 = 1.5F * f1;
    g.set(left + f1, top + f2, right - f1, bottom - f2);
    b();
  }
  
  private void b()
  {
    float f1 = h;
    Object localObject1 = new RectF(-f1, -f1, f1, f1);
    Object localObject2 = new RectF((RectF)localObject1);
    f1 = k;
    ((RectF)localObject2).inset(-f1, -f1);
    Path localPath = i;
    if (localPath == null) {
      i = new Path();
    } else {
      localPath.reset();
    }
    i.setFillType(Path.FillType.EVEN_ODD);
    i.moveTo(-h, 0.0F);
    i.rLineTo(-k, 0.0F);
    i.arcTo((RectF)localObject2, 180.0F, 90.0F, false);
    i.arcTo((RectF)localObject1, 270.0F, -90.0F, false);
    i.close();
    f1 = h;
    f1 /= (k + f1);
    localObject1 = e;
    float f2 = h;
    float f3 = k;
    int i1 = o;
    int i2 = p;
    localObject2 = Shader.TileMode.CLAMP;
    ((Paint)localObject1).setShader(new RadialGradient(0.0F, 0.0F, f2 + f3, new int[] { i1, i1, i2 }, new float[] { 0.0F, f1, 1.0F }, (Shader.TileMode)localObject2));
    localObject1 = f;
    f3 = h;
    f1 = -f3;
    f2 = k;
    f3 = -f3;
    i1 = o;
    i2 = p;
    localObject2 = Shader.TileMode.CLAMP;
    ((Paint)localObject1).setShader(new LinearGradient(0.0F, f1 + f2, 0.0F, f3 - f2, new int[] { i1, i1, i2 }, new float[] { 0.0F, 0.5F, 1.0F }, (Shader.TileMode)localObject2));
    f.setAntiAlias(false);
  }
  
  static float c(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    float f1 = paramFloat1;
    if (paramBoolean) {
      f1 = (float)(paramFloat1 + (1.0D - a) * paramFloat2);
    }
    return f1;
  }
  
  static float d(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    if (paramBoolean) {
      return (float)(paramFloat1 * 1.5F + (1.0D - a) * paramFloat2);
    }
    return paramFloat1 * 1.5F;
  }
  
  private void e(Canvas paramCanvas)
  {
    float f2 = h;
    float f1 = -f2 - k;
    f2 = f2 + c + l / 2.0F;
    float f3 = g.width();
    float f4 = f2 * 2.0F;
    if (f3 - f4 > 0.0F) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if (g.height() - f4 > 0.0F) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    int i3 = paramCanvas.save();
    RectF localRectF = g;
    paramCanvas.translate(left + f2, top + f2);
    paramCanvas.drawPath(i, e);
    if (i1 != 0) {
      paramCanvas.drawRect(0.0F, f1, g.width() - f4, -h, f);
    }
    paramCanvas.restoreToCount(i3);
    i3 = paramCanvas.save();
    localRectF = g;
    paramCanvas.translate(right - f2, bottom - f2);
    paramCanvas.rotate(180.0F);
    paramCanvas.drawPath(i, e);
    if (i1 != 0) {
      paramCanvas.drawRect(0.0F, f1, g.width() - f4, -h + k, f);
    }
    paramCanvas.restoreToCount(i3);
    int i1 = paramCanvas.save();
    localRectF = g;
    paramCanvas.translate(left + f2, bottom - f2);
    paramCanvas.rotate(270.0F);
    paramCanvas.drawPath(i, e);
    if (i2 != 0) {
      paramCanvas.drawRect(0.0F, f1, g.height() - f4, -h, f);
    }
    paramCanvas.restoreToCount(i1);
    i1 = paramCanvas.save();
    localRectF = g;
    paramCanvas.translate(right - f2, top + f2);
    paramCanvas.rotate(90.0F);
    paramCanvas.drawPath(i, e);
    if (i2 != 0) {
      paramCanvas.drawRect(0.0F, f1, g.height() - f4, -h, f);
    }
    paramCanvas.restoreToCount(i1);
  }
  
  private void n(ColorStateList paramColorStateList)
  {
    ColorStateList localColorStateList = paramColorStateList;
    if (paramColorStateList == null) {
      localColorStateList = ColorStateList.valueOf(0);
    }
    m = localColorStateList;
    d.setColor(localColorStateList.getColorForState(getState(), m.getDefaultColor()));
  }
  
  private void s(float paramFloat1, float paramFloat2)
  {
    if (paramFloat1 >= 0.0F)
    {
      if (paramFloat2 >= 0.0F)
      {
        float f1 = t(paramFloat1);
        paramFloat2 = t(paramFloat2);
        paramFloat1 = f1;
        if (f1 > paramFloat2)
        {
          if (!r) {
            r = true;
          }
          paramFloat1 = paramFloat2;
        }
        if ((l == paramFloat1) && (j == paramFloat2)) {
          return;
        }
        l = paramFloat1;
        j = paramFloat2;
        k = ((int)(paramFloat1 * 1.5F + c + 0.5F));
        n = true;
        invalidateSelf();
        return;
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Invalid max shadow size ");
      localStringBuilder.append(paramFloat2);
      localStringBuilder.append(". Must be >= 0");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Invalid shadow size ");
    localStringBuilder.append(paramFloat1);
    localStringBuilder.append(". Must be >= 0");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  private int t(float paramFloat)
  {
    int i2 = (int)(paramFloat + 0.5F);
    int i1 = i2;
    if (i2 % 2 == 1) {
      i1 = i2 - 1;
    }
    return i1;
  }
  
  public void draw(Canvas paramCanvas)
  {
    if (n)
    {
      a(getBounds());
      n = false;
    }
    paramCanvas.translate(0.0F, l / 2.0F);
    e(paramCanvas);
    paramCanvas.translate(0.0F, -l / 2.0F);
    b.a(paramCanvas, g, h, d);
  }
  
  ColorStateList f()
  {
    return m;
  }
  
  float g()
  {
    return h;
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean getPadding(Rect paramRect)
  {
    int i1 = (int)Math.ceil(d(j, h, q));
    int i2 = (int)Math.ceil(c(j, h, q));
    paramRect.set(i2, i1, i2, i1);
    return true;
  }
  
  void h(Rect paramRect)
  {
    getPadding(paramRect);
  }
  
  float i()
  {
    return j;
  }
  
  public boolean isStateful()
  {
    ColorStateList localColorStateList = m;
    return ((localColorStateList != null) && (localColorStateList.isStateful())) || (super.isStateful());
  }
  
  float j()
  {
    float f1 = j;
    return Math.max(f1, h + c + f1 * 1.5F / 2.0F) * 2.0F + (j * 1.5F + c) * 2.0F;
  }
  
  float k()
  {
    float f1 = j;
    return Math.max(f1, h + c + f1 / 2.0F) * 2.0F + (j + c) * 2.0F;
  }
  
  float l()
  {
    return l;
  }
  
  void m(boolean paramBoolean)
  {
    q = paramBoolean;
    invalidateSelf();
  }
  
  void o(ColorStateList paramColorStateList)
  {
    n(paramColorStateList);
    invalidateSelf();
  }
  
  protected void onBoundsChange(Rect paramRect)
  {
    super.onBoundsChange(paramRect);
    n = true;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    ColorStateList localColorStateList = m;
    int i1 = localColorStateList.getColorForState(paramArrayOfInt, localColorStateList.getDefaultColor());
    if (d.getColor() == i1) {
      return false;
    }
    d.setColor(i1);
    n = true;
    invalidateSelf();
    return true;
  }
  
  void p(float paramFloat)
  {
    if (paramFloat >= 0.0F)
    {
      paramFloat = (int)(paramFloat + 0.5F);
      if (h == paramFloat) {
        return;
      }
      h = paramFloat;
      n = true;
      invalidateSelf();
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Invalid radius ");
    localStringBuilder.append(paramFloat);
    localStringBuilder.append(". Must be >= 0");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  void q(float paramFloat)
  {
    s(l, paramFloat);
  }
  
  void r(float paramFloat)
  {
    s(paramFloat, j);
  }
  
  public void setAlpha(int paramInt)
  {
    d.setAlpha(paramInt);
    e.setAlpha(paramInt);
    f.setAlpha(paramInt);
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    d.setColorFilter(paramColorFilter);
  }
  
  static abstract interface a
  {
    public abstract void a(Canvas paramCanvas, RectF paramRectF, float paramFloat, Paint paramPaint);
  }
}
