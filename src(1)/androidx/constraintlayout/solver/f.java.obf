package androidx.constraintlayout.solver;

import java.util.Arrays;

public class i
  implements b.a
{
  private static float a = 0.001F;
  private final int b = -1;
  private int c = 16;
  private int d = 16;
  int[] e = new int[16];
  int[] f = new int[16];
  int[] g = new int[16];
  float[] h = new float[16];
  int[] i = new int[16];
  int[] j = new int[16];
  int k = 0;
  int l = -1;
  private final b m;
  protected final c n;
  
  i(b paramB, c paramC)
  {
    m = paramB;
    n = paramC;
    clear();
  }
  
  private void l(SolverVariable paramSolverVariable, int paramInt)
  {
    int i3 = d % d;
    paramSolverVariable = e;
    int i2 = paramSolverVariable[i3];
    int i1 = i2;
    if (i2 == -1)
    {
      paramSolverVariable[i3] = paramInt;
    }
    else
    {
      for (;;)
      {
        paramSolverVariable = f;
        if (paramSolverVariable[i1] == -1) {
          break;
        }
        i1 = paramSolverVariable[i1];
      }
      paramSolverVariable[i1] = paramInt;
    }
    f[paramInt] = -1;
  }
  
  private void m(int paramInt, SolverVariable paramSolverVariable, float paramFloat)
  {
    g[paramInt] = d;
    h[paramInt] = paramFloat;
    i[paramInt] = -1;
    j[paramInt] = -1;
    paramSolverVariable.a(m);
    n += 1;
    k += 1;
  }
  
  private int n()
  {
    int i1 = 0;
    while (i1 < c)
    {
      if (g[i1] == -1) {
        return i1;
      }
      i1 += 1;
    }
    return -1;
  }
  
  private void o()
  {
    int i2 = c * 2;
    g = Arrays.copyOf(g, i2);
    h = Arrays.copyOf(h, i2);
    i = Arrays.copyOf(i, i2);
    j = Arrays.copyOf(j, i2);
    f = Arrays.copyOf(f, i2);
    int i1 = c;
    while (i1 < i2)
    {
      g[i1] = -1;
      f[i1] = -1;
      i1 += 1;
    }
    c = i2;
  }
  
  private void q(int paramInt, SolverVariable paramSolverVariable, float paramFloat)
  {
    int i1 = n();
    m(i1, paramSolverVariable, paramFloat);
    if (paramInt != -1)
    {
      i[i1] = paramInt;
      arrayOfInt = j;
      arrayOfInt[i1] = arrayOfInt[paramInt];
      arrayOfInt[paramInt] = i1;
    }
    else
    {
      i[i1] = -1;
      if (k > 0)
      {
        j[i1] = l;
        l = i1;
      }
      else
      {
        j[i1] = -1;
      }
    }
    int[] arrayOfInt = j;
    if (arrayOfInt[i1] != -1) {
      i[arrayOfInt[i1]] = i1;
    }
    l(paramSolverVariable, i1);
  }
  
  private void r(SolverVariable paramSolverVariable)
  {
    int i3 = d;
    int i4 = i3 % d;
    paramSolverVariable = e;
    int i2 = paramSolverVariable[i4];
    if (i2 == -1) {
      return;
    }
    int i1 = i2;
    if (g[i2] == i3)
    {
      int[] arrayOfInt = f;
      paramSolverVariable[i4] = arrayOfInt[i2];
      arrayOfInt[i2] = -1;
      return;
    }
    for (;;)
    {
      paramSolverVariable = f;
      if ((paramSolverVariable[i1] == -1) || (g[paramSolverVariable[i1]] == i3)) {
        break;
      }
      i1 = paramSolverVariable[i1];
    }
    i2 = paramSolverVariable[i1];
    if ((i2 != -1) && (g[i2] == i3))
    {
      paramSolverVariable[i1] = paramSolverVariable[i2];
      paramSolverVariable[i2] = -1;
    }
  }
  
  public int a()
  {
    return k;
  }
  
  public SolverVariable b(int paramInt)
  {
    int i3 = k;
    if (i3 == 0) {
      return null;
    }
    int i2 = l;
    int i1 = 0;
    while (i1 < i3)
    {
      if ((i1 == paramInt) && (i2 != -1)) {
        return n.d[g[i2]];
      }
      i2 = j[i2];
      if (i2 == -1) {
        return null;
      }
      i1 += 1;
    }
    return null;
  }
  
  public void c()
  {
    int i3 = k;
    int i2 = l;
    int i1 = 0;
    while (i1 < i3)
    {
      float[] arrayOfFloat = h;
      arrayOfFloat[i2] *= -1.0F;
      i2 = j[i2];
      if (i2 == -1) {
        return;
      }
      i1 += 1;
    }
  }
  
  public void clear()
  {
    int i2 = k;
    int i1 = 0;
    while (i1 < i2)
    {
      SolverVariable localSolverVariable = b(i1);
      if (localSolverVariable != null) {
        localSolverVariable.c(m);
      }
      i1 += 1;
    }
    i1 = 0;
    while (i1 < c)
    {
      g[i1] = -1;
      f[i1] = -1;
      i1 += 1;
    }
    i1 = 0;
    while (i1 < d)
    {
      e[i1] = -1;
      i1 += 1;
    }
    k = 0;
    l = -1;
  }
  
  public float d(int paramInt)
  {
    int i3 = k;
    int i2 = l;
    int i1 = 0;
    while (i1 < i3)
    {
      if (i1 == paramInt) {
        return h[i2];
      }
      i2 = j[i2];
      if (i2 == -1) {
        break;
      }
      i1 += 1;
    }
    return 0.0F;
  }
  
  public void e(SolverVariable paramSolverVariable, float paramFloat, boolean paramBoolean)
  {
    float f1 = a;
    if ((paramFloat > -f1) && (paramFloat < f1)) {
      return;
    }
    int i1 = p(paramSolverVariable);
    if (i1 == -1)
    {
      i(paramSolverVariable, paramFloat);
      return;
    }
    float[] arrayOfFloat = h;
    arrayOfFloat[i1] += paramFloat;
    paramFloat = arrayOfFloat[i1];
    f1 = a;
    if ((paramFloat > -f1) && (arrayOfFloat[i1] < f1))
    {
      arrayOfFloat[i1] = 0.0F;
      j(paramSolverVariable, paramBoolean);
    }
  }
  
  public float f(SolverVariable paramSolverVariable)
  {
    int i1 = p(paramSolverVariable);
    if (i1 != -1) {
      return h[i1];
    }
    return 0.0F;
  }
  
  public boolean g(SolverVariable paramSolverVariable)
  {
    return p(paramSolverVariable) != -1;
  }
  
  public float h(b paramB, boolean paramBoolean)
  {
    float f1 = f(a);
    j(a, paramBoolean);
    paramB = (i)e;
    int i4 = paramB.a();
    int i2 = 0;
    int i1 = 0;
    while (i2 < i4)
    {
      int[] arrayOfInt = g;
      int i3 = i2;
      if (arrayOfInt[i1] != -1)
      {
        float f2 = h[i1];
        e(n.d[arrayOfInt[i1]], f2 * f1, paramBoolean);
        i3 = i2 + 1;
      }
      i1 += 1;
      i2 = i3;
    }
    return f1;
  }
  
  public void i(SolverVariable paramSolverVariable, float paramFloat)
  {
    float f1 = a;
    if ((paramFloat > -f1) && (paramFloat < f1))
    {
      j(paramSolverVariable, true);
      return;
    }
    int i1 = k;
    int i3 = 0;
    if (i1 == 0)
    {
      m(0, paramSolverVariable, paramFloat);
      l(paramSolverVariable, 0);
      l = 0;
      return;
    }
    i1 = p(paramSolverVariable);
    if (i1 != -1)
    {
      h[i1] = paramFloat;
      return;
    }
    if (k + 1 >= c) {
      o();
    }
    int i5 = k;
    i1 = l;
    int i2 = -1;
    int i4;
    for (;;)
    {
      i4 = i2;
      if (i3 >= i5) {
        break;
      }
      int[] arrayOfInt = g;
      int i6 = arrayOfInt[i1];
      i4 = d;
      if (i6 == i4)
      {
        h[i1] = paramFloat;
        return;
      }
      if (arrayOfInt[i1] < i4) {
        i2 = i1;
      }
      i1 = j[i1];
      if (i1 == -1)
      {
        i4 = i2;
        break;
      }
      i3 += 1;
    }
    q(i4, paramSolverVariable, paramFloat);
  }
  
  public float j(SolverVariable paramSolverVariable, boolean paramBoolean)
  {
    int i1 = p(paramSolverVariable);
    if (i1 == -1) {
      return 0.0F;
    }
    r(paramSolverVariable);
    float f1 = h[i1];
    if (l == i1) {
      l = j[i1];
    }
    g[i1] = -1;
    int[] arrayOfInt1 = i;
    if (arrayOfInt1[i1] != -1)
    {
      arrayOfInt2 = j;
      arrayOfInt2[arrayOfInt1[i1]] = arrayOfInt2[i1];
    }
    int[] arrayOfInt2 = j;
    if (arrayOfInt2[i1] != -1) {
      arrayOfInt1[arrayOfInt2[i1]] = arrayOfInt1[i1];
    }
    k -= 1;
    n -= 1;
    if (paramBoolean) {
      paramSolverVariable.c(m);
    }
    return f1;
  }
  
  public void k(float paramFloat)
  {
    int i3 = k;
    int i2 = l;
    int i1 = 0;
    while (i1 < i3)
    {
      float[] arrayOfFloat = h;
      arrayOfFloat[i2] /= paramFloat;
      i2 = j[i2];
      if (i2 == -1) {
        return;
      }
      i1 += 1;
    }
  }
  
  public int p(SolverVariable paramSolverVariable)
  {
    if (k != 0)
    {
      if (paramSolverVariable == null) {
        return -1;
      }
      int i3 = d;
      int i1 = d;
      int i2 = e[(i3 % i1)];
      if (i2 == -1) {
        return -1;
      }
      i1 = i2;
      if (g[i2] == i3) {
        return i2;
      }
      for (;;)
      {
        paramSolverVariable = f;
        if ((paramSolverVariable[i1] == -1) || (g[paramSolverVariable[i1]] == i3)) {
          break;
        }
        i1 = paramSolverVariable[i1];
      }
      if (paramSolverVariable[i1] == -1) {
        return -1;
      }
      if (g[paramSolverVariable[i1]] == i3) {
        return paramSolverVariable[i1];
      }
    }
    return -1;
  }
  
  public String toString()
  {
    Object localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append(hashCode());
    ((StringBuilder)localObject1).append(" { ");
    localObject1 = ((StringBuilder)localObject1).toString();
    int i2 = k;
    int i1 = 0;
    while (i1 < i2)
    {
      localObject2 = b(i1);
      if (localObject2 != null)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append((String)localObject1);
        localStringBuilder.append(localObject2);
        localStringBuilder.append(" = ");
        localStringBuilder.append(d(i1));
        localStringBuilder.append(" ");
        localObject1 = localStringBuilder.toString();
        int i3 = p((SolverVariable)localObject2);
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append((String)localObject1);
        ((StringBuilder)localObject2).append("[p: ");
        localObject1 = ((StringBuilder)localObject2).toString();
        if (i[i3] != -1)
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append((String)localObject1);
          ((StringBuilder)localObject2).append(n.d[g[i[i3]]]);
          localObject1 = ((StringBuilder)localObject2).toString();
        }
        else
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append((String)localObject1);
          ((StringBuilder)localObject2).append("none");
          localObject1 = ((StringBuilder)localObject2).toString();
        }
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append((String)localObject1);
        ((StringBuilder)localObject2).append(", n: ");
        localObject1 = ((StringBuilder)localObject2).toString();
        if (j[i3] != -1)
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append((String)localObject1);
          ((StringBuilder)localObject2).append(n.d[g[j[i3]]]);
          localObject1 = ((StringBuilder)localObject2).toString();
        }
        else
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append((String)localObject1);
          ((StringBuilder)localObject2).append("none");
          localObject1 = ((StringBuilder)localObject2).toString();
        }
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append((String)localObject1);
        ((StringBuilder)localObject2).append("]");
        localObject1 = ((StringBuilder)localObject2).toString();
      }
      i1 += 1;
    }
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append((String)localObject1);
    ((StringBuilder)localObject2).append(" }");
    return ((StringBuilder)localObject2).toString();
  }
}
