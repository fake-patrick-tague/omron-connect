package androidx.constraintlayout.solver.widgets;

import androidx.constraintlayout.solver.SolverVariable;
import java.util.ArrayList;

public class e
  extends ConstraintWidget
{
  protected float D0 = -1.0F;
  protected int E0 = -1;
  protected int F0 = -1;
  private ConstraintAnchor G0 = J;
  private int H0;
  private int I0;
  private boolean J0;
  
  public e()
  {
    int i = 0;
    H0 = 0;
    I0 = 0;
    R.clear();
    R.add(G0);
    int j = Q.length;
    while (i < j)
    {
      Q[i] = G0;
      i += 1;
    }
  }
  
  public void Z0(androidx.constraintlayout.solver.d paramD, boolean paramBoolean)
  {
    if (I() == null) {
      return;
    }
    int i = paramD.x(G0);
    if (H0 == 1)
    {
      V0(i);
      W0(0);
      v0(I().v());
      U0(0);
      return;
    }
    V0(0);
    W0(i);
    U0(I().R());
    v0(0);
  }
  
  public ConstraintAnchor a1()
  {
    return G0;
  }
  
  public int b1()
  {
    return H0;
  }
  
  public int c1()
  {
    return E0;
  }
  
  public int d1()
  {
    return F0;
  }
  
  public boolean e0()
  {
    return J0;
  }
  
  public float e1()
  {
    return D0;
  }
  
  public boolean f0()
  {
    return J0;
  }
  
  public void f1(int paramInt)
  {
    G0.s(paramInt);
    J0 = true;
  }
  
  public void g(androidx.constraintlayout.solver.d paramD, boolean paramBoolean)
  {
    Object localObject2 = (d)I();
    if (localObject2 == null) {
      return;
    }
    ConstraintAnchor localConstraintAnchor = ((ConstraintWidget)localObject2).m(ConstraintAnchor.Type.c);
    Object localObject1 = ((ConstraintWidget)localObject2).m(ConstraintAnchor.Type.e);
    ConstraintWidget localConstraintWidget = U;
    int j = 1;
    int i;
    if ((localConstraintWidget != null) && (T[0] == ConstraintWidget.DimensionBehaviour.c)) {
      i = 1;
    } else {
      i = 0;
    }
    if (H0 == 0)
    {
      localConstraintAnchor = ((ConstraintWidget)localObject2).m(ConstraintAnchor.Type.d);
      localObject1 = ((ConstraintWidget)localObject2).m(ConstraintAnchor.Type.f);
      localObject2 = U;
      if ((localObject2 != null) && (T[1] == ConstraintWidget.DimensionBehaviour.c)) {
        i = j;
      } else {
        i = 0;
      }
    }
    if ((J0) && (G0.m()))
    {
      localObject2 = paramD.q(G0);
      paramD.f((SolverVariable)localObject2, G0.d());
      if (E0 != -1)
      {
        if (i != 0) {
          paramD.h(paramD.q(localObject1), (SolverVariable)localObject2, 0, 5);
        }
      }
      else if ((F0 != -1) && (i != 0))
      {
        localObject1 = paramD.q(localObject1);
        paramD.h((SolverVariable)localObject2, paramD.q(localConstraintAnchor), 0, 5);
        paramD.h((SolverVariable)localObject1, (SolverVariable)localObject2, 0, 5);
      }
      J0 = false;
      return;
    }
    if (E0 != -1)
    {
      localObject2 = paramD.q(G0);
      paramD.e((SolverVariable)localObject2, paramD.q(localConstraintAnchor), E0, 8);
      if (i != 0) {
        paramD.h(paramD.q(localObject1), (SolverVariable)localObject2, 0, 5);
      }
    }
    else if (F0 != -1)
    {
      localObject2 = paramD.q(G0);
      localObject1 = paramD.q(localObject1);
      paramD.e((SolverVariable)localObject2, (SolverVariable)localObject1, -F0, 8);
      if (i != 0)
      {
        paramD.h((SolverVariable)localObject2, paramD.q(localConstraintAnchor), 0, 5);
        paramD.h((SolverVariable)localObject1, (SolverVariable)localObject2, 0, 5);
      }
    }
    else if (D0 != -1.0F)
    {
      paramD.d(androidx.constraintlayout.solver.d.s(paramD, paramD.q(G0), paramD.q(localObject1), D0));
    }
  }
  
  public void g1(int paramInt)
  {
    if (paramInt > -1)
    {
      D0 = -1.0F;
      E0 = paramInt;
      F0 = -1;
    }
  }
  
  public boolean h()
  {
    return true;
  }
  
  public void h1(int paramInt)
  {
    if (paramInt > -1)
    {
      D0 = -1.0F;
      E0 = -1;
      F0 = paramInt;
    }
  }
  
  public void i1(float paramFloat)
  {
    if (paramFloat > -1.0F)
    {
      D0 = paramFloat;
      E0 = -1;
      F0 = -1;
    }
  }
  
  public void j1(int paramInt)
  {
    if (H0 == paramInt) {
      return;
    }
    H0 = paramInt;
    R.clear();
    if (H0 == 1) {
      G0 = I;
    } else {
      G0 = J;
    }
    R.add(G0);
    int i = Q.length;
    paramInt = 0;
    while (paramInt < i)
    {
      Q[paramInt] = G0;
      paramInt += 1;
    }
  }
  
  public ConstraintAnchor m(ConstraintAnchor.Type paramType)
  {
    switch (a.a[paramType.ordinal()])
    {
    default: 
      break;
    case 5: 
    case 6: 
    case 7: 
    case 8: 
    case 9: 
      return null;
    case 3: 
    case 4: 
      if (H0 == 0) {
        return G0;
      }
      break;
    case 1: 
    case 2: 
      if (H0 == 1) {
        return G0;
      }
      break;
    }
    throw new AssertionError(paramType.name());
  }
}
