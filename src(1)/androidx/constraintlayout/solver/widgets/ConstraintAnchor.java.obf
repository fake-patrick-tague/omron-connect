package androidx.constraintlayout.solver.widgets;

import androidx.constraintlayout.solver.SolverVariable;
import androidx.constraintlayout.solver.SolverVariable.Type;
import androidx.constraintlayout.solver.c;
import androidx.constraintlayout.solver.widgets.analyzer.h;
import androidx.constraintlayout.solver.widgets.analyzer.n;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

public class ConstraintAnchor
{
  private HashSet<ConstraintAnchor> a = null;
  private int b;
  private boolean c;
  public final ConstraintWidget d;
  public final Type e;
  public ConstraintAnchor f;
  public int g = 0;
  int h = -1;
  SolverVariable i;
  
  public ConstraintAnchor(ConstraintWidget paramConstraintWidget, Type paramType)
  {
    d = paramConstraintWidget;
    e = paramType;
  }
  
  public boolean a(ConstraintAnchor paramConstraintAnchor, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    if (paramConstraintAnchor == null)
    {
      p();
      return true;
    }
    if ((!paramBoolean) && (!o(paramConstraintAnchor))) {
      return false;
    }
    f = paramConstraintAnchor;
    if (a == null) {
      a = new HashSet();
    }
    paramConstraintAnchor = f.a;
    if (paramConstraintAnchor != null) {
      paramConstraintAnchor.add(this);
    }
    if (paramInt1 > 0) {
      g = paramInt1;
    } else {
      g = 0;
    }
    h = paramInt2;
    return true;
  }
  
  public void b(int paramInt, ArrayList<n> paramArrayList, n paramN)
  {
    Object localObject = a;
    if (localObject != null)
    {
      localObject = ((HashSet)localObject).iterator();
      while (((Iterator)localObject).hasNext()) {
        h.a(nextd, paramInt, paramArrayList, paramN);
      }
    }
  }
  
  public HashSet<ConstraintAnchor> c()
  {
    return a;
  }
  
  public int d()
  {
    if (!c) {
      return 0;
    }
    return b;
  }
  
  public int e()
  {
    if (d.Q() == 8) {
      return 0;
    }
    if (h > -1)
    {
      ConstraintAnchor localConstraintAnchor = f;
      if ((localConstraintAnchor != null) && (d.Q() == 8)) {
        return h;
      }
    }
    return g;
  }
  
  public final ConstraintAnchor f()
  {
    switch (a.a[e.ordinal()])
    {
    default: 
      throw new AssertionError(e.name());
    case 5: 
      return d.J;
    case 4: 
      return d.L;
    case 3: 
      return d.I;
    case 2: 
      return d.K;
    }
    return null;
  }
  
  public ConstraintWidget g()
  {
    return d;
  }
  
  public SolverVariable h()
  {
    return i;
  }
  
  public ConstraintAnchor i()
  {
    return f;
  }
  
  public Type j()
  {
    return e;
  }
  
  public boolean k()
  {
    Object localObject = a;
    if (localObject == null) {
      return false;
    }
    localObject = ((HashSet)localObject).iterator();
    while (((Iterator)localObject).hasNext()) {
      if (((ConstraintAnchor)((Iterator)localObject).next()).f().n()) {
        return true;
      }
    }
    return false;
  }
  
  public boolean l()
  {
    HashSet localHashSet = a;
    boolean bool = false;
    if (localHashSet == null) {
      return false;
    }
    if (localHashSet.size() > 0) {
      bool = true;
    }
    return bool;
  }
  
  public boolean m()
  {
    return c;
  }
  
  public boolean n()
  {
    return f != null;
  }
  
  public boolean o(ConstraintAnchor paramConstraintAnchor)
  {
    boolean bool4 = false;
    boolean bool2 = false;
    boolean bool3 = false;
    if (paramConstraintAnchor == null) {
      return false;
    }
    Type localType1 = paramConstraintAnchor.j();
    Type localType2 = e;
    if (localType1 == localType2) {
      return (localType2 != Type.g) || ((paramConstraintAnchor.g().U()) && (g().U()));
    }
    switch (a.a[localType2.ordinal()])
    {
    default: 
      throw new AssertionError(e.name());
    case 6: 
    case 7: 
    case 8: 
    case 9: 
      return false;
    case 4: 
    case 5: 
      if ((localType1 != Type.d) && (localType1 != Type.f)) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      bool2 = bool1;
      if ((paramConstraintAnchor.g() instanceof e))
      {
        if (!bool1)
        {
          bool1 = bool3;
          if (localType1 != Type.j) {}
        }
        else
        {
          bool1 = true;
        }
        bool2 = bool1;
      }
      return bool2;
    case 2: 
    case 3: 
      if ((localType1 != Type.c) && (localType1 != Type.e)) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      bool2 = bool1;
      if ((paramConstraintAnchor.g() instanceof e))
      {
        if (!bool1)
        {
          bool1 = bool4;
          if (localType1 != Type.i) {}
        }
        else
        {
          bool1 = true;
        }
        bool2 = bool1;
      }
      return bool2;
    }
    boolean bool1 = bool2;
    if (localType1 != Type.g)
    {
      bool1 = bool2;
      if (localType1 != Type.i)
      {
        bool1 = bool2;
        if (localType1 != Type.j) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  public void p()
  {
    Object localObject = f;
    if (localObject != null)
    {
      localObject = a;
      if (localObject != null)
      {
        ((HashSet)localObject).remove(this);
        if (f.a.size() == 0) {
          f.a = null;
        }
      }
    }
    a = null;
    f = null;
    g = 0;
    h = -1;
    c = false;
    b = 0;
  }
  
  public void q()
  {
    c = false;
    b = 0;
  }
  
  public void r(c paramC)
  {
    paramC = i;
    if (paramC == null)
    {
      i = new SolverVariable(SolverVariable.Type.b, null);
      return;
    }
    paramC.d();
  }
  
  public void s(int paramInt)
  {
    b = paramInt;
    c = true;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(d.r());
    localStringBuilder.append(":");
    localStringBuilder.append(e.toString());
    return localStringBuilder.toString();
  }
  
  public static enum Type
  {
    static
    {
      Type localType1 = new Type("NONE", 0);
      b = localType1;
      Type localType2 = new Type("LEFT", 1);
      c = localType2;
      Type localType3 = new Type("TOP", 2);
      d = localType3;
      Type localType4 = new Type("RIGHT", 3);
      e = localType4;
      Type localType5 = new Type("BOTTOM", 4);
      f = localType5;
      Type localType6 = new Type("BASELINE", 5);
      g = localType6;
      Type localType7 = new Type("CENTER", 6);
      h = localType7;
      Type localType8 = new Type("CENTER_X", 7);
      i = localType8;
      Type localType9 = new Type("CENTER_Y", 8);
      j = localType9;
      k = new Type[] { localType1, localType2, localType3, localType4, localType5, localType6, localType7, localType8, localType9 };
    }
  }
}
