package androidx.constraintlayout.solver;

import androidx.constraintlayout.solver.widgets.ConstraintAnchor;
import androidx.constraintlayout.solver.widgets.ConstraintAnchor.Type;
import androidx.constraintlayout.solver.widgets.ConstraintWidget;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashMap;

public class d
{
  public static boolean a = false;
  public static boolean b = true;
  public static boolean c = true;
  public static boolean d = true;
  public static boolean e = false;
  private static int f = 1000;
  public static e g;
  public static long h;
  public static long i;
  public boolean j = false;
  int k = 0;
  private HashMap<String, SolverVariable> l = null;
  private a m;
  private int n = 32;
  private int o = 32;
  b[] p = null;
  public boolean q = false;
  public boolean r = false;
  private boolean[] s = new boolean[32];
  int t = 1;
  int u = 0;
  private int v = 32;
  final c w;
  private SolverVariable[] x = new SolverVariable[f];
  private int y = 0;
  private a z;
  
  public d()
  {
    C();
    c localC = new c();
    w = localC;
    m = new h(localC);
    if (e)
    {
      z = new b(localC);
      return;
    }
    z = new b(localC);
  }
  
  private final int B(a paramA, boolean paramBoolean)
  {
    if (g == null)
    {
      int i1 = 0;
      while (i1 < t)
      {
        s[i1] = false;
        i1 += 1;
      }
      int i2 = 0;
      i1 = i2;
      while (i2 == 0) {
        if (g == null)
        {
          int i5 = i1 + 1;
          if (i5 >= t * 2) {
            return i5;
          }
          if (paramA.getKey() != null) {
            s[getKeyd] = true;
          }
          SolverVariable localSolverVariable = paramA.b(this, s);
          Object localObject;
          if (localSolverVariable != null)
          {
            localObject = s;
            i1 = d;
            if (localObject[i1] != 0) {
              return i5;
            }
            localObject[i1] = 1;
          }
          if (localSolverVariable != null)
          {
            float f1 = Float.MAX_VALUE;
            i1 = 0;
            int i4;
            for (int i3 = -1; i1 < u; i3 = i4)
            {
              localObject = p[i1];
              float f2;
              if (a.k == SolverVariable.Type.b)
              {
                f2 = f1;
                i4 = i3;
              }
              else if (f)
              {
                f2 = f1;
                i4 = i3;
              }
              else
              {
                f2 = f1;
                i4 = i3;
                if (((b)localObject).t(localSolverVariable))
                {
                  float f3 = e.f(localSolverVariable);
                  f2 = f1;
                  i4 = i3;
                  if (f3 < 0.0F)
                  {
                    f3 = -b / f3;
                    f2 = f1;
                    i4 = i3;
                    if (f3 < f1)
                    {
                      i4 = i1;
                      f2 = f3;
                    }
                  }
                }
              }
              i1 += 1;
              f1 = f2;
            }
            i1 = i5;
            if (i3 > -1)
            {
              localObject = p[i3];
              a.e = -1;
              if (g == null)
              {
                ((b)localObject).x(localSolverVariable);
                localSolverVariable = a;
                e = i3;
                localSolverVariable.g(this, (b)localObject);
                i1 = i5;
              }
              else
              {
                throw null;
              }
            }
          }
          else
          {
            i2 = 1;
            i1 = i5;
          }
        }
        else
        {
          throw null;
        }
      }
      return i1;
    }
    throw null;
  }
  
  private void C()
  {
    boolean bool = e;
    int i1 = 0;
    int i2 = 0;
    b localB;
    if (bool)
    {
      i1 = i2;
      while (i1 < u)
      {
        localB = p[i1];
        if (localB != null) {
          w.a.a(localB);
        }
        p[i1] = null;
        i1 += 1;
      }
    }
    while (i1 < u)
    {
      localB = p[i1];
      if (localB != null) {
        w.b.a(localB);
      }
      p[i1] = null;
      i1 += 1;
    }
  }
  
  private SolverVariable a(SolverVariable.Type paramType, String paramString)
  {
    SolverVariable localSolverVariable = (SolverVariable)w.c.b();
    if (localSolverVariable == null)
    {
      localSolverVariable = new SolverVariable(paramType, paramString);
      localSolverVariable.f(paramType, paramString);
      paramType = localSolverVariable;
    }
    else
    {
      localSolverVariable.d();
      localSolverVariable.f(paramType, paramString);
      paramType = localSolverVariable;
    }
    int i1 = y;
    int i2 = f;
    if (i1 >= i2)
    {
      i1 = i2 * 2;
      f = i1;
      x = ((SolverVariable[])Arrays.copyOf(x, i1));
    }
    paramString = x;
    i1 = y;
    y = (i1 + 1);
    paramString[i1] = paramType;
    return paramType;
  }
  
  private final void l(b paramB)
  {
    int i1;
    if ((c) && (f))
    {
      a.e(this, b);
    }
    else
    {
      Object localObject = p;
      i1 = u;
      localObject[i1] = paramB;
      localObject = a;
      e = i1;
      u = (i1 + 1);
      ((SolverVariable)localObject).g(this, paramB);
    }
    if ((c) && (j))
    {
      int i2;
      for (i1 = 0; i1 < u; i1 = i2 + 1)
      {
        if (p[i1] == null) {
          System.out.println("WTF");
        }
        paramB = p;
        i2 = i1;
        if (paramB[i1] != null)
        {
          i2 = i1;
          if (f)
          {
            paramB = paramB[i1];
            a.e(this, b);
            if (e) {
              w.a.a(paramB);
            } else {
              w.b.a(paramB);
            }
            p[i1] = null;
            i2 = i1 + 1;
            int i3 = i2;
            int i4;
            for (;;)
            {
              i4 = u;
              if (i2 >= i4) {
                break;
              }
              paramB = p;
              i3 = i2 - 1;
              paramB[i3] = paramB[i2];
              if (a.e == i2) {
                a.e = i3;
              }
              i3 = i2;
              i2 += 1;
            }
            if (i3 < i4) {
              p[i3] = null;
            }
            u = (i4 - 1);
            i2 = i1 - 1;
          }
        }
      }
      j = false;
    }
  }
  
  private void n()
  {
    int i1 = 0;
    while (i1 < u)
    {
      b localB = p[i1];
      a.g = b;
      i1 += 1;
    }
  }
  
  public static b s(d paramD, SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, float paramFloat)
  {
    return paramD.r().j(paramSolverVariable1, paramSolverVariable2, paramFloat);
  }
  
  private int u(a paramA)
    throws Exception
  {
    int i1 = 0;
    while (i1 < u)
    {
      paramA = p;
      if ((a.k != SolverVariable.Type.b) && (b < 0.0F))
      {
        i1 = 1;
        break label66;
      }
      i1 += 1;
    }
    i1 = 0;
    label66:
    if (i1 != 0)
    {
      int i5 = 0;
      i1 = 0;
      while (i5 == 0) {
        if (g == null)
        {
          int i11 = i1 + 1;
          float f1 = Float.MAX_VALUE;
          i1 = 0;
          int i2 = -1;
          int i3 = -1;
          int i9;
          SolverVariable localSolverVariable;
          for (int i4 = 0; i1 < u; i4 = i9)
          {
            paramA = p[i1];
            float f2;
            int i7;
            int i8;
            if (a.k == SolverVariable.Type.b)
            {
              f2 = f1;
              i7 = i2;
              i8 = i3;
              i9 = i4;
            }
            else if (f)
            {
              f2 = f1;
              i7 = i2;
              i8 = i3;
              i9 = i4;
            }
            else
            {
              f2 = f1;
              i7 = i2;
              i8 = i3;
              i9 = i4;
              if (b < 0.0F)
              {
                int i10;
                float f3;
                if (d)
                {
                  int i12 = e.a();
                  i10 = 0;
                  for (;;)
                  {
                    f2 = f1;
                    i7 = i2;
                    i8 = i3;
                    i9 = i4;
                    if (i10 >= i12) {
                      break;
                    }
                    localSolverVariable = e.b(i10);
                    f3 = e.f(localSolverVariable);
                    if (f3 <= 0.0F)
                    {
                      f2 = f1;
                      i7 = i2;
                      i8 = i3;
                      i9 = i4;
                    }
                    else
                    {
                      i7 = 0;
                      i6 = i2;
                      i2 = i7;
                      for (;;)
                      {
                        f2 = f1;
                        i7 = i6;
                        i8 = i3;
                        i9 = i4;
                        if (i2 >= 9) {
                          break;
                        }
                        f2 = i[i2] / f3;
                        if ((f2 >= f1) || (i2 != i4))
                        {
                          i7 = i4;
                          if (i2 <= i4) {}
                        }
                        else
                        {
                          i3 = d;
                          i7 = i2;
                          i6 = i1;
                          f1 = f2;
                        }
                        i2 += 1;
                        i4 = i7;
                      }
                    }
                    i10 += 1;
                    f1 = f2;
                    i2 = i7;
                    i3 = i8;
                    i4 = i9;
                  }
                }
                int i6 = 1;
                for (;;)
                {
                  f2 = f1;
                  i7 = i2;
                  i8 = i3;
                  i9 = i4;
                  if (i6 >= t) {
                    break;
                  }
                  localSolverVariable = w.d[i6];
                  f3 = e.f(localSolverVariable);
                  if (f3 <= 0.0F)
                  {
                    f2 = f1;
                    i8 = i2;
                    i9 = i3;
                    i10 = i4;
                  }
                  else
                  {
                    i8 = 0;
                    i7 = i2;
                    i2 = i8;
                    for (;;)
                    {
                      f2 = f1;
                      i8 = i7;
                      i9 = i3;
                      i10 = i4;
                      if (i2 >= 9) {
                        break;
                      }
                      f2 = i[i2] / f3;
                      if ((f2 >= f1) || (i2 != i4))
                      {
                        i8 = i4;
                        if (i2 <= i4) {}
                      }
                      else
                      {
                        i3 = i6;
                        i8 = i2;
                        i7 = i1;
                        f1 = f2;
                      }
                      i2 += 1;
                      i4 = i8;
                    }
                  }
                  i6 += 1;
                  f1 = f2;
                  i2 = i8;
                  i3 = i9;
                  i4 = i10;
                }
              }
            }
            i1 += 1;
            f1 = f2;
            i2 = i7;
            i3 = i8;
          }
          if (i2 != -1)
          {
            paramA = p[i2];
            a.e = -1;
            if (g == null)
            {
              paramA.x(w.d[i3]);
              localSolverVariable = a;
              e = i2;
              localSolverVariable.g(this, paramA);
            }
            else
            {
              throw null;
            }
          }
          else
          {
            i5 = 1;
          }
          i1 = i11;
          if (i11 > t / 2)
          {
            i5 = 1;
            i1 = i11;
          }
        }
        else
        {
          throw null;
        }
      }
      return i1;
    }
    return 0;
  }
  
  public static e w()
  {
    return g;
  }
  
  private void y()
  {
    int i1 = n * 2;
    n = i1;
    p = ((b[])Arrays.copyOf(p, i1));
    c localC = w;
    d = ((SolverVariable[])Arrays.copyOf(d, n));
    i1 = n;
    s = new boolean[i1];
    o = i1;
    v = i1;
    if (g == null) {
      return;
    }
    throw null;
  }
  
  void A(a paramA)
    throws Exception
  {
    if (g == null)
    {
      u(paramA);
      B(paramA, false);
      n();
      return;
    }
    throw null;
  }
  
  public void D()
  {
    int i1 = 0;
    for (;;)
    {
      localObject = w;
      SolverVariable[] arrayOfSolverVariable = d;
      if (i1 >= arrayOfSolverVariable.length) {
        break;
      }
      localObject = arrayOfSolverVariable[i1];
      if (localObject != null) {
        ((SolverVariable)localObject).d();
      }
      i1 += 1;
    }
    c.c(x, y);
    y = 0;
    Arrays.fill(w.d, null);
    Object localObject = l;
    if (localObject != null) {
      ((HashMap)localObject).clear();
    }
    k = 0;
    m.clear();
    t = 1;
    i1 = 0;
    while (i1 < u)
    {
      localObject = p;
      if (localObject[i1] != null) {
        c = false;
      }
      i1 += 1;
    }
    C();
    u = 0;
    if (e)
    {
      z = new b(w);
      return;
    }
    z = new b(w);
  }
  
  public void b(ConstraintWidget paramConstraintWidget1, ConstraintWidget paramConstraintWidget2, float paramFloat, int paramInt)
  {
    Object localObject1 = ConstraintAnchor.Type.c;
    SolverVariable localSolverVariable1 = q(paramConstraintWidget1.m((ConstraintAnchor.Type)localObject1));
    Object localObject4 = ConstraintAnchor.Type.d;
    SolverVariable localSolverVariable3 = q(paramConstraintWidget1.m((ConstraintAnchor.Type)localObject4));
    Object localObject3 = ConstraintAnchor.Type.e;
    SolverVariable localSolverVariable2 = q(paramConstraintWidget1.m((ConstraintAnchor.Type)localObject3));
    Object localObject2 = ConstraintAnchor.Type.f;
    paramConstraintWidget1 = q(paramConstraintWidget1.m((ConstraintAnchor.Type)localObject2));
    localObject1 = q(paramConstraintWidget2.m((ConstraintAnchor.Type)localObject1));
    localObject4 = q(paramConstraintWidget2.m((ConstraintAnchor.Type)localObject4));
    localObject3 = q(paramConstraintWidget2.m((ConstraintAnchor.Type)localObject3));
    paramConstraintWidget2 = q(paramConstraintWidget2.m((ConstraintAnchor.Type)localObject2));
    localObject2 = r();
    double d1 = paramFloat;
    double d2 = Math.sin(d1);
    double d3 = paramInt;
    ((b)localObject2).q(localSolverVariable3, paramConstraintWidget1, (SolverVariable)localObject4, paramConstraintWidget2, (float)(d2 * d3));
    d((b)localObject2);
    paramConstraintWidget1 = r();
    paramConstraintWidget1.q(localSolverVariable1, localSolverVariable2, (SolverVariable)localObject1, (SolverVariable)localObject3, (float)(Math.cos(d1) * d3));
    d(paramConstraintWidget1);
  }
  
  public void c(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, int paramInt1, float paramFloat, SolverVariable paramSolverVariable3, SolverVariable paramSolverVariable4, int paramInt2, int paramInt3)
  {
    b localB = r();
    localB.h(paramSolverVariable1, paramSolverVariable2, paramInt1, paramFloat, paramSolverVariable3, paramSolverVariable4, paramInt2);
    if (paramInt3 != 8) {
      localB.d(this, paramInt3);
    }
    d(localB);
  }
  
  public void d(b paramB)
  {
    if (paramB == null) {
      return;
    }
    if (g == null)
    {
      int i1 = u;
      int i2 = 1;
      if ((i1 + 1 >= v) || (t + 1 >= o)) {
        y();
      }
      i1 = 0;
      if (!f)
      {
        paramB.D(this);
        if (paramB.isEmpty()) {
          return;
        }
        paramB.r();
        if (paramB.f(this))
        {
          SolverVariable localSolverVariable = p();
          a = localSolverVariable;
          i1 = u;
          l(paramB);
          if (u == i1 + 1)
          {
            z.c(paramB);
            B(z, true);
            i1 = i2;
            if (e != -1) {
              break label251;
            }
            if (a == localSolverVariable)
            {
              localSolverVariable = paramB.v(localSolverVariable);
              if (localSolverVariable != null) {
                if (g == null) {
                  paramB.x(localSolverVariable);
                } else {
                  throw null;
                }
              }
            }
            if (!f) {
              a.g(this, paramB);
            }
            if (e) {
              w.a.a(paramB);
            } else {
              w.b.a(paramB);
            }
            u -= 1;
            i1 = i2;
            break label251;
          }
        }
        i1 = 0;
        label251:
        if (!paramB.s()) {
          return;
        }
      }
      if (i1 == 0) {
        l(paramB);
      }
      return;
    }
    throw null;
  }
  
  public b e(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, int paramInt1, int paramInt2)
  {
    if ((b) && (paramInt2 == 8) && (h) && (e == -1))
    {
      paramSolverVariable1.e(this, g + paramInt1);
      return null;
    }
    b localB = r();
    localB.n(paramSolverVariable1, paramSolverVariable2, paramInt1);
    if (paramInt2 != 8) {
      localB.d(this, paramInt2);
    }
    d(localB);
    return localB;
  }
  
  public void f(SolverVariable paramSolverVariable, int paramInt)
  {
    if ((b) && (e == -1))
    {
      float f1 = paramInt;
      paramSolverVariable.e(this, f1);
      paramInt = 0;
      while (paramInt < k + 1)
      {
        localObject = w.d[paramInt];
        if ((localObject != null) && (o) && (p == d)) {
          ((SolverVariable)localObject).e(this, q + f1);
        }
        paramInt += 1;
      }
      return;
    }
    int i1 = e;
    if (i1 != -1)
    {
      localObject = p[i1];
      if (f)
      {
        b = paramInt;
        return;
      }
      if (e.a() == 0)
      {
        f = true;
        b = paramInt;
        return;
      }
      localObject = r();
      ((b)localObject).m(paramSolverVariable, paramInt);
      d((b)localObject);
      return;
    }
    Object localObject = r();
    ((b)localObject).i(paramSolverVariable, paramInt);
    d((b)localObject);
  }
  
  public void g(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, int paramInt, boolean paramBoolean)
  {
    b localB = r();
    SolverVariable localSolverVariable = t();
    f = 0;
    localB.o(paramSolverVariable1, paramSolverVariable2, localSolverVariable, paramInt);
    d(localB);
  }
  
  public void h(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, int paramInt1, int paramInt2)
  {
    b localB = r();
    SolverVariable localSolverVariable = t();
    f = 0;
    localB.o(paramSolverVariable1, paramSolverVariable2, localSolverVariable, paramInt1);
    if (paramInt2 != 8) {
      m(localB, (int)(e.f(localSolverVariable) * -1.0F), paramInt2);
    }
    d(localB);
  }
  
  public void i(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, int paramInt, boolean paramBoolean)
  {
    b localB = r();
    SolverVariable localSolverVariable = t();
    f = 0;
    localB.p(paramSolverVariable1, paramSolverVariable2, localSolverVariable, paramInt);
    d(localB);
  }
  
  public void j(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, int paramInt1, int paramInt2)
  {
    b localB = r();
    SolverVariable localSolverVariable = t();
    f = 0;
    localB.p(paramSolverVariable1, paramSolverVariable2, localSolverVariable, paramInt1);
    if (paramInt2 != 8) {
      m(localB, (int)(e.f(localSolverVariable) * -1.0F), paramInt2);
    }
    d(localB);
  }
  
  public void k(SolverVariable paramSolverVariable1, SolverVariable paramSolverVariable2, SolverVariable paramSolverVariable3, SolverVariable paramSolverVariable4, float paramFloat, int paramInt)
  {
    b localB = r();
    localB.k(paramSolverVariable1, paramSolverVariable2, paramSolverVariable3, paramSolverVariable4, paramFloat);
    if (paramInt != 8) {
      localB.d(this, paramInt);
    }
    d(localB);
  }
  
  void m(b paramB, int paramInt1, int paramInt2)
  {
    paramB.e(o(paramInt2, null), paramInt1);
  }
  
  public SolverVariable o(int paramInt, String paramString)
  {
    if (g == null)
    {
      if (t + 1 >= o) {
        y();
      }
      paramString = a(SolverVariable.Type.e, paramString);
      int i1 = k + 1;
      k = i1;
      t += 1;
      d = i1;
      f = paramInt;
      w.d[i1] = paramString;
      m.a(paramString);
      return paramString;
    }
    throw null;
  }
  
  public SolverVariable p()
  {
    if (g == null)
    {
      if (t + 1 >= o) {
        y();
      }
      SolverVariable localSolverVariable = a(SolverVariable.Type.d, null);
      int i1 = k + 1;
      k = i1;
      t += 1;
      d = i1;
      w.d[i1] = localSolverVariable;
      return localSolverVariable;
    }
    throw null;
  }
  
  public SolverVariable q(Object paramObject)
  {
    Object localObject = null;
    if (paramObject == null) {
      return null;
    }
    if (t + 1 >= o) {
      y();
    }
    if ((paramObject instanceof ConstraintAnchor))
    {
      ConstraintAnchor localConstraintAnchor = (ConstraintAnchor)paramObject;
      localObject = localConstraintAnchor.h();
      paramObject = localObject;
      if (localObject == null)
      {
        localConstraintAnchor.r(w);
        paramObject = localConstraintAnchor.h();
      }
      int i1 = d;
      if ((i1 != -1) && (i1 <= k))
      {
        localObject = paramObject;
        if (w.d[i1] != null) {}
      }
      else
      {
        if (i1 != -1) {
          paramObject.d();
        }
        i1 = k + 1;
        k = i1;
        t += 1;
        d = i1;
        k = SolverVariable.Type.b;
        w.d[i1] = paramObject;
        localObject = paramObject;
      }
    }
    return localObject;
  }
  
  public b r()
  {
    Object localObject;
    if (e)
    {
      localObject = (b)w.a.b();
      if (localObject == null)
      {
        localObject = new b(w);
        i += 1L;
      }
      else
      {
        ((b)localObject).y();
      }
    }
    else
    {
      localObject = (b)w.b.b();
      if (localObject == null)
      {
        localObject = new b(w);
        h += 1L;
      }
      else
      {
        ((b)localObject).y();
      }
    }
    SolverVariable.b();
    return localObject;
  }
  
  public SolverVariable t()
  {
    if (g == null)
    {
      if (t + 1 >= o) {
        y();
      }
      SolverVariable localSolverVariable = a(SolverVariable.Type.d, null);
      int i1 = k + 1;
      k = i1;
      t += 1;
      d = i1;
      w.d[i1] = localSolverVariable;
      return localSolverVariable;
    }
    throw null;
  }
  
  public c v()
  {
    return w;
  }
  
  public int x(Object paramObject)
  {
    paramObject = ((ConstraintAnchor)paramObject).h();
    if (paramObject != null) {
      return (int)(g + 0.5F);
    }
    return 0;
  }
  
  public void z()
    throws Exception
  {
    if (g == null)
    {
      if (m.isEmpty())
      {
        n();
        return;
      }
      if ((!q) && (!r))
      {
        A(m);
        return;
      }
      if (g == null)
      {
        int i2 = 0;
        int i1 = 0;
        while (i1 < u)
        {
          if (!p[i1].f)
          {
            i1 = i2;
            break label93;
          }
          i1 += 1;
        }
        i1 = 1;
        label93:
        if (i1 == 0)
        {
          A(m);
          return;
        }
        if (g == null)
        {
          n();
          return;
        }
        throw null;
      }
      throw null;
    }
    throw null;
  }
  
  static abstract interface a
  {
    public abstract void a(SolverVariable paramSolverVariable);
    
    public abstract SolverVariable b(d paramD, boolean[] paramArrayOfBoolean);
    
    public abstract void c(a paramA);
    
    public abstract void clear();
    
    public abstract SolverVariable getKey();
    
    public abstract boolean isEmpty();
  }
  
  class b
    extends b
  {
    public b(c paramC)
    {
      e = new i(this, paramC);
    }
  }
}
