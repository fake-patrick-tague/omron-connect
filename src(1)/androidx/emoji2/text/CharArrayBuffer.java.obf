package androidx.emoji2.text;

import android.os.Build.VERSION;
import android.text.PrecomputedText;
import android.text.Spannable;
import android.text.SpannableString;
import c.h.o.c;
import java.util.stream.IntStream;

class p
  implements Spannable
{
  private boolean b = false;
  private Spannable c;
  
  p(Spannable paramSpannable)
  {
    c = paramSpannable;
  }
  
  p(CharSequence paramCharSequence)
  {
    c = new SpannableString(paramCharSequence);
  }
  
  private void a()
  {
    Spannable localSpannable = c;
    if ((!b) && (c().a(localSpannable))) {
      c = new SpannableString(localSpannable);
    }
    b = true;
  }
  
  static b c()
  {
    if (Build.VERSION.SDK_INT < 28) {
      return new b();
    }
    return new c();
  }
  
  Spannable b()
  {
    return c;
  }
  
  public char charAt(int paramInt)
  {
    return c.charAt(paramInt);
  }
  
  public IntStream chars()
  {
    return a.a(c);
  }
  
  public IntStream codePoints()
  {
    return a.b(c);
  }
  
  public int getSpanEnd(Object paramObject)
  {
    return c.getSpanEnd(paramObject);
  }
  
  public int getSpanFlags(Object paramObject)
  {
    return c.getSpanFlags(paramObject);
  }
  
  public int getSpanStart(Object paramObject)
  {
    return c.getSpanStart(paramObject);
  }
  
  public <T> T[] getSpans(int paramInt1, int paramInt2, Class<T> paramClass)
  {
    return c.getSpans(paramInt1, paramInt2, paramClass);
  }
  
  public int length()
  {
    return c.length();
  }
  
  public int nextSpanTransition(int paramInt1, int paramInt2, Class paramClass)
  {
    return c.nextSpanTransition(paramInt1, paramInt2, paramClass);
  }
  
  public void removeSpan(Object paramObject)
  {
    a();
    c.removeSpan(paramObject);
  }
  
  public void setSpan(Object paramObject, int paramInt1, int paramInt2, int paramInt3)
  {
    a();
    c.setSpan(paramObject, paramInt1, paramInt2, paramInt3);
  }
  
  public CharSequence subSequence(int paramInt1, int paramInt2)
  {
    return c.subSequence(paramInt1, paramInt2);
  }
  
  public String toString()
  {
    return c.toString();
  }
  
  private static class a
  {
    static IntStream a(CharSequence paramCharSequence)
    {
      return paramCharSequence.chars();
    }
    
    static IntStream b(CharSequence paramCharSequence)
    {
      return paramCharSequence.codePoints();
    }
  }
  
  static class b
  {
    b() {}
    
    boolean a(CharSequence paramCharSequence)
    {
      return paramCharSequence instanceof c;
    }
  }
  
  static class c
    extends p.b
  {
    c() {}
    
    boolean a(CharSequence paramCharSequence)
    {
      return ((paramCharSequence instanceof PrecomputedText)) || ((paramCharSequence instanceof c));
    }
  }
}
