package androidx.swiperefreshlayout.widget;

import android.animation.Animator;
import android.animation.Animator.AnimatorListener;
import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Paint.Cap;
import android.graphics.Paint.Style;
import android.graphics.Path;
import android.graphics.Path.FillType;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.Drawable;
import android.util.DisplayMetrics;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import c.h.p.h;

public class b
  extends Drawable
  implements Animatable
{
  private static final Interpolator b = new LinearInterpolator();
  private static final Interpolator c = new c.n.a.a.b();
  private static final int[] d = { -16777216 };
  private final c e;
  private float f;
  private Resources g;
  private Animator h;
  float i;
  boolean j;
  
  public b(Context paramContext)
  {
    g = ((Context)h.g(paramContext)).getResources();
    paramContext = new c();
    e = paramContext;
    paramContext.u(d);
    k(2.5F);
    m();
  }
  
  private void a(float paramFloat, c paramC)
  {
    n(paramFloat, paramC);
    float f1 = (float)(Math.floor(paramC.j() / 0.8F) + 1.0D);
    paramC.y(paramC.k() + (paramC.i() - 0.01F - paramC.k()) * paramFloat);
    paramC.v(paramC.i());
    paramC.w(paramC.j() + (f1 - paramC.j()) * paramFloat);
  }
  
  private int c(float paramFloat, int paramInt1, int paramInt2)
  {
    int k = paramInt1 >> 24 & 0xFF;
    int m = paramInt1 >> 16 & 0xFF;
    int n = paramInt1 >> 8 & 0xFF;
    paramInt1 &= 0xFF;
    return k + (int)(((paramInt2 >> 24 & 0xFF) - k) * paramFloat) << 24 | m + (int)(((paramInt2 >> 16 & 0xFF) - m) * paramFloat) << 16 | n + (int)(((paramInt2 >> 8 & 0xFF) - n) * paramFloat) << 8 | paramInt1 + (int)(paramFloat * ((paramInt2 & 0xFF) - paramInt1));
  }
  
  private void h(float paramFloat)
  {
    f = paramFloat;
  }
  
  private void i(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    c localC = e;
    float f1 = g.getDisplayMetrics().density;
    localC.z(paramFloat2 * f1);
    localC.q(paramFloat1 * f1);
    localC.t(0);
    localC.o(paramFloat3 * f1, paramFloat4 * f1);
  }
  
  private void m()
  {
    final c localC = e;
    ValueAnimator localValueAnimator = ValueAnimator.ofFloat(new float[] { 0.0F, 1.0F });
    localValueAnimator.addUpdateListener(new a(localC));
    localValueAnimator.setRepeatCount(-1);
    localValueAnimator.setRepeatMode(1);
    localValueAnimator.setInterpolator(b);
    localValueAnimator.addListener(new b(localC));
    h = localValueAnimator;
  }
  
  void b(float paramFloat, c paramC, boolean paramBoolean)
  {
    if (j)
    {
      a(paramFloat, paramC);
      return;
    }
    if ((paramFloat != 1.0F) || (paramBoolean))
    {
      float f3 = paramC.j();
      float f1;
      float f2;
      if (paramFloat < 0.5F)
      {
        f1 = paramFloat / 0.5F;
        f2 = paramC.k();
        f1 = c.getInterpolation(f1) * 0.79F + 0.01F + f2;
      }
      else
      {
        f2 = (paramFloat - 0.5F) / 0.5F;
        f1 = paramC.k() + 0.79F;
        f2 = f1 - ((1.0F - c.getInterpolation(f2)) * 0.79F + 0.01F);
      }
      float f4 = i;
      paramC.y(f2);
      paramC.v(f1);
      paramC.w(f3 + 0.20999998F * paramFloat);
      h((paramFloat + f4) * 216.0F);
    }
  }
  
  public void d(boolean paramBoolean)
  {
    e.x(paramBoolean);
    invalidateSelf();
  }
  
  public void draw(Canvas paramCanvas)
  {
    Rect localRect = getBounds();
    paramCanvas.save();
    paramCanvas.rotate(f, localRect.exactCenterX(), localRect.exactCenterY());
    e.a(paramCanvas, localRect);
    paramCanvas.restore();
  }
  
  public void e(float paramFloat)
  {
    e.p(paramFloat);
    invalidateSelf();
  }
  
  public void f(int... paramVarArgs)
  {
    e.u(paramVarArgs);
    e.t(0);
    invalidateSelf();
  }
  
  public void g(float paramFloat)
  {
    e.w(paramFloat);
    invalidateSelf();
  }
  
  public int getAlpha()
  {
    return e.c();
  }
  
  public int getOpacity()
  {
    return -3;
  }
  
  public boolean isRunning()
  {
    return h.isRunning();
  }
  
  public void j(float paramFloat1, float paramFloat2)
  {
    e.y(paramFloat1);
    e.v(paramFloat2);
    invalidateSelf();
  }
  
  public void k(float paramFloat)
  {
    e.z(paramFloat);
    invalidateSelf();
  }
  
  public void l(int paramInt)
  {
    if (paramInt == 0) {
      i(11.0F, 3.0F, 12.0F, 6.0F);
    } else {
      i(7.5F, 2.5F, 10.0F, 5.0F);
    }
    invalidateSelf();
  }
  
  void n(float paramFloat, c paramC)
  {
    if (paramFloat > 0.75F)
    {
      paramC.r(c((paramFloat - 0.75F) / 0.25F, paramC.h(), paramC.e()));
      return;
    }
    paramC.r(paramC.h());
  }
  
  public void setAlpha(int paramInt)
  {
    e.n(paramInt);
    invalidateSelf();
  }
  
  public void setColorFilter(ColorFilter paramColorFilter)
  {
    e.s(paramColorFilter);
    invalidateSelf();
  }
  
  public void start()
  {
    h.cancel();
    e.A();
    if (e.d() != e.g())
    {
      j = true;
      h.setDuration(666L);
      h.start();
      return;
    }
    e.t(0);
    e.m();
    h.setDuration(1332L);
    h.start();
  }
  
  public void stop()
  {
    h.cancel();
    h(0.0F);
    e.x(false);
    e.t(0);
    e.m();
    invalidateSelf();
  }
  
  class a
    implements ValueAnimator.AnimatorUpdateListener
  {
    a(b.c paramC) {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      float f = ((Float)paramValueAnimator.getAnimatedValue()).floatValue();
      n(f, localC);
      b(f, localC, false);
      invalidateSelf();
    }
  }
  
  class b
    implements Animator.AnimatorListener
  {
    b(b.c paramC) {}
    
    public void onAnimationCancel(Animator paramAnimator) {}
    
    public void onAnimationEnd(Animator paramAnimator) {}
    
    public void onAnimationRepeat(Animator paramAnimator)
    {
      b(1.0F, localC, true);
      localC.A();
      localC.l();
      b localB = b.this;
      if (j)
      {
        j = false;
        paramAnimator.cancel();
        paramAnimator.setDuration(1332L);
        paramAnimator.start();
        localC.x(false);
        return;
      }
      i += 1.0F;
    }
    
    public void onAnimationStart(Animator paramAnimator)
    {
      i = 0.0F;
    }
  }
  
  private static class c
  {
    final RectF a = new RectF();
    final Paint b;
    final Paint c;
    final Paint d;
    float e;
    float f;
    float g;
    float h;
    int[] i;
    int j;
    float k;
    float l;
    float m;
    boolean n;
    Path o;
    float p;
    float q;
    int r;
    int s;
    int t;
    int u;
    
    c()
    {
      Paint localPaint1 = new Paint();
      b = localPaint1;
      Paint localPaint2 = new Paint();
      c = localPaint2;
      Paint localPaint3 = new Paint();
      d = localPaint3;
      e = 0.0F;
      f = 0.0F;
      g = 0.0F;
      h = 5.0F;
      p = 1.0F;
      t = 255;
      localPaint1.setStrokeCap(Paint.Cap.SQUARE);
      localPaint1.setAntiAlias(true);
      localPaint1.setStyle(Paint.Style.STROKE);
      localPaint2.setStyle(Paint.Style.FILL);
      localPaint2.setAntiAlias(true);
      localPaint3.setColor(0);
    }
    
    void A()
    {
      k = e;
      l = f;
      m = g;
    }
    
    void a(Canvas paramCanvas, Rect paramRect)
    {
      RectF localRectF = a;
      float f2 = q;
      float f1 = h / 2.0F + f2;
      if (f2 <= 0.0F) {
        f1 = Math.min(paramRect.width(), paramRect.height()) / 2.0F - Math.max(r * p / 2.0F, h / 2.0F);
      }
      localRectF.set(paramRect.centerX() - f1, paramRect.centerY() - f1, paramRect.centerX() + f1, paramRect.centerY() + f1);
      f1 = e;
      f2 = g;
      f1 = (f1 + f2) * 360.0F;
      f2 = (f + f2) * 360.0F - f1;
      b.setColor(u);
      b.setAlpha(t);
      float f3 = h / 2.0F;
      localRectF.inset(f3, f3);
      paramCanvas.drawCircle(localRectF.centerX(), localRectF.centerY(), localRectF.width() / 2.0F, d);
      f3 = -f3;
      localRectF.inset(f3, f3);
      paramCanvas.drawArc(localRectF, f1, f2, false, b);
      b(paramCanvas, f1, f2, localRectF);
    }
    
    void b(Canvas paramCanvas, float paramFloat1, float paramFloat2, RectF paramRectF)
    {
      if (n)
      {
        Path localPath = o;
        if (localPath == null)
        {
          localPath = new Path();
          o = localPath;
          localPath.setFillType(Path.FillType.EVEN_ODD);
        }
        else
        {
          localPath.reset();
        }
        float f1 = Math.min(paramRectF.width(), paramRectF.height()) / 2.0F;
        float f2 = r * p / 2.0F;
        o.moveTo(0.0F, 0.0F);
        o.lineTo(r * p, 0.0F);
        localPath = o;
        float f3 = r;
        float f4 = p;
        localPath.lineTo(f3 * f4 / 2.0F, s * f4);
        o.offset(f1 + paramRectF.centerX() - f2, paramRectF.centerY() + h / 2.0F);
        o.close();
        c.setColor(u);
        c.setAlpha(t);
        paramCanvas.save();
        paramCanvas.rotate(paramFloat1 + paramFloat2, paramRectF.centerX(), paramRectF.centerY());
        paramCanvas.drawPath(o, c);
        paramCanvas.restore();
      }
    }
    
    int c()
    {
      return t;
    }
    
    float d()
    {
      return f;
    }
    
    int e()
    {
      return i[f()];
    }
    
    int f()
    {
      return (j + 1) % i.length;
    }
    
    float g()
    {
      return e;
    }
    
    int h()
    {
      return i[j];
    }
    
    float i()
    {
      return l;
    }
    
    float j()
    {
      return m;
    }
    
    float k()
    {
      return k;
    }
    
    void l()
    {
      t(f());
    }
    
    void m()
    {
      k = 0.0F;
      l = 0.0F;
      m = 0.0F;
      y(0.0F);
      v(0.0F);
      w(0.0F);
    }
    
    void n(int paramInt)
    {
      t = paramInt;
    }
    
    void o(float paramFloat1, float paramFloat2)
    {
      r = ((int)paramFloat1);
      s = ((int)paramFloat2);
    }
    
    void p(float paramFloat)
    {
      if (paramFloat != p) {
        p = paramFloat;
      }
    }
    
    void q(float paramFloat)
    {
      q = paramFloat;
    }
    
    void r(int paramInt)
    {
      u = paramInt;
    }
    
    void s(ColorFilter paramColorFilter)
    {
      b.setColorFilter(paramColorFilter);
    }
    
    void t(int paramInt)
    {
      j = paramInt;
      u = i[paramInt];
    }
    
    void u(int[] paramArrayOfInt)
    {
      i = paramArrayOfInt;
      t(0);
    }
    
    void v(float paramFloat)
    {
      f = paramFloat;
    }
    
    void w(float paramFloat)
    {
      g = paramFloat;
    }
    
    void x(boolean paramBoolean)
    {
      if (n != paramBoolean) {
        n = paramBoolean;
      }
    }
    
    void y(float paramFloat)
    {
      e = paramFloat;
    }
    
    void z(float paramFloat)
    {
      h = paramFloat;
      b.setStrokeWidth(paramFloat);
    }
  }
}
