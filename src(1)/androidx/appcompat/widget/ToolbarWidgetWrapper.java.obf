package androidx.appcompat.widget;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.Window.Callback;
import androidx.appcompat.app.ActionBar.LayoutParams;
import androidx.appcompat.view.menu.b;
import androidx.appcompat.view.menu.g;
import androidx.appcompat.view.menu.g.a;
import androidx.appcompat.view.menu.m.a;
import c.a.e;
import c.a.f;
import c.a.h;
import c.a.j;
import c.h.q.f0;
import c.h.q.j0;
import c.h.q.l0;

public class o0
  implements w
{
  Toolbar a;
  private int b;
  private View c;
  private View d;
  private Drawable e;
  private Drawable f;
  private Drawable g;
  private boolean h;
  CharSequence i;
  private CharSequence j;
  private CharSequence k;
  Window.Callback l;
  boolean m;
  private ActionMenuPresenter n;
  private int o = 0;
  private int p = 0;
  private Drawable q;
  
  public o0(Toolbar paramToolbar, boolean paramBoolean)
  {
    this(paramToolbar, paramBoolean, h.a, e.n);
  }
  
  public o0(Toolbar paramToolbar, boolean paramBoolean, int paramInt1, int paramInt2)
  {
    a = paramToolbar;
    i = paramToolbar.getTitle();
    j = paramToolbar.getSubtitle();
    boolean bool;
    if (i != null) {
      bool = true;
    } else {
      bool = false;
    }
    h = bool;
    g = paramToolbar.getNavigationIcon();
    paramToolbar = n0.v(paramToolbar.getContext(), null, j.a, c.a.a.c, 0);
    q = paramToolbar.g(j.l);
    if (paramBoolean)
    {
      Object localObject = paramToolbar.p(j.r);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        setTitle((CharSequence)localObject);
      }
      localObject = paramToolbar.p(j.p);
      if (!TextUtils.isEmpty((CharSequence)localObject)) {
        H((CharSequence)localObject);
      }
      localObject = paramToolbar.g(j.n);
      if (localObject != null) {
        l((Drawable)localObject);
      }
      localObject = paramToolbar.g(j.m);
      if (localObject != null) {
        setIcon((Drawable)localObject);
      }
      if (g == null)
      {
        localObject = q;
        if (localObject != null) {
          G((Drawable)localObject);
        }
      }
      n(paramToolbar.k(j.h, 0));
      paramInt2 = paramToolbar.n(j.g, 0);
      if (paramInt2 != 0)
      {
        y(LayoutInflater.from(a.getContext()).inflate(paramInt2, a, false));
        n(b | 0x10);
      }
      paramInt2 = paramToolbar.m(j.j, 0);
      if (paramInt2 > 0)
      {
        localObject = a.getLayoutParams();
        height = paramInt2;
        a.setLayoutParams((ViewGroup.LayoutParams)localObject);
      }
      paramInt2 = paramToolbar.e(j.f, -1);
      int i1 = paramToolbar.e(j.e, -1);
      if ((paramInt2 >= 0) || (i1 >= 0)) {
        a.J(Math.max(paramInt2, 0), Math.max(i1, 0));
      }
      paramInt2 = paramToolbar.n(j.s, 0);
      if (paramInt2 != 0)
      {
        localObject = a;
        ((Toolbar)localObject).N(((ViewGroup)localObject).getContext(), paramInt2);
      }
      paramInt2 = paramToolbar.n(j.q, 0);
      if (paramInt2 != 0)
      {
        localObject = a;
        ((Toolbar)localObject).M(((ViewGroup)localObject).getContext(), paramInt2);
      }
      paramInt2 = paramToolbar.n(j.o, 0);
      if (paramInt2 != 0) {
        a.setPopupTheme(paramInt2);
      }
    }
    else
    {
      b = C();
    }
    paramToolbar.w();
    D(paramInt1);
    k = a.getNavigationContentDescription();
    a.setNavigationOnClickListener(new a());
  }
  
  private int C()
  {
    if (a.getNavigationIcon() != null)
    {
      q = a.getNavigationIcon();
      return 15;
    }
    return 11;
  }
  
  private void I(CharSequence paramCharSequence)
  {
    i = paramCharSequence;
    if ((b & 0x8) != 0)
    {
      a.setTitle(paramCharSequence);
      if (h) {
        f0.s0(a.getRootView(), paramCharSequence);
      }
    }
  }
  
  private void J()
  {
    if ((b & 0x4) != 0)
    {
      if (TextUtils.isEmpty(k))
      {
        a.setNavigationContentDescription(p);
        return;
      }
      a.setNavigationContentDescription(k);
    }
  }
  
  private void K()
  {
    if ((b & 0x4) != 0)
    {
      Toolbar localToolbar = a;
      Drawable localDrawable = g;
      if (localDrawable == null) {
        localDrawable = q;
      }
      localToolbar.setNavigationIcon(localDrawable);
      return;
    }
    a.setNavigationIcon(null);
  }
  
  private void L()
  {
    int i1 = b;
    Drawable localDrawable;
    if ((i1 & 0x2) != 0)
    {
      if ((i1 & 0x1) != 0)
      {
        localDrawable = f;
        if (localDrawable == null) {
          localDrawable = e;
        }
      }
      else
      {
        localDrawable = e;
      }
    }
    else {
      localDrawable = null;
    }
    a.setLogo(localDrawable);
  }
  
  public void A()
  {
    Log.i("ToolbarWidgetWrapper", "Progress display unsupported");
  }
  
  public void B(boolean paramBoolean)
  {
    a.setCollapsible(paramBoolean);
  }
  
  public void D(int paramInt)
  {
    if (paramInt == p) {
      return;
    }
    p = paramInt;
    if (TextUtils.isEmpty(a.getNavigationContentDescription())) {
      E(p);
    }
  }
  
  public void E(int paramInt)
  {
    String str;
    if (paramInt == 0) {
      str = null;
    } else {
      str = getContext().getString(paramInt);
    }
    F(str);
  }
  
  public void F(CharSequence paramCharSequence)
  {
    k = paramCharSequence;
    J();
  }
  
  public void G(Drawable paramDrawable)
  {
    g = paramDrawable;
    K();
  }
  
  public void H(CharSequence paramCharSequence)
  {
    j = paramCharSequence;
    if ((b & 0x8) != 0) {
      a.setSubtitle(paramCharSequence);
    }
  }
  
  public void a(Drawable paramDrawable)
  {
    f0.t0(a, paramDrawable);
  }
  
  public void b(Menu paramMenu, m.a paramA)
  {
    if (n == null)
    {
      ActionMenuPresenter localActionMenuPresenter = new ActionMenuPresenter(a.getContext());
      n = localActionMenuPresenter;
      localActionMenuPresenter.r(f.g);
    }
    n.g(paramA);
    a.K((g)paramMenu, n);
  }
  
  public boolean c()
  {
    return a.B();
  }
  
  public void collapseActionView()
  {
    a.e();
  }
  
  public void d()
  {
    m = true;
  }
  
  public boolean e()
  {
    return a.d();
  }
  
  public boolean f()
  {
    return a.A();
  }
  
  public boolean g()
  {
    return a.w();
  }
  
  public Context getContext()
  {
    return a.getContext();
  }
  
  public int getHeight()
  {
    return a.getHeight();
  }
  
  public CharSequence getTitle()
  {
    return a.getTitle();
  }
  
  public boolean h()
  {
    return a.Q();
  }
  
  public void i()
  {
    a.f();
  }
  
  public View j()
  {
    return d;
  }
  
  public void k(g0 paramG0)
  {
    Object localObject = c;
    if (localObject != null)
    {
      localObject = ((View)localObject).getParent();
      Toolbar localToolbar = a;
      if (localObject == localToolbar) {
        localToolbar.removeView(c);
      }
    }
    c = paramG0;
    if ((paramG0 != null) && (o == 2))
    {
      a.addView(paramG0, 0);
      localObject = (Toolbar.LayoutParams)c.getLayoutParams();
      width = -2;
      height = -2;
      a = 8388691;
      paramG0.setAllowCollapse(true);
    }
  }
  
  public void l(Drawable paramDrawable)
  {
    f = paramDrawable;
    L();
  }
  
  public boolean m()
  {
    return a.v();
  }
  
  public void n(int paramInt)
  {
    int i1 = b ^ paramInt;
    b = paramInt;
    if (i1 != 0)
    {
      if ((i1 & 0x4) != 0)
      {
        if ((paramInt & 0x4) != 0) {
          J();
        }
        K();
      }
      if ((i1 & 0x3) != 0) {
        L();
      }
      if ((i1 & 0x8) != 0) {
        if ((paramInt & 0x8) != 0)
        {
          a.setTitle(i);
          a.setSubtitle(j);
        }
        else
        {
          a.setTitle(null);
          a.setSubtitle(null);
        }
      }
      if ((i1 & 0x10) != 0)
      {
        View localView = d;
        if (localView != null)
        {
          if ((paramInt & 0x10) != 0)
          {
            a.addView(localView);
            return;
          }
          a.removeView(localView);
        }
      }
    }
  }
  
  public Menu o()
  {
    return a.getMenu();
  }
  
  public void p(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = c.a.k.a.a.b(getContext(), paramInt);
    } else {
      localDrawable = null;
    }
    l(localDrawable);
  }
  
  public int q()
  {
    return o;
  }
  
  public j0 r(final int paramInt, long paramLong)
  {
    j0 localJ0 = f0.d(a);
    float f1;
    if (paramInt == 0) {
      f1 = 1.0F;
    } else {
      f1 = 0.0F;
    }
    return localJ0.a(f1).e(paramLong).g(new b(paramInt));
  }
  
  public void s(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = c.a.k.a.a.b(getContext(), paramInt);
    } else {
      localDrawable = null;
    }
    G(localDrawable);
  }
  
  public void setIcon(int paramInt)
  {
    Drawable localDrawable;
    if (paramInt != 0) {
      localDrawable = c.a.k.a.a.b(getContext(), paramInt);
    } else {
      localDrawable = null;
    }
    setIcon(localDrawable);
  }
  
  public void setIcon(Drawable paramDrawable)
  {
    e = paramDrawable;
    L();
  }
  
  public void setTitle(CharSequence paramCharSequence)
  {
    h = true;
    I(paramCharSequence);
  }
  
  public void setWindowCallback(Window.Callback paramCallback)
  {
    l = paramCallback;
  }
  
  public void setWindowTitle(CharSequence paramCharSequence)
  {
    if (!h) {
      I(paramCharSequence);
    }
  }
  
  public void t(m.a paramA, g.a paramA1)
  {
    a.L(paramA, paramA1);
  }
  
  public void u(int paramInt)
  {
    a.setVisibility(paramInt);
  }
  
  public ViewGroup v()
  {
    return a;
  }
  
  public void w(boolean paramBoolean) {}
  
  public int x()
  {
    return b;
  }
  
  public void y(View paramView)
  {
    View localView = d;
    if ((localView != null) && ((b & 0x10) != 0)) {
      a.removeView(localView);
    }
    d = paramView;
    if ((paramView != null) && ((b & 0x10) != 0)) {
      a.addView(paramView);
    }
  }
  
  public void z()
  {
    Log.i("ToolbarWidgetWrapper", "Progress display unsupported");
  }
  
  class a
    implements View.OnClickListener
  {
    final androidx.appcompat.view.menu.a b = new androidx.appcompat.view.menu.a(a.getContext(), 0, 16908332, 0, 0, i);
    
    a() {}
    
    public void onClick(View paramView)
    {
      paramView = o0.this;
      Window.Callback localCallback = l;
      if ((localCallback != null) && (m)) {
        localCallback.onMenuItemSelected(0, b);
      }
    }
  }
  
  class b
    extends l0
  {
    private boolean a = false;
    
    b(int paramInt) {}
    
    public void a(View paramView)
    {
      a = true;
    }
    
    public void b(View paramView)
    {
      if (!a) {
        a.setVisibility(paramInt);
      }
    }
    
    public void c(View paramView)
    {
      a.setVisibility(0);
    }
  }
}
