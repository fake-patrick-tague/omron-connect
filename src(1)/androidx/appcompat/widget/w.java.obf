package androidx.appcompat.widget;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.os.Build.VERSION;
import android.transition.Transition;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.HeaderViewListAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import androidx.appcompat.view.menu.ListMenuItemView;
import androidx.appcompat.view.menu.f;
import androidx.appcompat.view.menu.g;
import androidx.appcompat.view.menu.i;
import java.lang.reflect.Method;

public class c0
  extends ListPopupWindow
  implements b0
{
  private static Method K;
  private b0 L;
  
  static
  {
    try
    {
      if (Build.VERSION.SDK_INT > 28) {
        break label37;
      }
      K = PopupWindow.class.getDeclaredMethod("setTouchModal", new Class[] { Boolean.TYPE });
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      label37:
      for (;;) {}
    }
    Log.i("MenuPopupWindow", "Could not find method setTouchModal() on PopupWindow. Oh well.");
  }
  
  public c0(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
  }
  
  public void R(Object paramObject)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      a.a(J, (Transition)paramObject);
    }
  }
  
  public void S(Object paramObject)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      a.b(J, (Transition)paramObject);
    }
  }
  
  public void T(b0 paramB0)
  {
    L = paramB0;
  }
  
  public void U(boolean paramBoolean)
  {
    Method localMethod;
    if (Build.VERSION.SDK_INT <= 28)
    {
      localMethod = K;
      if (localMethod == null) {
        break label54;
      }
    }
    try
    {
      localMethod.invoke(J, new Object[] { Boolean.valueOf(paramBoolean) });
      return;
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
    Log.i("MenuPopupWindow", "Could not invoke setTouchModal() on PopupWindow. Oh well.");
    return;
    b.a(J, paramBoolean);
    label54:
  }
  
  public void d(g paramG, MenuItem paramMenuItem)
  {
    b0 localB0 = L;
    if (localB0 != null) {
      localB0.d(paramG, paramMenuItem);
    }
  }
  
  public void g(g paramG, MenuItem paramMenuItem)
  {
    b0 localB0 = L;
    if (localB0 != null) {
      localB0.g(paramG, paramMenuItem);
    }
  }
  
  y s(Context paramContext, boolean paramBoolean)
  {
    paramContext = new c(paramContext, paramBoolean);
    paramContext.setHoverListener(this);
    return paramContext;
  }
  
  static class a
  {
    static void a(PopupWindow paramPopupWindow, Transition paramTransition)
    {
      paramPopupWindow.setEnterTransition(paramTransition);
    }
    
    static void b(PopupWindow paramPopupWindow, Transition paramTransition)
    {
      paramPopupWindow.setExitTransition(paramTransition);
    }
  }
  
  static class b
  {
    static void a(PopupWindow paramPopupWindow, boolean paramBoolean)
    {
      paramPopupWindow.setTouchModal(paramBoolean);
    }
  }
  
  public static class c
    extends y
  {
    final int o;
    final int p;
    private b0 q;
    private MenuItem r;
    
    public c(Context paramContext, boolean paramBoolean)
    {
      super(paramBoolean);
      paramContext = paramContext.getResources().getConfiguration();
      if ((Build.VERSION.SDK_INT >= 17) && (1 == a.a(paramContext)))
      {
        o = 21;
        p = 22;
        return;
      }
      o = 22;
      p = 21;
    }
    
    public boolean onHoverEvent(MotionEvent paramMotionEvent)
    {
      if (q != null)
      {
        Object localObject1 = getAdapter();
        int i;
        if ((localObject1 instanceof HeaderViewListAdapter))
        {
          localObject1 = (HeaderViewListAdapter)localObject1;
          i = ((HeaderViewListAdapter)localObject1).getHeadersCount();
          localObject1 = (f)((HeaderViewListAdapter)localObject1).getWrappedAdapter();
        }
        else
        {
          i = 0;
          localObject1 = (f)localObject1;
        }
        MenuItem localMenuItem = null;
        Object localObject2 = localMenuItem;
        if (paramMotionEvent.getAction() != 10)
        {
          int j = pointToPosition((int)paramMotionEvent.getX(), (int)paramMotionEvent.getY());
          localObject2 = localMenuItem;
          if (j != -1)
          {
            i = j - i;
            localObject2 = localMenuItem;
            if (i >= 0)
            {
              localObject2 = localMenuItem;
              if (i < ((f)localObject1).getCount()) {
                localObject2 = ((f)localObject1).c(i);
              }
            }
          }
        }
        localMenuItem = r;
        if (localMenuItem != localObject2)
        {
          localObject1 = ((f)localObject1).b();
          if (localMenuItem != null) {
            q.g((g)localObject1, localMenuItem);
          }
          r = ((MenuItem)localObject2);
          if (localObject2 != null) {
            q.d((g)localObject1, (MenuItem)localObject2);
          }
        }
      }
      return super.onHoverEvent(paramMotionEvent);
    }
    
    public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
    {
      ListMenuItemView localListMenuItemView = (ListMenuItemView)getSelectedView();
      if ((localListMenuItemView != null) && (paramInt == o))
      {
        if ((localListMenuItemView.isEnabled()) && (localListMenuItemView.getItemData().hasSubMenu())) {
          performItemClick(localListMenuItemView, getSelectedItemPosition(), getSelectedItemId());
        }
        return true;
      }
      if ((localListMenuItemView != null) && (paramInt == p))
      {
        setSelection(-1);
        paramKeyEvent = getAdapter();
        if ((paramKeyEvent instanceof HeaderViewListAdapter)) {
          paramKeyEvent = (f)((HeaderViewListAdapter)paramKeyEvent).getWrappedAdapter();
        } else {
          paramKeyEvent = (f)paramKeyEvent;
        }
        paramKeyEvent.b().e(false);
        return true;
      }
      return super.onKeyDown(paramInt, paramKeyEvent);
    }
    
    public void setHoverListener(b0 paramB0)
    {
      q = paramB0;
    }
    
    static class a
    {
      static int a(Configuration paramConfiguration)
      {
        return paramConfiguration.getLayoutDirection();
      }
    }
  }
}
