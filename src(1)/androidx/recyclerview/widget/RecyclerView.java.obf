package androidx.recyclerview.widget;

import android.animation.LayoutTransition;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.Observable;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.StateListDrawable;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.os.SystemClock;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.view.Display;
import android.view.FocusFinder;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.Interpolator;
import android.widget.EdgeEffect;
import android.widget.OverScroller;
import androidx.customview.view.AbsSavedState;
import c.h.m.m;
import c.h.p.h;
import c.h.q.f0;
import c.h.q.g0;
import c.h.q.p0.c;
import c.h.q.p0.c.b;
import c.h.q.s;
import c.h.q.t;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class RecyclerView
  extends ViewGroup
  implements t
{
  private static final int[] b = { 16843830 };
  static final boolean c;
  static final boolean d;
  static final boolean e;
  static final boolean f;
  private static final boolean g;
  private static final boolean h;
  private static final Class<?>[] i;
  static final Interpolator j = new c();
  private final ArrayList<r> A = new ArrayList();
  private RecyclerView.l.b A0;
  private r B;
  boolean B0;
  boolean C;
  u C0;
  boolean D;
  private j D0;
  boolean E;
  private final int[] E0;
  boolean F;
  private c.h.q.u F0;
  private int G = 0;
  private final int[] G0;
  boolean H;
  private final int[] H0;
  boolean I;
  final int[] I0;
  private boolean J;
  final List<b0> J0;
  private int K;
  private Runnable K0;
  boolean L;
  private boolean L0;
  private int M0;
  private int N0;
  private final z.b O0;
  private final AccessibilityManager P;
  private List<p> Q;
  boolean R = false;
  boolean S = false;
  private int T = 0;
  private int U = 0;
  private k V = new k();
  private EdgeEffect W;
  private EdgeEffect a0;
  private EdgeEffect b0;
  private EdgeEffect c0;
  l d0 = new g();
  private int e0 = 0;
  private int f0 = -1;
  private VelocityTracker g0;
  private int h0;
  private int i0;
  private int j0;
  private final w k = new w();
  private int k0;
  final u l = new u();
  private int l0;
  SavedState m;
  private q m0;
  a n;
  private final int n0;
  f o;
  private final int o0;
  final z p = new z();
  private float p0 = Float.MIN_VALUE;
  boolean q;
  private float q0 = Float.MIN_VALUE;
  final Runnable r = new a();
  private boolean r0;
  final Rect s = new Rect();
  final a0 s0;
  private final Rect t = new Rect();
  j t0;
  final RectF u = new RectF();
  j.b u0;
  Adapter v;
  final y v0;
  o w;
  private s w0;
  v x;
  private List<s> x0;
  final List<v> y = new ArrayList();
  boolean y0;
  final ArrayList<n> z = new ArrayList();
  boolean z0;
  
  static
  {
    int i1 = Build.VERSION.SDK_INT;
    boolean bool;
    if ((i1 != 18) && (i1 != 19) && (i1 != 20)) {
      bool = false;
    } else {
      bool = true;
    }
    c = bool;
    if (i1 >= 23) {
      bool = true;
    } else {
      bool = false;
    }
    d = bool;
    if (i1 >= 16) {
      bool = true;
    } else {
      bool = false;
    }
    e = bool;
    if (i1 >= 21) {
      bool = true;
    } else {
      bool = false;
    }
    f = bool;
    if (i1 <= 15) {
      bool = true;
    } else {
      bool = false;
    }
    g = bool;
    if (i1 <= 15) {
      bool = true;
    } else {
      bool = false;
    }
    h = bool;
    Class localClass = Integer.TYPE;
    i = new Class[] { Context.class, AttributeSet.class, localClass, localClass };
  }
  
  public RecyclerView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public RecyclerView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, c.s.a.a);
  }
  
  public RecyclerView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    boolean bool2 = true;
    r0 = true;
    s0 = new a0();
    if (f) {
      localObject1 = new j.b();
    } else {
      localObject1 = null;
    }
    u0 = ((j.b)localObject1);
    v0 = new y();
    y0 = false;
    z0 = false;
    A0 = new m();
    B0 = false;
    E0 = new int[2];
    G0 = new int[2];
    H0 = new int[2];
    I0 = new int[2];
    J0 = new ArrayList();
    K0 = new b();
    M0 = 0;
    N0 = 0;
    O0 = new d();
    setScrollContainer(true);
    setFocusableInTouchMode(true);
    Object localObject1 = ViewConfiguration.get(paramContext);
    l0 = ((ViewConfiguration)localObject1).getScaledTouchSlop();
    p0 = g0.b((ViewConfiguration)localObject1, paramContext);
    q0 = g0.d((ViewConfiguration)localObject1, paramContext);
    n0 = ((ViewConfiguration)localObject1).getScaledMinimumFlingVelocity();
    o0 = ((ViewConfiguration)localObject1).getScaledMaximumFlingVelocity();
    if (getOverScrollMode() == 2) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    setWillNotDraw(bool1);
    d0.w(A0);
    q0();
    s0();
    r0();
    if (f0.B(this) == 0) {
      f0.A0(this, 1);
    }
    P = ((AccessibilityManager)getContext().getSystemService("accessibility"));
    setAccessibilityDelegateCompat(new u(this));
    Object localObject2 = c.s.d.f;
    localObject1 = paramContext.obtainStyledAttributes(paramAttributeSet, (int[])localObject2, paramInt, 0);
    f0.n0(this, paramContext, (int[])localObject2, paramAttributeSet, (TypedArray)localObject1, paramInt, 0);
    localObject2 = ((TypedArray)localObject1).getString(c.s.d.o);
    if (((TypedArray)localObject1).getInt(c.s.d.i, -1) == -1) {
      setDescendantFocusability(262144);
    }
    q = ((TypedArray)localObject1).getBoolean(c.s.d.h, true);
    boolean bool1 = ((TypedArray)localObject1).getBoolean(c.s.d.j, false);
    E = bool1;
    if (bool1) {
      t0((StateListDrawable)((TypedArray)localObject1).getDrawable(c.s.d.m), ((TypedArray)localObject1).getDrawable(c.s.d.n), (StateListDrawable)((TypedArray)localObject1).getDrawable(c.s.d.k), ((TypedArray)localObject1).getDrawable(c.s.d.l));
    }
    ((TypedArray)localObject1).recycle();
    w(paramContext, (String)localObject2, paramAttributeSet, paramInt, 0);
    bool1 = bool2;
    if (Build.VERSION.SDK_INT >= 21)
    {
      localObject1 = b;
      localObject2 = paramContext.obtainStyledAttributes(paramAttributeSet, (int[])localObject1, paramInt, 0);
      f0.n0(this, paramContext, (int[])localObject1, paramAttributeSet, (TypedArray)localObject2, paramInt, 0);
      bool1 = ((TypedArray)localObject2).getBoolean(0, true);
      ((TypedArray)localObject2).recycle();
    }
    setNestedScrollingEnabled(bool1);
  }
  
  private void B()
  {
    int i1 = K;
    K = 0;
    if ((i1 != 0) && (v0()))
    {
      AccessibilityEvent localAccessibilityEvent = AccessibilityEvent.obtain();
      localAccessibilityEvent.setEventType(2048);
      c.h.q.p0.b.b(localAccessibilityEvent, i1);
      sendAccessibilityEventUnchecked(localAccessibilityEvent);
    }
  }
  
  private void B0(int paramInt1, int paramInt2, MotionEvent paramMotionEvent, int paramInt3)
  {
    Object localObject = w;
    if (localObject == null)
    {
      Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
      return;
    }
    if (I) {
      return;
    }
    int[] arrayOfInt = I0;
    int i5 = 0;
    arrayOfInt[0] = 0;
    arrayOfInt[1] = 0;
    boolean bool1 = ((o)localObject).H();
    boolean bool2 = w.I();
    if (bool1) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2 = i1;
    if (bool2) {
      i2 = i1 | 0x2;
    }
    v1(i2, paramInt3);
    int i3;
    if (bool1) {
      i3 = paramInt1;
    } else {
      i3 = 0;
    }
    int i4;
    if (bool2) {
      i4 = paramInt2;
    } else {
      i4 = 0;
    }
    i2 = paramInt1;
    int i1 = paramInt2;
    if (G(i3, i4, I0, G0, paramInt3))
    {
      localObject = I0;
      i2 = paramInt1 - localObject[0];
      i1 = paramInt2 - localObject[1];
    }
    if (bool1) {
      paramInt1 = i2;
    } else {
      paramInt1 = 0;
    }
    paramInt2 = i5;
    if (bool2) {
      paramInt2 = i1;
    }
    j1(paramInt1, paramInt2, paramMotionEvent, paramInt3);
    paramMotionEvent = t0;
    if ((paramMotionEvent != null) && ((i2 != 0) || (i1 != 0))) {
      paramMotionEvent.f(this, i2, i1);
    }
    x1(paramInt3);
  }
  
  private void D()
  {
    Object localObject = v0;
    boolean bool = true;
    ((y)localObject).a(1);
    R(v0);
    v0.j = false;
    u1();
    p.f();
    J0();
    R0();
    h1();
    localObject = v0;
    if ((!k) || (!z0)) {
      bool = false;
    }
    i = bool;
    z0 = false;
    y0 = false;
    h = l;
    f = v.getItemCount();
    W(E0);
    int i2;
    int i1;
    RecyclerView.l.c localC;
    if (v0.k)
    {
      i2 = o.g();
      i1 = 0;
      while (i1 < i2)
      {
        localObject = i0(o.f(i1));
        if ((!((b0)localObject).shouldIgnore()) && ((!((b0)localObject).isInvalid()) || (v.hasStableIds())))
        {
          localC = d0.u(v0, (b0)localObject, l.e((b0)localObject), ((b0)localObject).getUnmodifiedPayloads());
          p.e((b0)localObject, localC);
          if ((v0.i) && (((b0)localObject).isUpdated()) && (!((b0)localObject).isRemoved()) && (!((b0)localObject).shouldIgnore()) && (!((b0)localObject).isInvalid()))
          {
            long l1 = e0((b0)localObject);
            p.c(l1, (b0)localObject);
          }
        }
        i1 += 1;
      }
    }
    if (v0.l)
    {
      i1();
      localObject = v0;
      bool = g;
      g = false;
      w.r1(l, (y)localObject);
      v0.g = bool;
      i1 = 0;
      while (i1 < o.g())
      {
        localObject = i0(o.f(i1));
        if ((!((b0)localObject).shouldIgnore()) && (!p.i((b0)localObject)))
        {
          int i3 = l.e((b0)localObject);
          bool = ((b0)localObject).hasAnyOfTheFlags(8192);
          i2 = i3;
          if (!bool) {
            i2 = i3 | 0x1000;
          }
          localC = d0.u(v0, (b0)localObject, i2, ((b0)localObject).getUnmodifiedPayloads());
          if (bool) {
            U0((b0)localObject, localC);
          } else {
            p.a((b0)localObject, localC);
          }
        }
        i1 += 1;
      }
      t();
    }
    else
    {
      t();
    }
    K0();
    w1(false);
    v0.e = 2;
  }
  
  private void E()
  {
    u1();
    J0();
    v0.a(6);
    n.j();
    v0.f = v.getItemCount();
    v0.d = 0;
    if ((m != null) && (v.canRestoreState()))
    {
      localObject = m.d;
      if (localObject != null) {
        w.w1((Parcelable)localObject);
      }
      m = null;
    }
    Object localObject = v0;
    h = false;
    w.r1(l, (y)localObject);
    localObject = v0;
    g = false;
    boolean bool;
    if ((k) && (d0 != null)) {
      bool = true;
    } else {
      bool = false;
    }
    k = bool;
    e = 4;
    K0();
    w1(false);
  }
  
  private void F()
  {
    v0.a(4);
    u1();
    J0();
    Object localObject = v0;
    e = 1;
    if (k)
    {
      int i1 = o.g() - 1;
      while (i1 >= 0)
      {
        localObject = i0(o.f(i1));
        if (!((b0)localObject).shouldIgnore())
        {
          long l1 = e0((b0)localObject);
          RecyclerView.l.c localC2 = d0.t(v0, (b0)localObject);
          b0 localB0 = p.g(l1);
          if ((localB0 != null) && (!localB0.shouldIgnore()))
          {
            boolean bool1 = p.h(localB0);
            boolean bool2 = p.h((b0)localObject);
            if ((bool1) && (localB0 == localObject))
            {
              p.d((b0)localObject, localC2);
            }
            else
            {
              RecyclerView.l.c localC1 = p.n(localB0);
              p.d((b0)localObject, localC2);
              localC2 = p.m((b0)localObject);
              if (localC1 == null) {
                n0(l1, (b0)localObject, localB0);
              } else {
                n(localB0, (b0)localObject, localC1, localC2, bool1, bool2);
              }
            }
          }
          else
          {
            p.d((b0)localObject, localC2);
          }
        }
        i1 -= 1;
      }
      p.o(O0);
    }
    w.G1(l);
    localObject = v0;
    c = f;
    R = false;
    S = false;
    k = false;
    l = false;
    w.h = false;
    localObject = l.b;
    if (localObject != null) {
      ((ArrayList)localObject).clear();
    }
    localObject = w;
    if (n)
    {
      m = 0;
      n = false;
      l.K();
    }
    w.s1(v0);
    K0();
    w1(false);
    p.f();
    localObject = E0;
    if (y(localObject[0], localObject[1])) {
      J(0, 0);
    }
    V0();
    f1();
  }
  
  private boolean L(MotionEvent paramMotionEvent)
  {
    r localR = B;
    if (localR == null)
    {
      if (paramMotionEvent.getAction() == 0) {
        return false;
      }
      return V(paramMotionEvent);
    }
    localR.a(this, paramMotionEvent);
    int i1 = paramMotionEvent.getAction();
    if ((i1 == 3) || (i1 == 1)) {
      B = null;
    }
    return true;
  }
  
  private void M0(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionIndex();
    if (paramMotionEvent.getPointerId(i1) == f0)
    {
      if (i1 == 0) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      f0 = paramMotionEvent.getPointerId(i1);
      int i2 = (int)(paramMotionEvent.getX(i1) + 0.5F);
      j0 = i2;
      h0 = i2;
      i1 = (int)(paramMotionEvent.getY(i1) + 0.5F);
      k0 = i1;
      i0 = i1;
    }
  }
  
  private boolean Q0()
  {
    return (d0 != null) && (w.i2());
  }
  
  private void R0()
  {
    if (R)
    {
      n.y();
      if (S) {
        w.m1(this);
      }
    }
    if (Q0()) {
      n.w();
    } else {
      n.j();
    }
    boolean bool1 = y0;
    boolean bool2 = false;
    int i1;
    if ((!bool1) && (!z0)) {
      i1 = 0;
    } else {
      i1 = 1;
    }
    y localY = v0;
    if ((F) && (d0 != null))
    {
      bool1 = R;
      if (((bool1) || (i1 != 0) || (w.h)) && ((!bool1) || (v.hasStableIds())))
      {
        bool1 = true;
        break label145;
      }
    }
    bool1 = false;
    label145:
    k = bool1;
    localY = v0;
    bool1 = bool2;
    if (k)
    {
      bool1 = bool2;
      if (i1 != 0)
      {
        bool1 = bool2;
        if (!R)
        {
          bool1 = bool2;
          if (Q0()) {
            bool1 = true;
          }
        }
      }
    }
    l = bool1;
  }
  
  private void T0(float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4)
  {
    int i2 = 1;
    if (paramFloat2 < 0.0F)
    {
      N();
      androidx.core.widget.d.f(W, -paramFloat2 / getWidth(), 1.0F - paramFloat3 / getHeight());
    }
    for (;;)
    {
      i1 = 1;
      break label80;
      if (paramFloat2 <= 0.0F) {
        break;
      }
      O();
      androidx.core.widget.d.f(b0, paramFloat2 / getWidth(), paramFloat3 / getHeight());
    }
    int i1 = 0;
    label80:
    if (paramFloat4 < 0.0F)
    {
      P();
      androidx.core.widget.d.f(a0, -paramFloat4 / getHeight(), paramFloat1 / getWidth());
      i1 = i2;
    }
    else if (paramFloat4 > 0.0F)
    {
      M();
      androidx.core.widget.d.f(c0, paramFloat4 / getHeight(), 1.0F - paramFloat1 / getWidth());
      i1 = i2;
    }
    if ((i1 != 0) || (paramFloat2 != 0.0F) || (paramFloat4 != 0.0F)) {
      f0.g0(this);
    }
  }
  
  private boolean V(MotionEvent paramMotionEvent)
  {
    int i2 = paramMotionEvent.getAction();
    int i3 = A.size();
    int i1 = 0;
    while (i1 < i3)
    {
      r localR = (r)A.get(i1);
      if ((localR.c(this, paramMotionEvent)) && (i2 != 3))
      {
        B = localR;
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  private void V0()
  {
    if ((r0) && (v != null) && (hasFocus()) && (getDescendantFocusability() != 393216))
    {
      if ((getDescendantFocusability() == 131072) && (isFocused())) {
        return;
      }
      Object localObject1;
      if (!isFocused())
      {
        localObject1 = getFocusedChild();
        if ((h) && ((((View)localObject1).getParent() == null) || (!((View)localObject1).hasFocus())))
        {
          if (o.g() == 0) {
            requestFocus();
          }
        }
        else if (!o.n((View)localObject1)) {
          return;
        }
      }
      long l1 = v0.n;
      Object localObject2 = null;
      if ((l1 != -1L) && (v.hasStableIds())) {
        localObject1 = a0(v0.n);
      } else {
        localObject1 = null;
      }
      if ((localObject1 != null) && (!o.n(itemView)) && (itemView.hasFocusable()))
      {
        localObject1 = itemView;
      }
      else
      {
        localObject1 = localObject2;
        if (o.g() > 0) {
          localObject1 = Y();
        }
      }
      if (localObject1 != null)
      {
        int i1 = v0.o;
        localObject2 = localObject1;
        if (i1 != -1L)
        {
          View localView = ((View)localObject1).findViewById(i1);
          localObject2 = localObject1;
          if (localView != null)
          {
            localObject2 = localObject1;
            if (localView.isFocusable()) {
              localObject2 = localView;
            }
          }
        }
        localObject2.requestFocus();
      }
    }
  }
  
  private void W(int[] paramArrayOfInt)
  {
    int i7 = o.g();
    if (i7 == 0)
    {
      paramArrayOfInt[0] = -1;
      paramArrayOfInt[1] = -1;
      return;
    }
    int i2 = Integer.MAX_VALUE;
    int i4 = Integer.MIN_VALUE;
    int i3 = 0;
    while (i3 < i7)
    {
      b0 localB0 = i0(o.f(i3));
      int i6;
      if (localB0.shouldIgnore())
      {
        i6 = i4;
      }
      else
      {
        int i5 = localB0.getLayoutPosition();
        int i1 = i2;
        if (i5 < i2) {
          i1 = i5;
        }
        i2 = i1;
        i6 = i4;
        if (i5 > i4)
        {
          i6 = i5;
          i2 = i1;
        }
      }
      i3 += 1;
      i4 = i6;
    }
    paramArrayOfInt[0] = i2;
    paramArrayOfInt[1] = i4;
  }
  
  private void W0()
  {
    EdgeEffect localEdgeEffect = W;
    if (localEdgeEffect != null)
    {
      localEdgeEffect.onRelease();
      bool2 = W.isFinished();
    }
    else
    {
      bool2 = false;
    }
    localEdgeEffect = a0;
    boolean bool1 = bool2;
    if (localEdgeEffect != null)
    {
      localEdgeEffect.onRelease();
      bool1 = bool2 | a0.isFinished();
    }
    localEdgeEffect = b0;
    boolean bool2 = bool1;
    if (localEdgeEffect != null)
    {
      localEdgeEffect.onRelease();
      bool2 = bool1 | b0.isFinished();
    }
    localEdgeEffect = c0;
    bool1 = bool2;
    if (localEdgeEffect != null)
    {
      localEdgeEffect.onRelease();
      bool1 = bool2 | c0.isFinished();
    }
    if (bool1) {
      f0.g0(this);
    }
  }
  
  static RecyclerView X(View paramView)
  {
    if (!(paramView instanceof ViewGroup)) {
      return null;
    }
    if ((paramView instanceof RecyclerView)) {
      return (RecyclerView)paramView;
    }
    paramView = (ViewGroup)paramView;
    int i2 = paramView.getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      RecyclerView localRecyclerView = X(paramView.getChildAt(i1));
      if (localRecyclerView != null) {
        return localRecyclerView;
      }
      i1 += 1;
    }
    return null;
  }
  
  private View Y()
  {
    Object localObject = v0;
    int i1 = m;
    if (i1 == -1) {
      i1 = 0;
    }
    int i3 = ((y)localObject).b();
    int i2 = i1;
    while (i2 < i3)
    {
      localObject = Z(i2);
      if (localObject == null) {
        break;
      }
      if (itemView.hasFocusable()) {
        return itemView;
      }
      i2 += 1;
    }
    i1 = Math.min(i3, i1) - 1;
    while (i1 >= 0)
    {
      localObject = Z(i1);
      if (localObject == null) {
        return null;
      }
      if (itemView.hasFocusable()) {
        return itemView;
      }
      i1 -= 1;
    }
    return null;
  }
  
  private void e1(View paramView1, View paramView2)
  {
    if (paramView2 != null) {
      localObject = paramView2;
    } else {
      localObject = paramView1;
    }
    s.set(0, 0, ((View)localObject).getWidth(), ((View)localObject).getHeight());
    Object localObject = ((View)localObject).getLayoutParams();
    if ((localObject instanceof LayoutParams))
    {
      localObject = (LayoutParams)localObject;
      if (!d)
      {
        localObject = c;
        localRect = s;
        left -= left;
        right += right;
        top -= top;
        bottom += bottom;
      }
    }
    if (paramView2 != null)
    {
      offsetDescendantRectToMyCoords(paramView2, s);
      offsetRectIntoDescendantCoords(paramView1, s);
    }
    localObject = w;
    Rect localRect = s;
    boolean bool2 = F;
    boolean bool1;
    if (paramView2 == null) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    ((o)localObject).N1(this, paramView1, localRect, bool2 ^ true, bool1);
  }
  
  private void f1()
  {
    y localY = v0;
    n = -1L;
    m = -1;
    o = -1;
  }
  
  private void g(b0 paramB0)
  {
    View localView = itemView;
    int i1;
    if (localView.getParent() == this) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    l.J(h0(localView));
    if (paramB0.isTmpDetached())
    {
      o.c(localView, -1, localView.getLayoutParams(), true);
      return;
    }
    if (i1 == 0)
    {
      o.b(localView, true);
      return;
    }
    o.k(localView);
  }
  
  private void g1()
  {
    VelocityTracker localVelocityTracker = g0;
    if (localVelocityTracker != null) {
      localVelocityTracker.clear();
    }
    x1(0);
    W0();
  }
  
  private c.h.q.u getScrollingChildHelper()
  {
    if (F0 == null) {
      F0 = new c.h.q.u(this);
    }
    return F0;
  }
  
  private void h1()
  {
    boolean bool = r0;
    y localY = null;
    Object localObject;
    if ((bool) && (hasFocus()) && (v != null)) {
      localObject = getFocusedChild();
    } else {
      localObject = null;
    }
    if (localObject == null) {
      localObject = localY;
    } else {
      localObject = U((View)localObject);
    }
    if (localObject == null)
    {
      f1();
      return;
    }
    localY = v0;
    long l1;
    if (v.hasStableIds()) {
      l1 = ((b0)localObject).getItemId();
    } else {
      l1 = -1L;
    }
    n = l1;
    localY = v0;
    int i1;
    if (R) {
      i1 = -1;
    } else if (((b0)localObject).isRemoved()) {
      i1 = mOldPosition;
    } else {
      i1 = ((b0)localObject).getAbsoluteAdapterPosition();
    }
    m = i1;
    v0.o = k0(itemView);
  }
  
  static b0 i0(View paramView)
  {
    if (paramView == null) {
      return null;
    }
    return getLayoutParamsb;
  }
  
  static void j0(View paramView, Rect paramRect)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    Rect localRect = c;
    paramRect.set(paramView.getLeft() - left - leftMargin, paramView.getTop() - top - topMargin, paramView.getRight() + right + rightMargin, paramView.getBottom() + bottom + bottomMargin);
  }
  
  private int k0(View paramView)
  {
    int i1 = paramView.getId();
    while ((!paramView.isFocused()) && ((paramView instanceof ViewGroup)) && (paramView.hasFocus()))
    {
      View localView = ((ViewGroup)paramView).getFocusedChild();
      paramView = localView;
      if (localView.getId() != -1)
      {
        i1 = localView.getId();
        paramView = localView;
      }
    }
    return i1;
  }
  
  private String l0(Context paramContext, String paramString)
  {
    if (paramString.charAt(0) == '.')
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append(paramContext.getPackageName());
      localStringBuilder.append(paramString);
      return localStringBuilder.toString();
    }
    if (paramString.contains(".")) {
      return paramString;
    }
    paramContext = new StringBuilder();
    paramContext.append(RecyclerView.class.getPackage().getName());
    paramContext.append('.');
    paramContext.append(paramString);
    return paramContext.toString();
  }
  
  private void m1(Adapter paramAdapter, boolean paramBoolean1, boolean paramBoolean2)
  {
    Adapter localAdapter = v;
    if (localAdapter != null)
    {
      localAdapter.unregisterAdapterDataObserver(k);
      v.onDetachedFromRecyclerView(this);
    }
    if ((!paramBoolean1) || (paramBoolean2)) {
      X0();
    }
    n.y();
    localAdapter = v;
    v = paramAdapter;
    if (paramAdapter != null)
    {
      paramAdapter.registerAdapterDataObserver(k);
      paramAdapter.onAttachedToRecyclerView(this);
    }
    paramAdapter = w;
    if (paramAdapter != null) {
      paramAdapter.Y0(localAdapter, v);
    }
    l.x(localAdapter, v, paramBoolean1);
    v0.g = true;
  }
  
  private void n(b0 paramB01, b0 paramB02, RecyclerView.l.c paramC1, RecyclerView.l.c paramC2, boolean paramBoolean1, boolean paramBoolean2)
  {
    paramB01.setIsRecyclable(false);
    if (paramBoolean1) {
      g(paramB01);
    }
    if (paramB01 != paramB02)
    {
      if (paramBoolean2) {
        g(paramB02);
      }
      mShadowedHolder = paramB02;
      g(paramB01);
      l.J(paramB01);
      paramB02.setIsRecyclable(false);
      mShadowingHolder = paramB01;
    }
    if (d0.b(paramB01, paramB02, paramC1, paramC2)) {
      P0();
    }
  }
  
  private void n0(long paramLong, b0 paramB01, b0 paramB02)
  {
    int i2 = o.g();
    int i1 = 0;
    while (i1 < i2)
    {
      localObject = i0(o.f(i1));
      if ((localObject != paramB01) && (e0((b0)localObject) == paramLong))
      {
        paramB02 = v;
        if ((paramB02 != null) && (paramB02.hasStableIds()))
        {
          paramB02 = new StringBuilder();
          paramB02.append("Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:");
          paramB02.append(localObject);
          paramB02.append(" \n View Holder 2:");
          paramB02.append(paramB01);
          paramB02.append(Q());
          throw new IllegalStateException(paramB02.toString());
        }
        paramB02 = new StringBuilder();
        paramB02.append("Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:");
        paramB02.append(localObject);
        paramB02.append(" \n View Holder 2:");
        paramB02.append(paramB01);
        paramB02.append(Q());
        throw new IllegalStateException(paramB02.toString());
      }
      i1 += 1;
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Problem while matching changed view holders with the newones. The pre-layout information for the change holder ");
    ((StringBuilder)localObject).append(paramB02);
    ((StringBuilder)localObject).append(" cannot be found but it is necessary for ");
    ((StringBuilder)localObject).append(paramB01);
    ((StringBuilder)localObject).append(Q());
    Log.e("RecyclerView", ((StringBuilder)localObject).toString());
  }
  
  private boolean p0()
  {
    int i2 = o.g();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.f(i1));
      if ((localB0 != null) && (!localB0.shouldIgnore()) && (localB0.isUpdated())) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  private void r()
  {
    g1();
    setScrollState(0);
  }
  
  private void r0()
  {
    if (f0.C(this) == 0) {
      f0.B0(this, 8);
    }
  }
  
  static void s(b0 paramB0)
  {
    Object localObject = mNestedRecyclerView;
    if (localObject != null)
    {
      localObject = (View)((WeakReference)localObject).get();
      while (localObject != null)
      {
        if (localObject == itemView) {
          return;
        }
        localObject = ((View)localObject).getParent();
        if ((localObject instanceof View)) {
          localObject = (View)localObject;
        } else {
          localObject = null;
        }
      }
      mNestedRecyclerView = null;
    }
  }
  
  private void s0()
  {
    o = new f(new e());
  }
  
  private void w(Context paramContext, String paramString, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    if (paramString != null)
    {
      paramString = paramString.trim();
      if (!paramString.isEmpty())
      {
        String str = l0(paramContext, paramString);
        try
        {
          if (isInEditMode()) {
            paramString = getClass().getClassLoader();
          } else {
            paramString = paramContext.getClassLoader();
          }
          Class localClass = Class.forName(str, false, paramString).asSubclass(o.class);
          Object localObject = null;
          try
          {
            paramString = localClass.getConstructor(i);
            paramContext = new Object[] { paramContext, paramAttributeSet, Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) };
          }
          catch (NoSuchMethodException paramContext) {}
          try
          {
            paramString = localClass.getConstructor(new Class[0]);
            paramContext = localObject;
            paramString.setAccessible(true);
            setLayoutManager((o)paramString.newInstance(paramContext));
            return;
          }
          catch (NoSuchMethodException paramString)
          {
            paramString.initCause(paramContext);
            paramContext = new StringBuilder();
            paramContext.append(paramAttributeSet.getPositionDescription());
            paramContext.append(": Error creating LayoutManager ");
            paramContext.append(str);
            throw new IllegalStateException(paramContext.toString(), paramString);
          }
          return;
        }
        catch (ClassCastException paramContext)
        {
          paramString = new StringBuilder();
          paramString.append(paramAttributeSet.getPositionDescription());
          paramString.append(": Class is not a LayoutManager ");
          paramString.append(str);
          throw new IllegalStateException(paramString.toString(), paramContext);
        }
        catch (IllegalAccessException paramContext)
        {
          paramString = new StringBuilder();
          paramString.append(paramAttributeSet.getPositionDescription());
          paramString.append(": Cannot access non-public constructor ");
          paramString.append(str);
          throw new IllegalStateException(paramString.toString(), paramContext);
        }
        catch (InstantiationException paramContext)
        {
          paramString = new StringBuilder();
          paramString.append(paramAttributeSet.getPositionDescription());
          paramString.append(": Could not instantiate the LayoutManager: ");
          paramString.append(str);
          throw new IllegalStateException(paramString.toString(), paramContext);
        }
        catch (InvocationTargetException paramContext)
        {
          paramString = new StringBuilder();
          paramString.append(paramAttributeSet.getPositionDescription());
          paramString.append(": Could not instantiate the LayoutManager: ");
          paramString.append(str);
          throw new IllegalStateException(paramString.toString(), paramContext);
        }
        catch (ClassNotFoundException paramContext)
        {
          paramString = new StringBuilder();
          paramString.append(paramAttributeSet.getPositionDescription());
          paramString.append(": Unable to find LayoutManager ");
          paramString.append(str);
          throw new IllegalStateException(paramString.toString(), paramContext);
        }
      }
    }
  }
  
  private boolean x0(View paramView1, View paramView2, int paramInt)
  {
    boolean bool4 = false;
    boolean bool5 = false;
    boolean bool6 = false;
    boolean bool2 = false;
    boolean bool7 = false;
    boolean bool3 = false;
    boolean bool1 = bool7;
    if (paramView2 != null)
    {
      bool1 = bool7;
      if (paramView2 != this)
      {
        if (paramView2 == paramView1) {
          return false;
        }
        if (T(paramView2) == null) {
          return false;
        }
        if (paramView1 == null) {
          return true;
        }
        if (T(paramView1) == null) {
          return true;
        }
        s.set(0, 0, paramView1.getWidth(), paramView1.getHeight());
        t.set(0, 0, paramView2.getWidth(), paramView2.getHeight());
        offsetDescendantRectToMyCoords(paramView1, s);
        offsetDescendantRectToMyCoords(paramView2, t);
        int i1 = w.w0();
        int i2 = -1;
        int i3;
        if (i1 == 1) {
          i3 = -1;
        } else {
          i3 = 1;
        }
        paramView1 = s;
        i1 = left;
        paramView2 = t;
        int i4 = left;
        int i6;
        if (((i1 < i4) || (right <= i4)) && (right < right))
        {
          i1 = 1;
        }
        else
        {
          i5 = right;
          i6 = right;
          if (((i5 > i6) || (i1 >= i6)) && (i1 > i4)) {
            i1 = -1;
          } else {
            i1 = 0;
          }
        }
        i4 = top;
        int i5 = top;
        if (((i4 < i5) || (bottom <= i5)) && (bottom < bottom))
        {
          i2 = 1;
        }
        else
        {
          i6 = bottom;
          int i7 = bottom;
          if (((i6 <= i7) && (i4 < i7)) || (i4 <= i5)) {
            i2 = 0;
          }
        }
        if (paramInt != 1)
        {
          if (paramInt != 2)
          {
            if (paramInt != 17)
            {
              if (paramInt != 33)
              {
                if (paramInt != 66)
                {
                  if (paramInt == 130)
                  {
                    bool1 = bool3;
                    if (i2 > 0) {
                      bool1 = true;
                    }
                    return bool1;
                  }
                  paramView1 = new StringBuilder();
                  paramView1.append("Invalid direction: ");
                  paramView1.append(paramInt);
                  paramView1.append(Q());
                  throw new IllegalArgumentException(paramView1.toString());
                }
                bool1 = bool4;
                if (i1 > 0) {
                  bool1 = true;
                }
                return bool1;
              }
              bool1 = bool5;
              if (i2 < 0) {
                bool1 = true;
              }
              return bool1;
            }
            bool1 = bool6;
            if (i1 < 0) {
              bool1 = true;
            }
            return bool1;
          }
          if (i2 <= 0)
          {
            bool1 = bool2;
            if (i2 == 0)
            {
              bool1 = bool2;
              if (i1 * i3 <= 0) {}
            }
          }
          else
          {
            bool1 = true;
          }
          return bool1;
        }
        if (i2 >= 0)
        {
          bool1 = bool7;
          if (i2 == 0)
          {
            bool1 = bool7;
            if (i1 * i3 >= 0) {}
          }
        }
        else
        {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  private boolean y(int paramInt1, int paramInt2)
  {
    W(E0);
    int[] arrayOfInt = E0;
    boolean bool = false;
    if ((arrayOfInt[0] != paramInt1) || (arrayOfInt[1] != paramInt2)) {
      bool = true;
    }
    return bool;
  }
  
  private void z1()
  {
    s0.f();
    o localO = w;
    if (localO != null) {
      localO.h2();
    }
  }
  
  void A(View paramView)
  {
    Object localObject = i0(paramView);
    I0(paramView);
    Adapter localAdapter = v;
    if ((localAdapter != null) && (localObject != null)) {
      localAdapter.onViewDetachedFromWindow((b0)localObject);
    }
    localObject = Q;
    if (localObject != null)
    {
      int i1 = ((List)localObject).size() - 1;
      while (i1 >= 0)
      {
        ((p)Q.get(i1)).b(paramView);
        i1 -= 1;
      }
    }
  }
  
  void A0()
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      if ((localB0 != null) && (!localB0.shouldIgnore())) {
        localB0.addFlags(6);
      }
      i1 += 1;
    }
    z0();
    l.t();
  }
  
  void A1(int paramInt1, int paramInt2, Object paramObject)
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = o.i(i1);
      b0 localB0 = i0(localView);
      if ((localB0 != null) && (!localB0.shouldIgnore()))
      {
        int i3 = mPosition;
        if ((i3 >= paramInt1) && (i3 < paramInt1 + paramInt2))
        {
          localB0.addFlags(2);
          localB0.addChangePayload(paramObject);
          getLayoutParamsd = true;
        }
      }
      i1 += 1;
    }
    l.M(paramInt1, paramInt2);
  }
  
  void C()
  {
    if (v == null)
    {
      Log.w("RecyclerView", "No adapter attached; skipping layout");
      return;
    }
    if (w == null)
    {
      Log.e("RecyclerView", "No layout manager attached; skipping layout");
      return;
    }
    v0.j = false;
    int i1;
    if ((L0) && ((M0 != getWidth()) || (N0 != getHeight()))) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    M0 = 0;
    N0 = 0;
    L0 = false;
    if (v0.e == 1)
    {
      D();
      w.V1(this);
      E();
    }
    else if ((!n.q()) && (i1 == 0) && (w.H0() == getWidth()) && (w.t0() == getHeight()))
    {
      w.V1(this);
    }
    else
    {
      w.V1(this);
      E();
    }
    F();
  }
  
  public void C0(int paramInt)
  {
    int i2 = o.g();
    int i1 = 0;
    while (i1 < i2)
    {
      o.f(i1).offsetLeftAndRight(paramInt);
      i1 += 1;
    }
  }
  
  public void D0(int paramInt)
  {
    int i2 = o.g();
    int i1 = 0;
    while (i1 < i2)
    {
      o.f(i1).offsetTopAndBottom(paramInt);
      i1 += 1;
    }
  }
  
  void E0(int paramInt1, int paramInt2)
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      if ((localB0 != null) && (!localB0.shouldIgnore()) && (mPosition >= paramInt1))
      {
        localB0.offsetPosition(paramInt2, false);
        v0.g = true;
      }
      i1 += 1;
    }
    l.u(paramInt1, paramInt2);
    requestLayout();
  }
  
  void F0(int paramInt1, int paramInt2)
  {
    int i5 = o.j();
    int i1;
    int i2;
    int i3;
    if (paramInt1 < paramInt2)
    {
      i1 = -1;
      i2 = paramInt1;
      i3 = paramInt2;
    }
    else
    {
      i3 = paramInt1;
      i2 = paramInt2;
      i1 = 1;
    }
    int i4 = 0;
    while (i4 < i5)
    {
      b0 localB0 = i0(o.i(i4));
      if (localB0 != null)
      {
        int i6 = mPosition;
        if ((i6 >= i2) && (i6 <= i3))
        {
          if (i6 == paramInt1) {
            localB0.offsetPosition(paramInt2 - paramInt1, false);
          } else {
            localB0.offsetPosition(i1, false);
          }
          v0.g = true;
        }
      }
      i4 += 1;
    }
    l.v(paramInt1, paramInt2);
    requestLayout();
  }
  
  public boolean G(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2, int paramInt3)
  {
    return getScrollingChildHelper().d(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2, paramInt3);
  }
  
  void G0(int paramInt1, int paramInt2, boolean paramBoolean)
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      if ((localB0 != null) && (!localB0.shouldIgnore()))
      {
        int i3 = mPosition;
        if (i3 >= paramInt1 + paramInt2)
        {
          localB0.offsetPosition(-paramInt2, paramBoolean);
          v0.g = true;
        }
        else if (i3 >= paramInt1)
        {
          localB0.flagRemovedAndOffsetPosition(paramInt1 - 1, -paramInt2, paramBoolean);
          v0.g = true;
        }
      }
      i1 += 1;
    }
    l.w(paramInt1, paramInt2, paramBoolean);
    requestLayout();
  }
  
  public final void H(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt1, int paramInt5, int[] paramArrayOfInt2)
  {
    getScrollingChildHelper().e(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt1, paramInt5, paramArrayOfInt2);
  }
  
  public void H0(View paramView) {}
  
  void I(int paramInt)
  {
    Object localObject = w;
    if (localObject != null) {
      ((o)localObject).y1(paramInt);
    }
    N0(paramInt);
    localObject = w0;
    if (localObject != null) {
      ((s)localObject).a(this, paramInt);
    }
    localObject = x0;
    if (localObject != null)
    {
      int i1 = ((List)localObject).size() - 1;
      while (i1 >= 0)
      {
        ((s)x0.get(i1)).a(this, paramInt);
        i1 -= 1;
      }
    }
  }
  
  public void I0(View paramView) {}
  
  void J(int paramInt1, int paramInt2)
  {
    U += 1;
    int i1 = getScrollX();
    int i2 = getScrollY();
    onScrollChanged(i1, i2, i1 - paramInt1, i2 - paramInt2);
    O0(paramInt1, paramInt2);
    Object localObject = w0;
    if (localObject != null) {
      ((s)localObject).b(this, paramInt1, paramInt2);
    }
    localObject = x0;
    if (localObject != null)
    {
      i1 = ((List)localObject).size() - 1;
      while (i1 >= 0)
      {
        ((s)x0.get(i1)).b(this, paramInt1, paramInt2);
        i1 -= 1;
      }
    }
    U -= 1;
  }
  
  void J0()
  {
    T += 1;
  }
  
  void K()
  {
    int i1 = J0.size() - 1;
    while (i1 >= 0)
    {
      b0 localB0 = (b0)J0.get(i1);
      if ((itemView.getParent() == this) && (!localB0.shouldIgnore()))
      {
        int i2 = mPendingAccessibilityState;
        if (i2 != -1)
        {
          f0.A0(itemView, i2);
          mPendingAccessibilityState = -1;
        }
      }
      i1 -= 1;
    }
    J0.clear();
  }
  
  void K0()
  {
    L0(true);
  }
  
  void L0(boolean paramBoolean)
  {
    int i1 = T - 1;
    T = i1;
    if (i1 < 1)
    {
      T = 0;
      if (paramBoolean)
      {
        B();
        K();
      }
    }
  }
  
  void M()
  {
    if (c0 != null) {
      return;
    }
    EdgeEffect localEdgeEffect = V.a(this, 3);
    c0 = localEdgeEffect;
    if (q)
    {
      localEdgeEffect.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
      return;
    }
    localEdgeEffect.setSize(getMeasuredWidth(), getMeasuredHeight());
  }
  
  void N()
  {
    if (W != null) {
      return;
    }
    EdgeEffect localEdgeEffect = V.a(this, 0);
    W = localEdgeEffect;
    if (q)
    {
      localEdgeEffect.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
      return;
    }
    localEdgeEffect.setSize(getMeasuredHeight(), getMeasuredWidth());
  }
  
  public void N0(int paramInt) {}
  
  void O()
  {
    if (b0 != null) {
      return;
    }
    EdgeEffect localEdgeEffect = V.a(this, 2);
    b0 = localEdgeEffect;
    if (q)
    {
      localEdgeEffect.setSize(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), getMeasuredWidth() - getPaddingLeft() - getPaddingRight());
      return;
    }
    localEdgeEffect.setSize(getMeasuredHeight(), getMeasuredWidth());
  }
  
  public void O0(int paramInt1, int paramInt2) {}
  
  void P()
  {
    if (a0 != null) {
      return;
    }
    EdgeEffect localEdgeEffect = V.a(this, 1);
    a0 = localEdgeEffect;
    if (q)
    {
      localEdgeEffect.setSize(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(), getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
      return;
    }
    localEdgeEffect.setSize(getMeasuredWidth(), getMeasuredHeight());
  }
  
  void P0()
  {
    if ((!B0) && (C))
    {
      f0.h0(this, K0);
      B0 = true;
    }
  }
  
  String Q()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(" ");
    localStringBuilder.append(super.toString());
    localStringBuilder.append(", adapter:");
    localStringBuilder.append(v);
    localStringBuilder.append(", layout:");
    localStringBuilder.append(w);
    localStringBuilder.append(", context:");
    localStringBuilder.append(getContext());
    return localStringBuilder.toString();
  }
  
  final void R(y paramY)
  {
    if (getScrollState() == 2)
    {
      OverScroller localOverScroller = s0.d;
      p = (localOverScroller.getFinalX() - localOverScroller.getCurrX());
      q = (localOverScroller.getFinalY() - localOverScroller.getCurrY());
      return;
    }
    p = 0;
    q = 0;
  }
  
  public View S(float paramFloat1, float paramFloat2)
  {
    int i1 = o.g() - 1;
    while (i1 >= 0)
    {
      View localView = o.f(i1);
      float f1 = localView.getTranslationX();
      float f2 = localView.getTranslationY();
      if ((paramFloat1 >= localView.getLeft() + f1) && (paramFloat1 <= localView.getRight() + f1) && (paramFloat2 >= localView.getTop() + f2) && (paramFloat2 <= localView.getBottom() + f2)) {
        return localView;
      }
      i1 -= 1;
    }
    return null;
  }
  
  void S0(boolean paramBoolean)
  {
    S = (paramBoolean | S);
    R = true;
    A0();
  }
  
  public View T(View paramView)
  {
    ViewParent localViewParent = paramView.getParent();
    View localView = paramView;
    for (paramView = localViewParent; (paramView != null) && (paramView != this) && ((paramView instanceof View)); paramView = localView.getParent()) {
      localView = (View)paramView;
    }
    if (paramView == this) {
      return localView;
    }
    return null;
  }
  
  public b0 U(View paramView)
  {
    paramView = T(paramView);
    if (paramView == null) {
      return null;
    }
    return h0(paramView);
  }
  
  void U0(b0 paramB0, RecyclerView.l.c paramC)
  {
    paramB0.setFlags(0, 8192);
    if ((v0.i) && (paramB0.isUpdated()) && (!paramB0.isRemoved()) && (!paramB0.shouldIgnore()))
    {
      long l1 = e0(paramB0);
      p.c(l1, paramB0);
    }
    p.e(paramB0, paramC);
  }
  
  void X0()
  {
    Object localObject = d0;
    if (localObject != null) {
      ((l)localObject).k();
    }
    localObject = w;
    if (localObject != null)
    {
      ((o)localObject).F1(l);
      w.G1(l);
    }
    l.c();
  }
  
  boolean Y0(View paramView)
  {
    u1();
    boolean bool = o.r(paramView);
    if (bool)
    {
      paramView = i0(paramView);
      l.J(paramView);
      l.C(paramView);
    }
    w1(bool ^ true);
    return bool;
  }
  
  public b0 Z(int paramInt)
  {
    boolean bool = R;
    Object localObject1 = null;
    if (bool) {
      return null;
    }
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      Object localObject2 = localObject1;
      if (localB0 != null)
      {
        localObject2 = localObject1;
        if (!localB0.isRemoved())
        {
          localObject2 = localObject1;
          if (d0(localB0) == paramInt) {
            if (o.n(itemView)) {
              localObject2 = localB0;
            } else {
              return localB0;
            }
          }
        }
      }
      i1 += 1;
      localObject1 = localObject2;
    }
    return localObject1;
  }
  
  public void Z0(n paramN)
  {
    o localO = w;
    if (localO != null) {
      localO.D("Cannot remove item decoration during a scroll  or layout");
    }
    z.remove(paramN);
    if (z.isEmpty())
    {
      boolean bool;
      if (getOverScrollMode() == 2) {
        bool = true;
      } else {
        bool = false;
      }
      setWillNotDraw(bool);
    }
    z0();
    requestLayout();
  }
  
  void a(int paramInt1, int paramInt2)
  {
    if (paramInt1 < 0)
    {
      N();
      if (W.isFinished()) {
        W.onAbsorb(-paramInt1);
      }
    }
    else if (paramInt1 > 0)
    {
      O();
      if (b0.isFinished()) {
        b0.onAbsorb(paramInt1);
      }
    }
    if (paramInt2 < 0)
    {
      P();
      if (a0.isFinished()) {
        a0.onAbsorb(-paramInt2);
      }
    }
    else if (paramInt2 > 0)
    {
      M();
      if (c0.isFinished()) {
        c0.onAbsorb(paramInt2);
      }
    }
    if ((paramInt1 != 0) || (paramInt2 != 0)) {
      f0.g0(this);
    }
  }
  
  public b0 a0(long paramLong)
  {
    Object localObject3 = v;
    Object localObject2 = null;
    Object localObject1 = null;
    if (localObject3 != null)
    {
      if (!((Adapter)localObject3).hasStableIds()) {
        return null;
      }
      int i2 = o.j();
      int i1 = 0;
      for (;;)
      {
        localObject2 = localObject1;
        if (i1 >= i2) {
          break;
        }
        localObject3 = i0(o.i(i1));
        localObject2 = localObject1;
        if (localObject3 != null)
        {
          localObject2 = localObject1;
          if (!((b0)localObject3).isRemoved())
          {
            localObject2 = localObject1;
            if (((b0)localObject3).getItemId() == paramLong) {
              if (o.n(itemView)) {
                localObject2 = localObject3;
              } else {
                return localObject3;
              }
            }
          }
        }
        i1 += 1;
        localObject1 = localObject2;
      }
    }
    return localObject2;
  }
  
  public void a1(p paramP)
  {
    List localList = Q;
    if (localList == null) {
      return;
    }
    localList.remove(paramP);
  }
  
  public void addFocusables(ArrayList<View> paramArrayList, int paramInt1, int paramInt2)
  {
    o localO = w;
    if ((localO == null) || (!localO.Z0(this, paramArrayList, paramInt1, paramInt2))) {
      super.addFocusables(paramArrayList, paramInt1, paramInt2);
    }
  }
  
  b0 b0(int paramInt, boolean paramBoolean)
  {
    int i2 = o.j();
    Object localObject1 = null;
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      Object localObject2 = localObject1;
      if (localB0 != null)
      {
        localObject2 = localObject1;
        if (!localB0.isRemoved())
        {
          if (paramBoolean)
          {
            if (mPosition != paramInt)
            {
              localObject2 = localObject1;
              break label115;
            }
          }
          else if (localB0.getLayoutPosition() != paramInt)
          {
            localObject2 = localObject1;
            break label115;
          }
          if (o.n(itemView)) {
            localObject2 = localB0;
          } else {
            return localB0;
          }
        }
      }
      label115:
      i1 += 1;
      localObject1 = localObject2;
    }
    return localObject1;
  }
  
  public void b1(r paramR)
  {
    A.remove(paramR);
    if (B == paramR) {
      B = null;
    }
  }
  
  public boolean c0(int paramInt1, int paramInt2)
  {
    Object localObject = w;
    int i3 = 0;
    if (localObject == null)
    {
      Log.e("RecyclerView", "Cannot fling without a LayoutManager set. Call setLayoutManager with a non-null argument.");
      return false;
    }
    if (I) {
      return false;
    }
    boolean bool2 = ((o)localObject).H();
    boolean bool3 = w.I();
    int i1;
    if (bool2)
    {
      i1 = paramInt1;
      if (Math.abs(paramInt1) >= n0) {}
    }
    else
    {
      i1 = 0;
    }
    int i2;
    if (bool3)
    {
      i2 = paramInt2;
      if (Math.abs(paramInt2) >= n0) {}
    }
    else
    {
      i2 = 0;
    }
    if ((i1 == 0) && (i2 == 0)) {
      return false;
    }
    float f1 = i1;
    float f2 = i2;
    if (!dispatchNestedPreFling(f1, f2))
    {
      boolean bool1;
      if ((!bool2) && (!bool3)) {
        bool1 = false;
      } else {
        bool1 = true;
      }
      dispatchNestedFling(f1, f2, bool1);
      localObject = m0;
      if ((localObject != null) && (((q)localObject).a(i1, i2))) {
        return true;
      }
      if (bool1)
      {
        paramInt1 = i3;
        if (bool2) {
          paramInt1 = 1;
        }
        paramInt2 = paramInt1;
        if (bool3) {
          paramInt2 = paramInt1 | 0x2;
        }
        v1(paramInt2, 1);
        paramInt1 = o0;
        paramInt1 = Math.max(-paramInt1, Math.min(i1, paramInt1));
        paramInt2 = o0;
        paramInt2 = Math.max(-paramInt2, Math.min(i2, paramInt2));
        s0.b(paramInt1, paramInt2);
        return true;
      }
    }
    return false;
  }
  
  public void c1(s paramS)
  {
    List localList = x0;
    if (localList != null) {
      localList.remove(paramS);
    }
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return ((paramLayoutParams instanceof LayoutParams)) && (w.J((LayoutParams)paramLayoutParams));
  }
  
  public int computeHorizontalScrollExtent()
  {
    o localO = w;
    int i1 = 0;
    if (localO == null) {
      return 0;
    }
    if (localO.H()) {
      i1 = w.N(v0);
    }
    return i1;
  }
  
  public int computeHorizontalScrollOffset()
  {
    o localO = w;
    int i1 = 0;
    if (localO == null) {
      return 0;
    }
    if (localO.H()) {
      i1 = w.O(v0);
    }
    return i1;
  }
  
  public int computeHorizontalScrollRange()
  {
    o localO = w;
    int i1 = 0;
    if (localO == null) {
      return 0;
    }
    if (localO.H()) {
      i1 = w.P(v0);
    }
    return i1;
  }
  
  public int computeVerticalScrollExtent()
  {
    o localO = w;
    int i1 = 0;
    if (localO == null) {
      return 0;
    }
    if (localO.I()) {
      i1 = w.Q(v0);
    }
    return i1;
  }
  
  public int computeVerticalScrollOffset()
  {
    o localO = w;
    int i1 = 0;
    if (localO == null) {
      return 0;
    }
    if (localO.I()) {
      i1 = w.R(v0);
    }
    return i1;
  }
  
  public int computeVerticalScrollRange()
  {
    o localO = w;
    int i1 = 0;
    if (localO == null) {
      return 0;
    }
    if (localO.I()) {
      i1 = w.S(v0);
    }
    return i1;
  }
  
  int d0(b0 paramB0)
  {
    if ((!paramB0.hasAnyOfTheFlags(524)) && (paramB0.isBound())) {
      return n.e(mPosition);
    }
    return -1;
  }
  
  void d1()
  {
    int i2 = o.g();
    int i1 = 0;
    while (i1 < i2)
    {
      View localView = o.f(i1);
      Object localObject = h0(localView);
      if (localObject != null)
      {
        localObject = mShadowingHolder;
        if (localObject != null)
        {
          localObject = itemView;
          int i3 = localView.getLeft();
          int i4 = localView.getTop();
          if ((i3 != ((View)localObject).getLeft()) || (i4 != ((View)localObject).getTop())) {
            ((View)localObject).layout(i3, i4, ((View)localObject).getWidth() + i3, ((View)localObject).getHeight() + i4);
          }
        }
      }
      i1 += 1;
    }
  }
  
  public boolean dispatchNestedFling(float paramFloat1, float paramFloat2, boolean paramBoolean)
  {
    return getScrollingChildHelper().a(paramFloat1, paramFloat2, paramBoolean);
  }
  
  public boolean dispatchNestedPreFling(float paramFloat1, float paramFloat2)
  {
    return getScrollingChildHelper().b(paramFloat1, paramFloat2);
  }
  
  public boolean dispatchNestedPreScroll(int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2)
  {
    return getScrollingChildHelper().c(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2);
  }
  
  public boolean dispatchNestedScroll(int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt)
  {
    return getScrollingChildHelper().f(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
  }
  
  public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    onPopulateAccessibilityEvent(paramAccessibilityEvent);
    return true;
  }
  
  protected void dispatchRestoreInstanceState(SparseArray<Parcelable> paramSparseArray)
  {
    dispatchThawSelfOnly(paramSparseArray);
  }
  
  protected void dispatchSaveInstanceState(SparseArray<Parcelable> paramSparseArray)
  {
    dispatchFreezeSelfOnly(paramSparseArray);
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    int i2 = z.size();
    int i3 = 0;
    int i1 = 0;
    while (i1 < i2)
    {
      ((n)z.get(i1)).onDrawOver(paramCanvas, this, v0);
      i1 += 1;
    }
    EdgeEffect localEdgeEffect = W;
    int i4 = 1;
    int i5;
    if ((localEdgeEffect != null) && (!localEdgeEffect.isFinished()))
    {
      i5 = paramCanvas.save();
      if (q) {
        i1 = getPaddingBottom();
      } else {
        i1 = 0;
      }
      paramCanvas.rotate(270.0F);
      paramCanvas.translate(-getHeight() + i1, 0.0F);
      localEdgeEffect = W;
      if ((localEdgeEffect != null) && (localEdgeEffect.draw(paramCanvas))) {
        i2 = 1;
      } else {
        i2 = 0;
      }
      paramCanvas.restoreToCount(i5);
    }
    else
    {
      i2 = 0;
    }
    localEdgeEffect = a0;
    i1 = i2;
    if (localEdgeEffect != null)
    {
      i1 = i2;
      if (!localEdgeEffect.isFinished())
      {
        i5 = paramCanvas.save();
        if (q) {
          paramCanvas.translate(getPaddingLeft(), getPaddingTop());
        }
        localEdgeEffect = a0;
        if ((localEdgeEffect != null) && (localEdgeEffect.draw(paramCanvas))) {
          i1 = 1;
        } else {
          i1 = 0;
        }
        i1 = i2 | i1;
        paramCanvas.restoreToCount(i5);
      }
    }
    localEdgeEffect = b0;
    i2 = i1;
    if (localEdgeEffect != null)
    {
      i2 = i1;
      if (!localEdgeEffect.isFinished())
      {
        i5 = paramCanvas.save();
        int i6 = getWidth();
        if (q) {
          i2 = getPaddingTop();
        } else {
          i2 = 0;
        }
        paramCanvas.rotate(90.0F);
        paramCanvas.translate(i2, -i6);
        localEdgeEffect = b0;
        if ((localEdgeEffect != null) && (localEdgeEffect.draw(paramCanvas))) {
          i2 = 1;
        } else {
          i2 = 0;
        }
        i2 = i1 | i2;
        paramCanvas.restoreToCount(i5);
      }
    }
    localEdgeEffect = c0;
    i1 = i2;
    if (localEdgeEffect != null)
    {
      i1 = i2;
      if (!localEdgeEffect.isFinished())
      {
        i5 = paramCanvas.save();
        paramCanvas.rotate(180.0F);
        if (q) {
          paramCanvas.translate(-getWidth() + getPaddingRight(), -getHeight() + getPaddingBottom());
        } else {
          paramCanvas.translate(-getWidth(), -getHeight());
        }
        localEdgeEffect = c0;
        i1 = i3;
        if (localEdgeEffect != null)
        {
          i1 = i3;
          if (localEdgeEffect.draw(paramCanvas)) {
            i1 = 1;
          }
        }
        i1 = i2 | i1;
        paramCanvas.restoreToCount(i5);
      }
    }
    if ((i1 == 0) && (d0 != null) && (z.size() > 0) && (d0.p())) {
      i1 = i4;
    }
    if (i1 != 0) {
      f0.g0(this);
    }
  }
  
  public boolean drawChild(Canvas paramCanvas, View paramView, long paramLong)
  {
    return super.drawChild(paramCanvas, paramView, paramLong);
  }
  
  long e0(b0 paramB0)
  {
    if (v.hasStableIds()) {
      return paramB0.getItemId();
    }
    return mPosition;
  }
  
  public int f0(View paramView)
  {
    paramView = i0(paramView);
    if (paramView != null) {
      return paramView.getAbsoluteAdapterPosition();
    }
    return -1;
  }
  
  public View focusSearch(View paramView, int paramInt)
  {
    Object localObject = w.k1(paramView, paramInt);
    if (localObject != null) {
      return localObject;
    }
    localObject = v;
    int i4 = 1;
    int i1;
    if ((localObject != null) && (w != null) && (!w0()) && (!I)) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    localObject = FocusFinder.getInstance();
    if ((i1 != 0) && ((paramInt == 2) || (paramInt == 1)))
    {
      if (w.I())
      {
        if (paramInt == 2) {
          i2 = 130;
        } else {
          i2 = 33;
        }
        if (((FocusFinder)localObject).findNextFocus(this, paramView, i2) == null) {
          i3 = 1;
        } else {
          i3 = 0;
        }
        i1 = i3;
        if (g)
        {
          paramInt = i2;
          i1 = i3;
        }
      }
      else
      {
        i1 = 0;
      }
      int i3 = i1;
      int i2 = paramInt;
      if (i1 == 0)
      {
        i3 = i1;
        i2 = paramInt;
        if (w.H())
        {
          if (w.w0() == 1) {
            i1 = 1;
          } else {
            i1 = 0;
          }
          if (paramInt == 2) {
            i2 = 1;
          } else {
            i2 = 0;
          }
          if ((i1 ^ i2) != 0) {
            i1 = 66;
          } else {
            i1 = 17;
          }
          if (((FocusFinder)localObject).findNextFocus(this, paramView, i1) == null) {
            i2 = i4;
          } else {
            i2 = 0;
          }
          if (g) {
            paramInt = i1;
          }
          i3 = i2;
          i2 = paramInt;
        }
      }
      if (i3 != 0)
      {
        v();
        if (T(paramView) == null) {
          return null;
        }
        u1();
        w.d1(paramView, i2, l, v0);
        w1(false);
      }
      localObject = ((FocusFinder)localObject).findNextFocus(this, paramView, i2);
      paramInt = i2;
    }
    else
    {
      localObject = ((FocusFinder)localObject).findNextFocus(this, paramView, paramInt);
      if ((localObject == null) && (i1 != 0))
      {
        v();
        if (T(paramView) == null) {
          return null;
        }
        u1();
        localObject = w.d1(paramView, paramInt, l, v0);
        w1(false);
      }
    }
    if ((localObject != null) && (!((View)localObject).hasFocusable()))
    {
      if (getFocusedChild() == null) {
        return super.focusSearch(paramView, paramInt);
      }
      e1((View)localObject, null);
      return paramView;
    }
    if (x0(paramView, (View)localObject, paramInt)) {
      return localObject;
    }
    return super.focusSearch(paramView, paramInt);
  }
  
  public int g0(View paramView)
  {
    paramView = i0(paramView);
    if (paramView != null) {
      return paramView.getLayoutPosition();
    }
    return -1;
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    Object localObject = w;
    if (localObject != null) {
      return ((o)localObject).a0();
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("RecyclerView has no LayoutManager");
    ((StringBuilder)localObject).append(Q());
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    o localO = w;
    if (localO != null) {
      return localO.b0(getContext(), paramAttributeSet);
    }
    paramAttributeSet = new StringBuilder();
    paramAttributeSet.append("RecyclerView has no LayoutManager");
    paramAttributeSet.append(Q());
    throw new IllegalStateException(paramAttributeSet.toString());
  }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    o localO = w;
    if (localO != null) {
      return localO.c0(paramLayoutParams);
    }
    paramLayoutParams = new StringBuilder();
    paramLayoutParams.append("RecyclerView has no LayoutManager");
    paramLayoutParams.append(Q());
    throw new IllegalStateException(paramLayoutParams.toString());
  }
  
  public CharSequence getAccessibilityClassName()
  {
    return "androidx.recyclerview.widget.RecyclerView";
  }
  
  public Adapter getAdapter()
  {
    return v;
  }
  
  public int getBaseline()
  {
    o localO = w;
    if (localO != null) {
      return localO.d0();
    }
    return super.getBaseline();
  }
  
  protected int getChildDrawingOrder(int paramInt1, int paramInt2)
  {
    j localJ = D0;
    if (localJ == null) {
      return super.getChildDrawingOrder(paramInt1, paramInt2);
    }
    return localJ.a(paramInt1, paramInt2);
  }
  
  public boolean getClipToPadding()
  {
    return q;
  }
  
  public u getCompatAccessibilityDelegate()
  {
    return C0;
  }
  
  public k getEdgeEffectFactory()
  {
    return V;
  }
  
  public l getItemAnimator()
  {
    return d0;
  }
  
  public int getItemDecorationCount()
  {
    return z.size();
  }
  
  public o getLayoutManager()
  {
    return w;
  }
  
  public int getMaxFlingVelocity()
  {
    return o0;
  }
  
  public int getMinFlingVelocity()
  {
    return n0;
  }
  
  long getNanoTime()
  {
    if (f) {
      return System.nanoTime();
    }
    return 0L;
  }
  
  public q getOnFlingListener()
  {
    return m0;
  }
  
  public boolean getPreserveFocusAfterLayout()
  {
    return r0;
  }
  
  public t getRecycledViewPool()
  {
    return l.i();
  }
  
  public int getScrollState()
  {
    return e0;
  }
  
  public void h(n paramN)
  {
    i(paramN, -1);
  }
  
  public b0 h0(View paramView)
  {
    Object localObject = paramView.getParent();
    if ((localObject != null) && (localObject != this))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("View ");
      ((StringBuilder)localObject).append(paramView);
      ((StringBuilder)localObject).append(" is not a direct child of ");
      ((StringBuilder)localObject).append(this);
      throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    }
    return i0(paramView);
  }
  
  public boolean hasNestedScrollingParent()
  {
    return getScrollingChildHelper().j();
  }
  
  public void i(n paramN, int paramInt)
  {
    o localO = w;
    if (localO != null) {
      localO.D("Cannot add item decoration during a scroll  or layout");
    }
    if (z.isEmpty()) {
      setWillNotDraw(false);
    }
    if (paramInt < 0) {
      z.add(paramN);
    } else {
      z.add(paramInt, paramN);
    }
    z0();
    requestLayout();
  }
  
  void i1()
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      if (!localB0.shouldIgnore()) {
        localB0.saveOldPosition();
      }
      i1 += 1;
    }
  }
  
  public boolean isAttachedToWindow()
  {
    return C;
  }
  
  public final boolean isLayoutSuppressed()
  {
    return I;
  }
  
  public boolean isNestedScrollingEnabled()
  {
    return getScrollingChildHelper().l();
  }
  
  public void j(p paramP)
  {
    if (Q == null) {
      Q = new ArrayList();
    }
    Q.add(paramP);
  }
  
  boolean j1(int paramInt1, int paramInt2, MotionEvent paramMotionEvent, int paramInt3)
  {
    v();
    Object localObject = v;
    boolean bool2 = true;
    int i3;
    int i4;
    int i1;
    int i2;
    if (localObject != null)
    {
      localObject = I0;
      localObject[0] = 0;
      localObject[1] = 0;
      k1(paramInt1, paramInt2, (int[])localObject);
      localObject = I0;
      i3 = localObject[0];
      i4 = localObject[1];
      i1 = i4;
      i2 = i3;
      i3 = paramInt1 - i3;
      i4 = paramInt2 - i4;
    }
    else
    {
      i5 = 0;
      i1 = i5;
      i2 = i1;
      i4 = i2;
      i3 = i2;
      i2 = i1;
      i1 = i5;
    }
    if (!z.isEmpty()) {
      invalidate();
    }
    localObject = I0;
    localObject[0] = 0;
    localObject[1] = 0;
    H(i2, i1, i3, i4, G0, paramInt3, (int[])localObject);
    localObject = I0;
    int i5 = localObject[0];
    int i6 = localObject[1];
    if ((localObject[0] == 0) && (localObject[1] == 0)) {
      paramInt3 = 0;
    } else {
      paramInt3 = 1;
    }
    int i7 = j0;
    localObject = G0;
    j0 = (i7 - localObject[0]);
    k0 -= localObject[1];
    int[] arrayOfInt = H0;
    arrayOfInt[0] += localObject[0];
    arrayOfInt[1] += localObject[1];
    if (getOverScrollMode() != 2)
    {
      if ((paramMotionEvent != null) && (!s.a(paramMotionEvent, 8194))) {
        T0(paramMotionEvent.getX(), i3 - i5, paramMotionEvent.getY(), i4 - i6);
      }
      u(paramInt1, paramInt2);
    }
    if ((i2 != 0) || (i1 != 0)) {
      J(i2, i1);
    }
    if (!awakenScrollBars()) {
      invalidate();
    }
    boolean bool1 = bool2;
    if (paramInt3 == 0)
    {
      bool1 = bool2;
      if (i2 == 0)
      {
        if (i1 != 0) {
          return true;
        }
        bool1 = false;
      }
    }
    return bool1;
  }
  
  public void k(r paramR)
  {
    A.add(paramR);
  }
  
  void k1(int paramInt1, int paramInt2, int[] paramArrayOfInt)
  {
    u1();
    J0();
    m.a("RV Scroll");
    R(v0);
    if (paramInt1 != 0) {
      paramInt1 = w.R1(paramInt1, l, v0);
    } else {
      paramInt1 = 0;
    }
    if (paramInt2 != 0) {
      paramInt2 = w.T1(paramInt2, l, v0);
    } else {
      paramInt2 = 0;
    }
    m.b();
    d1();
    K0();
    w1(false);
    if (paramArrayOfInt != null)
    {
      paramArrayOfInt[0] = paramInt1;
      paramArrayOfInt[1] = paramInt2;
    }
  }
  
  public void l(s paramS)
  {
    if (x0 == null) {
      x0 = new ArrayList();
    }
    x0.add(paramS);
  }
  
  public void l1(int paramInt)
  {
    if (I) {
      return;
    }
    y1();
    o localO = w;
    if (localO == null)
    {
      Log.e("RecyclerView", "Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
      return;
    }
    localO.S1(paramInt);
    awakenScrollBars();
  }
  
  void m(b0 paramB0, RecyclerView.l.c paramC1, RecyclerView.l.c paramC2)
  {
    paramB0.setIsRecyclable(false);
    if (d0.a(paramB0, paramC1, paramC2)) {
      P0();
    }
  }
  
  Rect m0(View paramView)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    if (!d) {
      return c;
    }
    if ((v0.e()) && ((localLayoutParams.b()) || (localLayoutParams.d()))) {
      return c;
    }
    Rect localRect1 = c;
    localRect1.set(0, 0, 0, 0);
    int i2 = z.size();
    int i1 = 0;
    while (i1 < i2)
    {
      s.set(0, 0, 0, 0);
      ((n)z.get(i1)).getItemOffsets(s, paramView, this, v0);
      int i3 = left;
      Rect localRect2 = s;
      left = (i3 + left);
      top += top;
      right += right;
      bottom += bottom;
      i1 += 1;
    }
    d = false;
    return localRect1;
  }
  
  boolean n1(b0 paramB0, int paramInt)
  {
    if (w0())
    {
      mPendingAccessibilityState = paramInt;
      J0.add(paramB0);
      return false;
    }
    f0.A0(itemView, paramInt);
    return true;
  }
  
  void o(b0 paramB0, RecyclerView.l.c paramC1, RecyclerView.l.c paramC2)
  {
    g(paramB0);
    paramB0.setIsRecyclable(false);
    if (d0.c(paramB0, paramC1, paramC2)) {
      P0();
    }
  }
  
  public boolean o0()
  {
    return (!F) || (R) || (n.p());
  }
  
  boolean o1(AccessibilityEvent paramAccessibilityEvent)
  {
    boolean bool = w0();
    int i2 = 0;
    if (bool)
    {
      int i1;
      if (paramAccessibilityEvent != null) {
        i1 = c.h.q.p0.b.a(paramAccessibilityEvent);
      } else {
        i1 = 0;
      }
      if (i1 == 0) {
        i1 = i2;
      }
      K |= i1;
      return true;
    }
    return false;
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    T = 0;
    boolean bool = true;
    C = true;
    if ((!F) || (isLayoutRequested())) {
      bool = false;
    }
    F = bool;
    Object localObject1 = w;
    if (localObject1 != null) {
      ((o)localObject1).W(this);
    }
    B0 = false;
    if (f)
    {
      localObject1 = j.b;
      Object localObject2 = (j)((ThreadLocal)localObject1).get();
      t0 = ((j)localObject2);
      if (localObject2 == null)
      {
        t0 = new j();
        localObject2 = f0.w(this);
        float f2 = 60.0F;
        float f1 = f2;
        if (!isInEditMode())
        {
          f1 = f2;
          if (localObject2 != null)
          {
            float f3 = ((Display)localObject2).getRefreshRate();
            f1 = f2;
            if (f3 >= 30.0F) {
              f1 = f3;
            }
          }
        }
        localObject2 = t0;
        f = ((1.0E9F / f1));
        ((ThreadLocal)localObject1).set(localObject2);
      }
      t0.a(this);
    }
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    Object localObject = d0;
    if (localObject != null) {
      ((l)localObject).k();
    }
    y1();
    C = false;
    localObject = w;
    if (localObject != null) {
      ((o)localObject).X(this, l);
    }
    J0.clear();
    removeCallbacks(K0);
    p.j();
    if (f)
    {
      localObject = t0;
      if (localObject != null)
      {
        ((j)localObject).j(this);
        t0 = null;
      }
    }
  }
  
  public void onDraw(Canvas paramCanvas)
  {
    super.onDraw(paramCanvas);
    int i2 = z.size();
    int i1 = 0;
    while (i1 < i2)
    {
      ((n)z.get(i1)).onDraw(paramCanvas, this, v0);
      i1 += 1;
    }
  }
  
  public boolean onGenericMotionEvent(MotionEvent paramMotionEvent)
  {
    if (w == null) {
      return false;
    }
    if (I) {
      return false;
    }
    if (paramMotionEvent.getAction() == 8)
    {
      float f1;
      float f2;
      if ((paramMotionEvent.getSource() & 0x2) != 0)
      {
        if (w.I()) {
          f1 = -paramMotionEvent.getAxisValue(9);
        } else {
          f1 = 0.0F;
        }
        f2 = f1;
        if (w.H())
        {
          f2 = paramMotionEvent.getAxisValue(10);
          break label145;
        }
      }
      for (;;)
      {
        float f3 = 0.0F;
        f1 = f2;
        f2 = f3;
        break label145;
        if ((paramMotionEvent.getSource() & 0x400000) == 0) {
          break label141;
        }
        f2 = paramMotionEvent.getAxisValue(26);
        if (!w.I()) {
          break;
        }
        f2 = -f2;
      }
      if (w.H())
      {
        f1 = 0.0F;
      }
      else
      {
        label141:
        f1 = 0.0F;
        f2 = f1;
      }
      label145:
      if ((f1 != 0.0F) || (f2 != 0.0F)) {
        B0((int)(f2 * p0), (int)(f1 * q0), paramMotionEvent, 1);
      }
    }
    return false;
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    m.a("RV OnLayout");
    C();
    m.b();
    F = true;
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    Object localObject = w;
    if (localObject == null)
    {
      x(paramInt1, paramInt2);
      return;
    }
    boolean bool1 = ((o)localObject).L0();
    boolean bool2 = false;
    if (bool1)
    {
      int i1 = View.MeasureSpec.getMode(paramInt1);
      int i2 = View.MeasureSpec.getMode(paramInt2);
      w.t1(l, v0, paramInt1, paramInt2);
      bool1 = bool2;
      if (i1 == 1073741824)
      {
        bool1 = bool2;
        if (i2 == 1073741824) {
          bool1 = true;
        }
      }
      L0 = bool1;
      if (!bool1)
      {
        if (v == null) {
          return;
        }
        if (v0.e == 1) {
          D();
        }
        w.X1(paramInt1, paramInt2);
        v0.j = true;
        E();
        w.a2(paramInt1, paramInt2);
        if (w.d2())
        {
          w.X1(View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 1073741824));
          v0.j = true;
          E();
          w.a2(paramInt1, paramInt2);
        }
        M0 = getMeasuredWidth();
        N0 = getMeasuredHeight();
        return;
      }
      return;
    }
    if (D)
    {
      w.t1(l, v0, paramInt1, paramInt2);
      return;
    }
    if (L)
    {
      u1();
      J0();
      R0();
      K0();
      localObject = v0;
      if (l)
      {
        h = true;
      }
      else
      {
        n.j();
        v0.h = false;
      }
      L = false;
      w1(false);
    }
    else if (v0.l)
    {
      setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight());
      return;
    }
    localObject = v;
    if (localObject != null) {
      v0.f = ((Adapter)localObject).getItemCount();
    } else {
      v0.f = 0;
    }
    u1();
    w.t1(l, v0, paramInt1, paramInt2);
    w1(false);
    v0.h = false;
  }
  
  protected boolean onRequestFocusInDescendants(int paramInt, Rect paramRect)
  {
    if (w0()) {
      return false;
    }
    return super.onRequestFocusInDescendants(paramInt, paramRect);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof SavedState))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (SavedState)paramParcelable;
    m = paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    requestLayout();
  }
  
  protected Parcelable onSaveInstanceState()
  {
    SavedState localSavedState = new SavedState(super.onSaveInstanceState());
    Object localObject = m;
    if (localObject != null)
    {
      localSavedState.b((SavedState)localObject);
      return localSavedState;
    }
    localObject = w;
    if (localObject != null)
    {
      d = ((o)localObject).x1();
      return localSavedState;
    }
    d = null;
    return localSavedState;
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if ((paramInt1 != paramInt3) || (paramInt2 != paramInt4)) {
      u0();
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  void p(String paramString)
  {
    if (w0())
    {
      if (paramString == null)
      {
        paramString = new StringBuilder();
        paramString.append("Cannot call this method while RecyclerView is computing a layout or scrolling");
        paramString.append(Q());
        throw new IllegalStateException(paramString.toString());
      }
      throw new IllegalStateException(paramString);
    }
    if (U > 0)
    {
      paramString = new StringBuilder();
      paramString.append("");
      paramString.append(Q());
      Log.w("RecyclerView", "Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", new IllegalStateException(paramString.toString()));
    }
  }
  
  public void p1(int paramInt1, int paramInt2)
  {
    q1(paramInt1, paramInt2, null);
  }
  
  boolean q(b0 paramB0)
  {
    l localL = d0;
    return (localL == null) || (localL.g(paramB0, paramB0.getUnmodifiedPayloads()));
  }
  
  void q0()
  {
    n = new a(new f());
  }
  
  public void q1(int paramInt1, int paramInt2, Interpolator paramInterpolator)
  {
    r1(paramInt1, paramInt2, paramInterpolator, Integer.MIN_VALUE);
  }
  
  public void r1(int paramInt1, int paramInt2, Interpolator paramInterpolator, int paramInt3)
  {
    s1(paramInt1, paramInt2, paramInterpolator, paramInt3, false);
  }
  
  protected void removeDetachedView(View paramView, boolean paramBoolean)
  {
    b0 localB0 = i0(paramView);
    if (localB0 != null) {
      if (localB0.isTmpDetached())
      {
        localB0.clearTmpDetachFlag();
      }
      else if (!localB0.shouldIgnore())
      {
        paramView = new StringBuilder();
        paramView.append("Called removeDetachedView with a view which is not flagged as tmp detached.");
        paramView.append(localB0);
        paramView.append(Q());
        throw new IllegalArgumentException(paramView.toString());
      }
    }
    paramView.clearAnimation();
    A(paramView);
    super.removeDetachedView(paramView, paramBoolean);
  }
  
  public void requestChildFocus(View paramView1, View paramView2)
  {
    if ((!w.v1(this, v0, paramView1, paramView2)) && (paramView2 != null)) {
      e1(paramView1, paramView2);
    }
    super.requestChildFocus(paramView1, paramView2);
  }
  
  public boolean requestChildRectangleOnScreen(View paramView, Rect paramRect, boolean paramBoolean)
  {
    return w.M1(this, paramView, paramRect, paramBoolean);
  }
  
  public void requestDisallowInterceptTouchEvent(boolean paramBoolean)
  {
    int i2 = A.size();
    int i1 = 0;
    while (i1 < i2)
    {
      ((r)A.get(i1)).e(paramBoolean);
      i1 += 1;
    }
    super.requestDisallowInterceptTouchEvent(paramBoolean);
  }
  
  public void requestLayout()
  {
    if ((G == 0) && (!I))
    {
      super.requestLayout();
      return;
    }
    H = true;
  }
  
  void s1(int paramInt1, int paramInt2, Interpolator paramInterpolator, int paramInt3, boolean paramBoolean)
  {
    o localO = w;
    if (localO == null)
    {
      Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
      return;
    }
    if (I) {
      return;
    }
    boolean bool = localO.H();
    int i2 = 0;
    int i1 = paramInt1;
    if (!bool) {
      i1 = 0;
    }
    if (!w.I()) {
      paramInt2 = 0;
    }
    if ((i1 != 0) || (paramInt2 != 0))
    {
      if ((paramInt3 != Integer.MIN_VALUE) && (paramInt3 <= 0)) {
        paramInt1 = 0;
      } else {
        paramInt1 = 1;
      }
      if (paramInt1 != 0)
      {
        if (paramBoolean)
        {
          paramInt1 = i2;
          if (i1 != 0) {
            paramInt1 = 1;
          }
          i2 = paramInt1;
          if (paramInt2 != 0) {
            i2 = paramInt1 | 0x2;
          }
          v1(i2, 1);
        }
        s0.e(i1, paramInt2, paramInt3, paramInterpolator);
        return;
      }
      scrollBy(i1, paramInt2);
    }
  }
  
  public void scrollBy(int paramInt1, int paramInt2)
  {
    o localO = w;
    if (localO == null)
    {
      Log.e("RecyclerView", "Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
      return;
    }
    if (I) {
      return;
    }
    boolean bool1 = localO.H();
    boolean bool2 = w.I();
    if ((bool1) || (bool2))
    {
      if (!bool1) {
        paramInt1 = 0;
      }
      if (!bool2) {
        paramInt2 = 0;
      }
      j1(paramInt1, paramInt2, null, 0);
    }
  }
  
  public void scrollTo(int paramInt1, int paramInt2)
  {
    Log.w("RecyclerView", "RecyclerView does not support scrolling to an absolute position. Use scrollToPosition instead");
  }
  
  public void sendAccessibilityEventUnchecked(AccessibilityEvent paramAccessibilityEvent)
  {
    if (o1(paramAccessibilityEvent)) {
      return;
    }
    super.sendAccessibilityEventUnchecked(paramAccessibilityEvent);
  }
  
  public void setAccessibilityDelegateCompat(u paramU)
  {
    C0 = paramU;
    f0.p0(this, paramU);
  }
  
  public void setAdapter(Adapter paramAdapter)
  {
    setLayoutFrozen(false);
    m1(paramAdapter, false, true);
    S0(false);
    requestLayout();
  }
  
  public void setChildDrawingOrderCallback(j paramJ)
  {
    if (paramJ == D0) {
      return;
    }
    D0 = paramJ;
    boolean bool;
    if (paramJ != null) {
      bool = true;
    } else {
      bool = false;
    }
    setChildrenDrawingOrderEnabled(bool);
  }
  
  public void setClipToPadding(boolean paramBoolean)
  {
    if (paramBoolean != q) {
      u0();
    }
    q = paramBoolean;
    super.setClipToPadding(paramBoolean);
    if (F) {
      requestLayout();
    }
  }
  
  public void setEdgeEffectFactory(k paramK)
  {
    h.g(paramK);
    V = paramK;
    u0();
  }
  
  public void setHasFixedSize(boolean paramBoolean)
  {
    D = paramBoolean;
  }
  
  public void setItemAnimator(l paramL)
  {
    l localL = d0;
    if (localL != null)
    {
      localL.k();
      d0.w(null);
    }
    d0 = paramL;
    if (paramL != null) {
      paramL.w(A0);
    }
  }
  
  public void setItemViewCacheSize(int paramInt)
  {
    l.G(paramInt);
  }
  
  @Deprecated
  public void setLayoutFrozen(boolean paramBoolean)
  {
    suppressLayout(paramBoolean);
  }
  
  public void setLayoutManager(o paramO)
  {
    if (paramO == w) {
      return;
    }
    y1();
    Object localObject;
    if (w != null)
    {
      localObject = d0;
      if (localObject != null) {
        ((l)localObject).k();
      }
      w.F1(l);
      w.G1(l);
      l.c();
      if (C) {
        w.X(this, l);
      }
      w.b2(null);
      w = null;
    }
    else
    {
      l.c();
    }
    o.o();
    w = paramO;
    if (paramO != null) {
      if (b == null)
      {
        paramO.b2(this);
        if (C) {
          w.W(this);
        }
      }
      else
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("LayoutManager ");
        ((StringBuilder)localObject).append(paramO);
        ((StringBuilder)localObject).append(" is already attached to a RecyclerView:");
        ((StringBuilder)localObject).append(b.Q());
        throw new IllegalArgumentException(((StringBuilder)localObject).toString());
      }
    }
    l.K();
    requestLayout();
  }
  
  @Deprecated
  public void setLayoutTransition(LayoutTransition paramLayoutTransition)
  {
    if (Build.VERSION.SDK_INT < 18)
    {
      if (paramLayoutTransition == null)
      {
        suppressLayout(false);
        return;
      }
      if ((paramLayoutTransition.getAnimator(0) == null) && (paramLayoutTransition.getAnimator(1) == null) && (paramLayoutTransition.getAnimator(2) == null) && (paramLayoutTransition.getAnimator(3) == null) && (paramLayoutTransition.getAnimator(4) == null))
      {
        suppressLayout(true);
        return;
      }
    }
    if (paramLayoutTransition == null)
    {
      super.setLayoutTransition(null);
      return;
    }
    throw new IllegalArgumentException("Providing a LayoutTransition into RecyclerView is not supported. Please use setItemAnimator() instead for animating changes to the items in this RecyclerView");
  }
  
  public void setNestedScrollingEnabled(boolean paramBoolean)
  {
    getScrollingChildHelper().m(paramBoolean);
  }
  
  public void setOnFlingListener(q paramQ)
  {
    m0 = paramQ;
  }
  
  @Deprecated
  public void setOnScrollListener(s paramS)
  {
    w0 = paramS;
  }
  
  public void setPreserveFocusAfterLayout(boolean paramBoolean)
  {
    r0 = paramBoolean;
  }
  
  public void setRecycledViewPool(t paramT)
  {
    l.E(paramT);
  }
  
  @Deprecated
  public void setRecyclerListener(v paramV)
  {
    x = paramV;
  }
  
  void setScrollState(int paramInt)
  {
    if (paramInt == e0) {
      return;
    }
    e0 = paramInt;
    if (paramInt != 2) {
      z1();
    }
    I(paramInt);
  }
  
  public void setScrollingTouchSlop(int paramInt)
  {
    ViewConfiguration localViewConfiguration = ViewConfiguration.get(getContext());
    if (paramInt != 0) {
      if (paramInt != 1)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("setScrollingTouchSlop(): bad argument constant ");
        localStringBuilder.append(paramInt);
        localStringBuilder.append("; using default value");
        Log.w("RecyclerView", localStringBuilder.toString());
      }
      else
      {
        l0 = localViewConfiguration.getScaledPagingTouchSlop();
        return;
      }
    }
    l0 = localViewConfiguration.getScaledTouchSlop();
  }
  
  public void setViewCacheExtension(z paramZ)
  {
    l.F(paramZ);
  }
  
  public boolean startNestedScroll(int paramInt)
  {
    return getScrollingChildHelper().o(paramInt);
  }
  
  public void stopNestedScroll()
  {
    getScrollingChildHelper().q();
  }
  
  public final void suppressLayout(boolean paramBoolean)
  {
    if (paramBoolean != I)
    {
      p("Do not suppressLayout in layout or scroll");
      if (!paramBoolean)
      {
        I = false;
        if ((H) && (w != null) && (v != null)) {
          requestLayout();
        }
        H = false;
        return;
      }
      long l1 = SystemClock.uptimeMillis();
      onTouchEvent(MotionEvent.obtain(l1, l1, 3, 0.0F, 0.0F, 0));
      I = true;
      J = true;
      y1();
    }
  }
  
  void t()
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      b0 localB0 = i0(o.i(i1));
      if (!localB0.shouldIgnore()) {
        localB0.clearOldPosition();
      }
      i1 += 1;
    }
    l.d();
  }
  
  void t0(StateListDrawable paramStateListDrawable1, Drawable paramDrawable1, StateListDrawable paramStateListDrawable2, Drawable paramDrawable2)
  {
    if ((paramStateListDrawable1 != null) && (paramDrawable1 != null) && (paramStateListDrawable2 != null) && (paramDrawable2 != null))
    {
      Resources localResources = getContext().getResources();
      new i(this, paramStateListDrawable1, paramDrawable1, paramStateListDrawable2, paramDrawable2, localResources.getDimensionPixelSize(c.s.b.a), localResources.getDimensionPixelSize(c.s.b.c), localResources.getDimensionPixelOffset(c.s.b.b));
      return;
    }
    paramStateListDrawable1 = new StringBuilder();
    paramStateListDrawable1.append("Trying to set fast scroller without both required drawables.");
    paramStateListDrawable1.append(Q());
    throw new IllegalArgumentException(paramStateListDrawable1.toString());
  }
  
  public void t1(int paramInt)
  {
    if (I) {
      return;
    }
    o localO = w;
    if (localO == null)
    {
      Log.e("RecyclerView", "Cannot smooth scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
      return;
    }
    localO.f2(this, v0, paramInt);
  }
  
  void u(int paramInt1, int paramInt2)
  {
    EdgeEffect localEdgeEffect = W;
    if ((localEdgeEffect != null) && (!localEdgeEffect.isFinished()) && (paramInt1 > 0))
    {
      W.onRelease();
      bool2 = W.isFinished();
    }
    else
    {
      bool2 = false;
    }
    localEdgeEffect = b0;
    boolean bool1 = bool2;
    if (localEdgeEffect != null)
    {
      bool1 = bool2;
      if (!localEdgeEffect.isFinished())
      {
        bool1 = bool2;
        if (paramInt1 < 0)
        {
          b0.onRelease();
          bool1 = bool2 | b0.isFinished();
        }
      }
    }
    localEdgeEffect = a0;
    boolean bool2 = bool1;
    if (localEdgeEffect != null)
    {
      bool2 = bool1;
      if (!localEdgeEffect.isFinished())
      {
        bool2 = bool1;
        if (paramInt2 > 0)
        {
          a0.onRelease();
          bool2 = bool1 | a0.isFinished();
        }
      }
    }
    localEdgeEffect = c0;
    bool1 = bool2;
    if (localEdgeEffect != null)
    {
      bool1 = bool2;
      if (!localEdgeEffect.isFinished())
      {
        bool1 = bool2;
        if (paramInt2 < 0)
        {
          c0.onRelease();
          bool1 = bool2 | c0.isFinished();
        }
      }
    }
    if (bool1) {
      f0.g0(this);
    }
  }
  
  void u0()
  {
    c0 = null;
    a0 = null;
    b0 = null;
    W = null;
  }
  
  void u1()
  {
    int i1 = G + 1;
    G = i1;
    if ((i1 == 1) && (!I)) {
      H = false;
    }
  }
  
  void v()
  {
    if ((F) && (!R))
    {
      if (!n.p()) {
        return;
      }
      if ((n.o(4)) && (!n.o(11)))
      {
        m.a("RV PartialInvalidate");
        u1();
        J0();
        n.w();
        if (!H) {
          if (p0()) {
            C();
          } else {
            n.i();
          }
        }
        w1(true);
        K0();
        m.b();
        return;
      }
      if (n.p())
      {
        m.a("RV FullInvalidate");
        C();
        m.b();
      }
      return;
    }
    m.a("RV FullInvalidate");
    C();
    m.b();
  }
  
  boolean v0()
  {
    AccessibilityManager localAccessibilityManager = P;
    return (localAccessibilityManager != null) && (localAccessibilityManager.isEnabled());
  }
  
  public boolean v1(int paramInt1, int paramInt2)
  {
    return getScrollingChildHelper().p(paramInt1, paramInt2);
  }
  
  public boolean w0()
  {
    return T > 0;
  }
  
  void w1(boolean paramBoolean)
  {
    if (G < 1) {
      G = 1;
    }
    if ((!paramBoolean) && (!I)) {
      H = false;
    }
    if (G == 1)
    {
      if ((paramBoolean) && (H) && (!I) && (w != null) && (v != null)) {
        C();
      }
      if (!I) {
        H = false;
      }
    }
    G -= 1;
  }
  
  void x(int paramInt1, int paramInt2)
  {
    setMeasuredDimension(o.K(paramInt1, getPaddingLeft() + getPaddingRight(), f0.F(this)), o.K(paramInt2, getPaddingTop() + getPaddingBottom(), f0.E(this)));
  }
  
  public void x1(int paramInt)
  {
    getScrollingChildHelper().r(paramInt);
  }
  
  void y0(int paramInt)
  {
    if (w == null) {
      return;
    }
    setScrollState(2);
    w.S1(paramInt);
    awakenScrollBars();
  }
  
  public void y1()
  {
    setScrollState(0);
    z1();
  }
  
  void z(View paramView)
  {
    Object localObject = i0(paramView);
    H0(paramView);
    Adapter localAdapter = v;
    if ((localAdapter != null) && (localObject != null)) {
      localAdapter.onViewAttachedToWindow((b0)localObject);
    }
    localObject = Q;
    if (localObject != null)
    {
      int i1 = ((List)localObject).size() - 1;
      while (i1 >= 0)
      {
        ((p)Q.get(i1)).d(paramView);
        i1 -= 1;
      }
    }
  }
  
  void z0()
  {
    int i2 = o.j();
    int i1 = 0;
    while (i1 < i2)
    {
      o.i(i1).getLayoutParams()).d = true;
      i1 += 1;
    }
    l.s();
  }
  
  public static abstract class Adapter<VH extends RecyclerView.b0>
  {
    private boolean mHasStableIds = false;
    private final RecyclerView.h mObservable = new RecyclerView.h();
    private StateRestorationPolicy mStateRestorationPolicy = StateRestorationPolicy.b;
    
    public Adapter() {}
    
    public final void bindViewHolder(VH paramVH, int paramInt)
    {
      int i;
      if (mBindingAdapter == null) {
        i = 1;
      } else {
        i = 0;
      }
      if (i != 0)
      {
        mPosition = paramInt;
        if (hasStableIds()) {
          mItemId = getItemId(paramInt);
        }
        paramVH.setFlags(1, 519);
        m.a("RV OnBindView");
      }
      mBindingAdapter = this;
      onBindViewHolder(paramVH, paramInt, paramVH.getUnmodifiedPayloads());
      if (i != 0)
      {
        paramVH.clearPayload();
        paramVH = itemView.getLayoutParams();
        if ((paramVH instanceof RecyclerView.LayoutParams)) {
          d = true;
        }
        m.b();
      }
    }
    
    boolean canRestoreState()
    {
      int i = RecyclerView.g.a[mStateRestorationPolicy.ordinal()];
      boolean bool2 = false;
      boolean bool1 = bool2;
      if (i != 1)
      {
        if (i != 2) {
          return true;
        }
        bool1 = bool2;
        if (getItemCount() > 0) {
          bool1 = true;
        }
      }
      return bool1;
    }
    
    public final VH createViewHolder(ViewGroup paramViewGroup, int paramInt)
    {
      try
      {
        m.a("RV CreateView");
        paramViewGroup = onCreateViewHolder(paramViewGroup, paramInt);
        if (itemView.getParent() == null)
        {
          mItemViewType = paramInt;
          return paramViewGroup;
        }
        throw new IllegalStateException("ViewHolder views must not be attached when created. Ensure that you are not passing 'true' to the attachToRoot parameter of LayoutInflater.inflate(..., boolean attachToRoot)");
      }
      finally
      {
        m.b();
      }
    }
    
    public int findRelativeAdapterPositionIn(Adapter<? extends RecyclerView.b0> paramAdapter, RecyclerView.b0 paramB0, int paramInt)
    {
      if (paramAdapter == this) {
        return paramInt;
      }
      return -1;
    }
    
    public abstract int getItemCount();
    
    public long getItemId(int paramInt)
    {
      return -1L;
    }
    
    public int getItemViewType(int paramInt)
    {
      return 0;
    }
    
    public final boolean hasObservers()
    {
      return mObservable.a();
    }
    
    public final boolean hasStableIds()
    {
      return mHasStableIds;
    }
    
    public final void notifyDataSetChanged()
    {
      mObservable.b();
    }
    
    public final void notifyItemChanged(int paramInt)
    {
      mObservable.d(paramInt, 1);
    }
    
    public final void notifyItemMoved(int paramInt1, int paramInt2)
    {
      mObservable.c(paramInt1, paramInt2);
    }
    
    public final void notifyItemRangeChanged(int paramInt1, int paramInt2)
    {
      mObservable.d(paramInt1, paramInt2);
    }
    
    public final void notifyItemRangeChanged(int paramInt1, int paramInt2, Object paramObject)
    {
      mObservable.e(paramInt1, paramInt2, paramObject);
    }
    
    public final void notifyItemRangeInserted(int paramInt1, int paramInt2)
    {
      mObservable.f(paramInt1, paramInt2);
    }
    
    public final void notifyItemRangeRemoved(int paramInt1, int paramInt2)
    {
      mObservable.g(paramInt1, paramInt2);
    }
    
    public final void notifyItemRemoved(int paramInt)
    {
      mObservable.g(paramInt, 1);
    }
    
    public void onAttachedToRecyclerView(RecyclerView paramRecyclerView) {}
    
    public abstract void onBindViewHolder(VH paramVH, int paramInt);
    
    public void onBindViewHolder(VH paramVH, int paramInt, List<Object> paramList)
    {
      onBindViewHolder(paramVH, paramInt);
    }
    
    public abstract VH onCreateViewHolder(ViewGroup paramViewGroup, int paramInt);
    
    public void onDetachedFromRecyclerView(RecyclerView paramRecyclerView) {}
    
    public boolean onFailedToRecycleView(VH paramVH)
    {
      return false;
    }
    
    public void onViewAttachedToWindow(VH paramVH) {}
    
    public void onViewDetachedFromWindow(VH paramVH) {}
    
    public void onViewRecycled(VH paramVH) {}
    
    public void registerAdapterDataObserver(RecyclerView.i paramI)
    {
      mObservable.registerObserver(paramI);
    }
    
    public void setHasStableIds(boolean paramBoolean)
    {
      if (!hasObservers())
      {
        mHasStableIds = paramBoolean;
        return;
      }
      throw new IllegalStateException("Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
    }
    
    public void unregisterAdapterDataObserver(RecyclerView.i paramI)
    {
      mObservable.unregisterObserver(paramI);
    }
    
    public static enum StateRestorationPolicy
    {
      static
      {
        StateRestorationPolicy localStateRestorationPolicy1 = new StateRestorationPolicy("ALLOW", 0);
        b = localStateRestorationPolicy1;
        StateRestorationPolicy localStateRestorationPolicy2 = new StateRestorationPolicy("PREVENT_WHEN_EMPTY", 1);
        c = localStateRestorationPolicy2;
        StateRestorationPolicy localStateRestorationPolicy3 = new StateRestorationPolicy("PREVENT", 2);
        d = localStateRestorationPolicy3;
        e = new StateRestorationPolicy[] { localStateRestorationPolicy1, localStateRestorationPolicy2, localStateRestorationPolicy3 };
      }
    }
  }
  
  public static class LayoutParams
    extends ViewGroup.MarginLayoutParams
  {
    RecyclerView.b0 b;
    final Rect c = new Rect();
    boolean d = true;
    boolean e = false;
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public LayoutParams(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    public LayoutParams(LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public int a()
    {
      return b.getLayoutPosition();
    }
    
    public boolean b()
    {
      return b.isUpdated();
    }
    
    public boolean c()
    {
      return b.isRemoved();
    }
    
    public boolean d()
    {
      return b.isInvalid();
    }
  }
  
  public static class SavedState
    extends AbsSavedState
  {
    public static final Parcelable.Creator<SavedState> CREATOR = new a();
    Parcelable d;
    
    SavedState(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      if (paramClassLoader == null) {
        paramClassLoader = RecyclerView.o.class.getClassLoader();
      }
      d = paramParcel.readParcelable(paramClassLoader);
    }
    
    SavedState(Parcelable paramParcelable)
    {
      super();
    }
    
    void b(SavedState paramSavedState)
    {
      d = d;
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeParcelable(d, 0);
    }
    
    class a
      implements Parcelable.ClassLoaderCreator<RecyclerView.SavedState>
    {
      a() {}
      
      public RecyclerView.SavedState a(Parcel paramParcel)
      {
        return new RecyclerView.SavedState(paramParcel, null);
      }
      
      public RecyclerView.SavedState b(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        return new RecyclerView.SavedState(paramParcel, paramClassLoader);
      }
      
      public RecyclerView.SavedState[] c(int paramInt)
      {
        return new RecyclerView.SavedState[paramInt];
      }
    }
  }
  
  class a
    implements Runnable
  {
    a() {}
    
    public void run()
    {
      RecyclerView localRecyclerView = RecyclerView.this;
      if (F)
      {
        if (localRecyclerView.isLayoutRequested()) {
          return;
        }
        localRecyclerView = RecyclerView.this;
        if (!C)
        {
          localRecyclerView.requestLayout();
          return;
        }
        if (I)
        {
          H = true;
          return;
        }
        localRecyclerView.v();
      }
    }
  }
  
  class a0
    implements Runnable
  {
    private int b;
    private int c;
    OverScroller d;
    Interpolator e;
    private boolean f;
    private boolean g;
    
    a0()
    {
      Interpolator localInterpolator = RecyclerView.j;
      e = localInterpolator;
      f = false;
      g = false;
      d = new OverScroller(getContext(), localInterpolator);
    }
    
    private int a(int paramInt1, int paramInt2)
    {
      int i = Math.abs(paramInt1);
      int j = Math.abs(paramInt2);
      if (i > j) {
        paramInt1 = 1;
      } else {
        paramInt1 = 0;
      }
      RecyclerView localRecyclerView = RecyclerView.this;
      if (paramInt1 != 0) {
        paramInt2 = localRecyclerView.getWidth();
      } else {
        paramInt2 = localRecyclerView.getHeight();
      }
      if (paramInt1 != 0) {
        paramInt1 = i;
      } else {
        paramInt1 = j;
      }
      return Math.min((int)((paramInt1 / paramInt2 + 1.0F) * 300.0F), 2000);
    }
    
    private void c()
    {
      removeCallbacks(this);
      f0.h0(RecyclerView.this, this);
    }
    
    public void b(int paramInt1, int paramInt2)
    {
      setScrollState(2);
      c = 0;
      b = 0;
      Interpolator localInterpolator1 = e;
      Interpolator localInterpolator2 = RecyclerView.j;
      if (localInterpolator1 != localInterpolator2)
      {
        e = localInterpolator2;
        d = new OverScroller(getContext(), localInterpolator2);
      }
      d.fling(0, 0, paramInt1, paramInt2, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE);
      d();
    }
    
    void d()
    {
      if (f)
      {
        g = true;
        return;
      }
      c();
    }
    
    public void e(int paramInt1, int paramInt2, int paramInt3, Interpolator paramInterpolator)
    {
      int i = paramInt3;
      if (paramInt3 == Integer.MIN_VALUE) {
        i = a(paramInt1, paramInt2);
      }
      Interpolator localInterpolator = paramInterpolator;
      if (paramInterpolator == null) {
        localInterpolator = RecyclerView.j;
      }
      if (e != localInterpolator)
      {
        e = localInterpolator;
        d = new OverScroller(getContext(), localInterpolator);
      }
      c = 0;
      b = 0;
      setScrollState(2);
      d.startScroll(0, 0, paramInt1, paramInt2, i);
      if (Build.VERSION.SDK_INT < 23) {
        d.computeScrollOffset();
      }
      d();
    }
    
    public void f()
    {
      removeCallbacks(this);
      d.abortAnimation();
    }
    
    public void run()
    {
      Object localObject1 = RecyclerView.this;
      if (w == null)
      {
        f();
        return;
      }
      g = false;
      f = true;
      ((RecyclerView)localObject1).v();
      localObject1 = d;
      if (((OverScroller)localObject1).computeScrollOffset())
      {
        int i = ((OverScroller)localObject1).getCurrX();
        int j = ((OverScroller)localObject1).getCurrY();
        int m = i - b;
        int k = j - c;
        b = i;
        c = j;
        Object localObject2 = RecyclerView.this;
        int[] arrayOfInt = I0;
        arrayOfInt[0] = 0;
        arrayOfInt[1] = 0;
        i = m;
        j = k;
        if (((RecyclerView)localObject2).G(m, k, arrayOfInt, null, 1))
        {
          localObject2 = I0;
          i = m - localObject2[0];
          j = k - localObject2[1];
        }
        if (getOverScrollMode() != 2) {
          u(i, j);
        }
        localObject2 = RecyclerView.this;
        if (v != null)
        {
          arrayOfInt = I0;
          arrayOfInt[0] = 0;
          arrayOfInt[1] = 0;
          ((RecyclerView)localObject2).k1(i, j, arrayOfInt);
          localObject2 = RecyclerView.this;
          arrayOfInt = I0;
          n = arrayOfInt[0];
          i1 = arrayOfInt[1];
          int i2 = i - n;
          int i3 = j - i1;
          localObject2 = w.g;
          i = i2;
          k = i1;
          j = n;
          m = i3;
          if (localObject2 != null)
          {
            i = i2;
            k = i1;
            j = n;
            m = i3;
            if (!((RecyclerView.x)localObject2).g())
            {
              i = i2;
              k = i1;
              j = n;
              m = i3;
              if (((RecyclerView.x)localObject2).h())
              {
                i = v0.b();
                if (i == 0)
                {
                  ((RecyclerView.x)localObject2).r();
                  i = i2;
                  k = i1;
                  j = n;
                  m = i3;
                }
                else if (((RecyclerView.x)localObject2).f() >= i)
                {
                  ((RecyclerView.x)localObject2).p(i - 1);
                  ((RecyclerView.x)localObject2).j(n, i1);
                  i = i2;
                  k = i1;
                  j = n;
                  m = i3;
                }
                else
                {
                  ((RecyclerView.x)localObject2).j(n, i1);
                  i = i2;
                  k = i1;
                  j = n;
                  m = i3;
                }
              }
            }
          }
        }
        else
        {
          k = 0;
          n = k;
          m = j;
          j = n;
        }
        if (!z.isEmpty()) {
          invalidate();
        }
        localObject2 = RecyclerView.this;
        arrayOfInt = I0;
        arrayOfInt[0] = 0;
        arrayOfInt[1] = 0;
        ((RecyclerView)localObject2).H(j, k, i, m, null, 1, arrayOfInt);
        localObject2 = RecyclerView.this;
        arrayOfInt = I0;
        int i1 = i - arrayOfInt[0];
        int n = m - arrayOfInt[1];
        if ((j != 0) || (k != 0)) {
          ((RecyclerView)localObject2).J(j, k);
        }
        if (!RecyclerView.e(RecyclerView.this)) {
          invalidate();
        }
        if (((OverScroller)localObject1).getCurrX() == ((OverScroller)localObject1).getFinalX()) {
          i = 1;
        } else {
          i = 0;
        }
        if (((OverScroller)localObject1).getCurrY() == ((OverScroller)localObject1).getFinalY()) {
          m = 1;
        } else {
          m = 0;
        }
        if ((!((OverScroller)localObject1).isFinished()) && (((i == 0) && (i1 == 0)) || ((m == 0) && (n == 0)))) {
          i = 0;
        } else {
          i = 1;
        }
        localObject2 = w.g;
        if ((localObject2 != null) && (((RecyclerView.x)localObject2).g())) {
          m = 1;
        } else {
          m = 0;
        }
        if ((m == 0) && (i != 0))
        {
          if (getOverScrollMode() != 2)
          {
            j = (int)((OverScroller)localObject1).getCurrVelocity();
            if (i1 < 0) {
              i = -j;
            } else if (i1 > 0) {
              i = j;
            } else {
              i = 0;
            }
            if (n < 0) {
              j = -j;
            } else if (n <= 0) {
              j = 0;
            }
            a(i, j);
          }
          if (RecyclerView.f) {
            u0.b();
          }
        }
        else
        {
          d();
          localObject1 = RecyclerView.this;
          localObject2 = t0;
          if (localObject2 != null) {
            ((j)localObject2).f((RecyclerView)localObject1, j, k);
          }
        }
      }
      localObject1 = w.g;
      if ((localObject1 != null) && (((RecyclerView.x)localObject1).g())) {
        ((RecyclerView.x)localObject1).j(0, 0);
      }
      f = false;
      if (g)
      {
        c();
        return;
      }
      setScrollState(0);
      x1(1);
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      RecyclerView.l localL = d0;
      if (localL != null) {
        localL.v();
      }
      B0 = false;
    }
  }
  
  public static abstract class b0
  {
    private static final List<Object> FULLUPDATE_PAYLOADS = ;
    public final View itemView;
    RecyclerView.Adapter<? extends b0> mBindingAdapter;
    int mFlags;
    boolean mInChangeScrap = false;
    private int mIsRecyclableCount = 0;
    long mItemId = -1L;
    int mItemViewType = -1;
    WeakReference<RecyclerView> mNestedRecyclerView;
    int mOldPosition = -1;
    RecyclerView mOwnerRecyclerView;
    List<Object> mPayloads = null;
    int mPendingAccessibilityState = -1;
    int mPosition = -1;
    int mPreLayoutPosition = -1;
    RecyclerView.u mScrapContainer = null;
    b0 mShadowedHolder = null;
    b0 mShadowingHolder = null;
    List<Object> mUnmodifiedPayloads = null;
    private int mWasImportantForAccessibilityBeforeHidden = 0;
    
    public b0(View paramView)
    {
      if (paramView != null)
      {
        itemView = paramView;
        return;
      }
      throw new IllegalArgumentException("itemView may not be null");
    }
    
    private void createPayloadsIfNeeded()
    {
      if (mPayloads == null)
      {
        ArrayList localArrayList = new ArrayList();
        mPayloads = localArrayList;
        mUnmodifiedPayloads = Collections.unmodifiableList(localArrayList);
      }
    }
    
    void addChangePayload(Object paramObject)
    {
      if (paramObject == null)
      {
        addFlags(1024);
        return;
      }
      if ((0x400 & mFlags) == 0)
      {
        createPayloadsIfNeeded();
        mPayloads.add(paramObject);
      }
    }
    
    void addFlags(int paramInt)
    {
      mFlags = (paramInt | mFlags);
    }
    
    void clearOldPosition()
    {
      mOldPosition = -1;
      mPreLayoutPosition = -1;
    }
    
    void clearPayload()
    {
      List localList = mPayloads;
      if (localList != null) {
        localList.clear();
      }
      mFlags &= 0xFBFF;
    }
    
    void clearReturnedFromScrapFlag()
    {
      mFlags &= 0xFFFFFFDF;
    }
    
    void clearTmpDetachFlag()
    {
      mFlags &= 0xFEFF;
    }
    
    boolean doesTransientStatePreventRecycling()
    {
      return ((mFlags & 0x10) == 0) && (f0.Q(itemView));
    }
    
    void flagRemovedAndOffsetPosition(int paramInt1, int paramInt2, boolean paramBoolean)
    {
      addFlags(8);
      offsetPosition(paramInt2, paramBoolean);
      mPosition = paramInt1;
    }
    
    public final int getAbsoluteAdapterPosition()
    {
      RecyclerView localRecyclerView = mOwnerRecyclerView;
      if (localRecyclerView == null) {
        return -1;
      }
      return localRecyclerView.d0(this);
    }
    
    public final int getBindingAdapterPosition()
    {
      if (mBindingAdapter == null) {
        return -1;
      }
      Object localObject = mOwnerRecyclerView;
      if (localObject == null) {
        return -1;
      }
      localObject = ((RecyclerView)localObject).getAdapter();
      if (localObject == null) {
        return -1;
      }
      int i = mOwnerRecyclerView.d0(this);
      if (i == -1) {
        return -1;
      }
      return ((RecyclerView.Adapter)localObject).findRelativeAdapterPositionIn(mBindingAdapter, this, i);
    }
    
    public final long getItemId()
    {
      return mItemId;
    }
    
    public final int getItemViewType()
    {
      return mItemViewType;
    }
    
    public final int getLayoutPosition()
    {
      int j = mPreLayoutPosition;
      int i = j;
      if (j == -1) {
        i = mPosition;
      }
      return i;
    }
    
    public final int getOldPosition()
    {
      return mOldPosition;
    }
    
    List<Object> getUnmodifiedPayloads()
    {
      if ((mFlags & 0x400) == 0)
      {
        List localList = mPayloads;
        if ((localList != null) && (localList.size() != 0)) {
          return mUnmodifiedPayloads;
        }
        return FULLUPDATE_PAYLOADS;
      }
      return FULLUPDATE_PAYLOADS;
    }
    
    boolean hasAnyOfTheFlags(int paramInt)
    {
      return (paramInt & mFlags) != 0;
    }
    
    boolean isAdapterPositionUnknown()
    {
      return ((mFlags & 0x200) != 0) || (isInvalid());
    }
    
    boolean isAttachedToTransitionOverlay()
    {
      return (itemView.getParent() != null) && (itemView.getParent() != mOwnerRecyclerView);
    }
    
    boolean isBound()
    {
      return (mFlags & 0x1) != 0;
    }
    
    boolean isInvalid()
    {
      return (mFlags & 0x4) != 0;
    }
    
    public final boolean isRecyclable()
    {
      return ((mFlags & 0x10) == 0) && (!f0.Q(itemView));
    }
    
    boolean isRemoved()
    {
      return (mFlags & 0x8) != 0;
    }
    
    boolean isScrap()
    {
      return mScrapContainer != null;
    }
    
    boolean isTmpDetached()
    {
      return (mFlags & 0x100) != 0;
    }
    
    boolean isUpdated()
    {
      return (mFlags & 0x2) != 0;
    }
    
    boolean needsUpdate()
    {
      return (mFlags & 0x2) != 0;
    }
    
    void offsetPosition(int paramInt, boolean paramBoolean)
    {
      if (mOldPosition == -1) {
        mOldPosition = mPosition;
      }
      if (mPreLayoutPosition == -1) {
        mPreLayoutPosition = mPosition;
      }
      if (paramBoolean) {
        mPreLayoutPosition += paramInt;
      }
      mPosition += paramInt;
      if (itemView.getLayoutParams() != null) {
        itemView.getLayoutParams()).d = true;
      }
    }
    
    void onEnteredHiddenState(RecyclerView paramRecyclerView)
    {
      int i = mPendingAccessibilityState;
      if (i != -1) {
        mWasImportantForAccessibilityBeforeHidden = i;
      } else {
        mWasImportantForAccessibilityBeforeHidden = f0.B(itemView);
      }
      paramRecyclerView.n1(this, 4);
    }
    
    void onLeftHiddenState(RecyclerView paramRecyclerView)
    {
      paramRecyclerView.n1(this, mWasImportantForAccessibilityBeforeHidden);
      mWasImportantForAccessibilityBeforeHidden = 0;
    }
    
    void resetInternal()
    {
      mFlags = 0;
      mPosition = -1;
      mOldPosition = -1;
      mItemId = -1L;
      mPreLayoutPosition = -1;
      mIsRecyclableCount = 0;
      mShadowedHolder = null;
      mShadowingHolder = null;
      clearPayload();
      mWasImportantForAccessibilityBeforeHidden = 0;
      mPendingAccessibilityState = -1;
      RecyclerView.s(this);
    }
    
    void saveOldPosition()
    {
      if (mOldPosition == -1) {
        mOldPosition = mPosition;
      }
    }
    
    void setFlags(int paramInt1, int paramInt2)
    {
      mFlags = (paramInt1 & paramInt2 | mFlags & paramInt2);
    }
    
    public final void setIsRecyclable(boolean paramBoolean)
    {
      int i = mIsRecyclableCount;
      if (paramBoolean) {
        i -= 1;
      } else {
        i += 1;
      }
      mIsRecyclableCount = i;
      if (i < 0)
      {
        mIsRecyclableCount = 0;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ");
        localStringBuilder.append(this);
        Log.e("View", localStringBuilder.toString());
        return;
      }
      if ((!paramBoolean) && (i == 1))
      {
        mFlags |= 0x10;
        return;
      }
      if ((paramBoolean) && (i == 0)) {
        mFlags &= 0xFFFFFFEF;
      }
    }
    
    void setScrapContainer(RecyclerView.u paramU, boolean paramBoolean)
    {
      mScrapContainer = paramU;
      mInChangeScrap = paramBoolean;
    }
    
    boolean shouldBeKeptAsChild()
    {
      return (mFlags & 0x10) != 0;
    }
    
    boolean shouldIgnore()
    {
      return (mFlags & 0x80) != 0;
    }
    
    public String toString()
    {
      Object localObject;
      if (getClass().isAnonymousClass()) {
        localObject = "ViewHolder";
      } else {
        localObject = getClass().getSimpleName();
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append((String)localObject);
      localStringBuilder.append("{");
      localStringBuilder.append(Integer.toHexString(hashCode()));
      localStringBuilder.append(" position=");
      localStringBuilder.append(mPosition);
      localStringBuilder.append(" id=");
      localStringBuilder.append(mItemId);
      localStringBuilder.append(", oldPos=");
      localStringBuilder.append(mOldPosition);
      localStringBuilder.append(", pLpos:");
      localStringBuilder.append(mPreLayoutPosition);
      localStringBuilder = new StringBuilder(localStringBuilder.toString());
      if (isScrap())
      {
        localStringBuilder.append(" scrap ");
        if (mInChangeScrap) {
          localObject = "[changeScrap]";
        } else {
          localObject = "[attachedScrap]";
        }
        localStringBuilder.append((String)localObject);
      }
      if (isInvalid()) {
        localStringBuilder.append(" invalid");
      }
      if (!isBound()) {
        localStringBuilder.append(" unbound");
      }
      if (needsUpdate()) {
        localStringBuilder.append(" update");
      }
      if (isRemoved()) {
        localStringBuilder.append(" removed");
      }
      if (shouldIgnore()) {
        localStringBuilder.append(" ignored");
      }
      if (isTmpDetached()) {
        localStringBuilder.append(" tmpDetached");
      }
      if (!isRecyclable())
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append(" not recyclable(");
        ((StringBuilder)localObject).append(mIsRecyclableCount);
        ((StringBuilder)localObject).append(")");
        localStringBuilder.append(((StringBuilder)localObject).toString());
      }
      if (isAdapterPositionUnknown()) {
        localStringBuilder.append(" undefined adapter position");
      }
      if (itemView.getParent() == null) {
        localStringBuilder.append(" no parent");
      }
      localStringBuilder.append("}");
      return localStringBuilder.toString();
    }
    
    void unScrap()
    {
      mScrapContainer.J(this);
    }
    
    boolean wasReturnedFromScrap()
    {
      return (mFlags & 0x20) != 0;
    }
  }
  
  class c
    implements Interpolator
  {
    c() {}
    
    public float getInterpolation(float paramFloat)
    {
      paramFloat -= 1.0F;
      return paramFloat * paramFloat * paramFloat * paramFloat * paramFloat + 1.0F;
    }
  }
  
  class d
    implements z.b
  {
    d() {}
    
    public void a(RecyclerView.b0 paramB0)
    {
      RecyclerView localRecyclerView = RecyclerView.this;
      w.H1(itemView, l);
    }
    
    public void b(RecyclerView.b0 paramB0, RecyclerView.l.c paramC1, RecyclerView.l.c paramC2)
    {
      m(paramB0, paramC1, paramC2);
    }
    
    public void c(RecyclerView.b0 paramB0, RecyclerView.l.c paramC1, RecyclerView.l.c paramC2)
    {
      l.J(paramB0);
      o(paramB0, paramC1, paramC2);
    }
    
    public void d(RecyclerView.b0 paramB0, RecyclerView.l.c paramC1, RecyclerView.l.c paramC2)
    {
      paramB0.setIsRecyclable(false);
      RecyclerView localRecyclerView = RecyclerView.this;
      if (R)
      {
        if (d0.b(paramB0, paramB0, paramC1, paramC2)) {
          P0();
        }
      }
      else if (d0.d(paramB0, paramC1, paramC2)) {
        P0();
      }
    }
  }
  
  class e
    implements f.b
  {
    e() {}
    
    public View a(int paramInt)
    {
      return getChildAt(paramInt);
    }
    
    public void b(View paramView)
    {
      paramView = RecyclerView.i0(paramView);
      if (paramView != null) {
        paramView.onEnteredHiddenState(RecyclerView.this);
      }
    }
    
    public int c()
    {
      return getChildCount();
    }
    
    public void d()
    {
      int j = c();
      int i = 0;
      while (i < j)
      {
        View localView = a(i);
        A(localView);
        localView.clearAnimation();
        i += 1;
      }
      removeAllViews();
    }
    
    public int e(View paramView)
    {
      return indexOfChild(paramView);
    }
    
    public RecyclerView.b0 f(View paramView)
    {
      return RecyclerView.i0(paramView);
    }
    
    public void g(int paramInt)
    {
      Object localObject = a(paramInt);
      if (localObject != null)
      {
        localObject = RecyclerView.i0((View)localObject);
        if (localObject != null)
        {
          if ((((RecyclerView.b0)localObject).isTmpDetached()) && (!((RecyclerView.b0)localObject).shouldIgnore()))
          {
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("called detach on an already detached child ");
            localStringBuilder.append(localObject);
            localStringBuilder.append(Q());
            throw new IllegalArgumentException(localStringBuilder.toString());
          }
          ((RecyclerView.b0)localObject).addFlags(256);
        }
      }
      RecyclerView.d(RecyclerView.this, paramInt);
    }
    
    public void h(View paramView)
    {
      paramView = RecyclerView.i0(paramView);
      if (paramView != null) {
        paramView.onLeftHiddenState(RecyclerView.this);
      }
    }
    
    public void i(View paramView, int paramInt)
    {
      addView(paramView, paramInt);
      z(paramView);
    }
    
    public void j(int paramInt)
    {
      View localView = getChildAt(paramInt);
      if (localView != null)
      {
        A(localView);
        localView.clearAnimation();
      }
      removeViewAt(paramInt);
    }
    
    public void k(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams)
    {
      RecyclerView.b0 localB0 = RecyclerView.i0(paramView);
      if (localB0 != null)
      {
        if ((!localB0.isTmpDetached()) && (!localB0.shouldIgnore()))
        {
          paramView = new StringBuilder();
          paramView.append("Called attach on a child which is not detached: ");
          paramView.append(localB0);
          paramView.append(Q());
          throw new IllegalArgumentException(paramView.toString());
        }
        localB0.clearTmpDetachFlag();
      }
      RecyclerView.c(RecyclerView.this, paramView, paramInt, paramLayoutParams);
    }
  }
  
  class f
    implements a.a
  {
    f() {}
    
    public void a(int paramInt1, int paramInt2)
    {
      F0(paramInt1, paramInt2);
      y0 = true;
    }
    
    public void b(a.b paramB)
    {
      i(paramB);
    }
    
    public void c(int paramInt1, int paramInt2, Object paramObject)
    {
      A1(paramInt1, paramInt2, paramObject);
      z0 = true;
    }
    
    public void d(a.b paramB)
    {
      i(paramB);
    }
    
    public RecyclerView.b0 e(int paramInt)
    {
      RecyclerView.b0 localB0 = b0(paramInt, true);
      if (localB0 == null) {
        return null;
      }
      if (o.n(itemView)) {
        return null;
      }
      return localB0;
    }
    
    public void f(int paramInt1, int paramInt2)
    {
      G0(paramInt1, paramInt2, false);
      y0 = true;
    }
    
    public void g(int paramInt1, int paramInt2)
    {
      E0(paramInt1, paramInt2);
      y0 = true;
    }
    
    public void h(int paramInt1, int paramInt2)
    {
      G0(paramInt1, paramInt2, true);
      Object localObject = RecyclerView.this;
      y0 = true;
      localObject = v0;
      d += paramInt2;
    }
    
    void i(a.b paramB)
    {
      int i = a;
      if (i != 1)
      {
        if (i != 2)
        {
          if (i != 4)
          {
            if (i != 8) {
              return;
            }
            localRecyclerView = RecyclerView.this;
            w.n1(localRecyclerView, b, d, 1);
            return;
          }
          localRecyclerView = RecyclerView.this;
          w.q1(localRecyclerView, b, d, c);
          return;
        }
        localRecyclerView = RecyclerView.this;
        w.o1(localRecyclerView, b, d);
        return;
      }
      RecyclerView localRecyclerView = RecyclerView.this;
      w.l1(localRecyclerView, b, d);
    }
  }
  
  static class h
    extends Observable<RecyclerView.i>
  {
    h() {}
    
    public boolean a()
    {
      return mObservers.isEmpty() ^ true;
    }
    
    public void b()
    {
      int i = mObservers.size() - 1;
      while (i >= 0)
      {
        ((RecyclerView.i)mObservers.get(i)).a();
        i -= 1;
      }
    }
    
    public void c(int paramInt1, int paramInt2)
    {
      int i = mObservers.size() - 1;
      while (i >= 0)
      {
        ((RecyclerView.i)mObservers.get(i)).e(paramInt1, paramInt2, 1);
        i -= 1;
      }
    }
    
    public void d(int paramInt1, int paramInt2)
    {
      e(paramInt1, paramInt2, null);
    }
    
    public void e(int paramInt1, int paramInt2, Object paramObject)
    {
      int i = mObservers.size() - 1;
      while (i >= 0)
      {
        ((RecyclerView.i)mObservers.get(i)).c(paramInt1, paramInt2, paramObject);
        i -= 1;
      }
    }
    
    public void f(int paramInt1, int paramInt2)
    {
      int i = mObservers.size() - 1;
      while (i >= 0)
      {
        ((RecyclerView.i)mObservers.get(i)).d(paramInt1, paramInt2);
        i -= 1;
      }
    }
    
    public void g(int paramInt1, int paramInt2)
    {
      int i = mObservers.size() - 1;
      while (i >= 0)
      {
        ((RecyclerView.i)mObservers.get(i)).f(paramInt1, paramInt2);
        i -= 1;
      }
    }
  }
  
  public static abstract class i
  {
    public i() {}
    
    public void a() {}
    
    public void b(int paramInt1, int paramInt2) {}
    
    public void c(int paramInt1, int paramInt2, Object paramObject)
    {
      b(paramInt1, paramInt2);
    }
    
    public void d(int paramInt1, int paramInt2) {}
    
    public void e(int paramInt1, int paramInt2, int paramInt3) {}
    
    public void f(int paramInt1, int paramInt2) {}
  }
  
  public static abstract interface j
  {
    public abstract int a(int paramInt1, int paramInt2);
  }
  
  public static class k
  {
    public k() {}
    
    protected EdgeEffect a(RecyclerView paramRecyclerView, int paramInt)
    {
      return new EdgeEffect(paramRecyclerView.getContext());
    }
  }
  
  public static abstract class l
  {
    private b a = null;
    private ArrayList<a> b = new ArrayList();
    private long c = 120L;
    private long d = 120L;
    private long e = 250L;
    private long f = 250L;
    
    public l() {}
    
    static int e(RecyclerView.b0 paramB0)
    {
      int j = mFlags & 0xE;
      if (paramB0.isInvalid()) {
        return 4;
      }
      int i = j;
      if ((j & 0x4) == 0)
      {
        int k = paramB0.getOldPosition();
        int m = paramB0.getAbsoluteAdapterPosition();
        i = j;
        if (k != -1)
        {
          i = j;
          if (m != -1)
          {
            i = j;
            if (k != m) {
              i = j | 0x800;
            }
          }
        }
      }
      return i;
    }
    
    public abstract boolean a(RecyclerView.b0 paramB0, c paramC1, c paramC2);
    
    public abstract boolean b(RecyclerView.b0 paramB01, RecyclerView.b0 paramB02, c paramC1, c paramC2);
    
    public abstract boolean c(RecyclerView.b0 paramB0, c paramC1, c paramC2);
    
    public abstract boolean d(RecyclerView.b0 paramB0, c paramC1, c paramC2);
    
    public abstract boolean f(RecyclerView.b0 paramB0);
    
    public boolean g(RecyclerView.b0 paramB0, List<Object> paramList)
    {
      return f(paramB0);
    }
    
    public final void h(RecyclerView.b0 paramB0)
    {
      s(paramB0);
      b localB = a;
      if (localB != null) {
        localB.a(paramB0);
      }
    }
    
    public final void i()
    {
      int j = b.size();
      int i = 0;
      while (i < j)
      {
        ((a)b.get(i)).a();
        i += 1;
      }
      b.clear();
    }
    
    public abstract void j(RecyclerView.b0 paramB0);
    
    public abstract void k();
    
    public long l()
    {
      return c;
    }
    
    public long m()
    {
      return f;
    }
    
    public long n()
    {
      return e;
    }
    
    public long o()
    {
      return d;
    }
    
    public abstract boolean p();
    
    public final boolean q(a paramA)
    {
      boolean bool = p();
      if (paramA != null)
      {
        if (!bool)
        {
          paramA.a();
          return bool;
        }
        b.add(paramA);
      }
      return bool;
    }
    
    public c r()
    {
      return new c();
    }
    
    public void s(RecyclerView.b0 paramB0) {}
    
    public c t(RecyclerView.y paramY, RecyclerView.b0 paramB0)
    {
      return r().a(paramB0);
    }
    
    public c u(RecyclerView.y paramY, RecyclerView.b0 paramB0, int paramInt, List<Object> paramList)
    {
      return r().a(paramB0);
    }
    
    public abstract void v();
    
    void w(b paramB)
    {
      a = paramB;
    }
    
    public static abstract interface a
    {
      public abstract void a();
    }
    
    static abstract interface b
    {
      public abstract void a(RecyclerView.b0 paramB0);
    }
    
    public static class c
    {
      public int a;
      public int b;
      public int c;
      public int d;
      
      public c() {}
      
      public c a(RecyclerView.b0 paramB0)
      {
        return b(paramB0, 0);
      }
      
      public c b(RecyclerView.b0 paramB0, int paramInt)
      {
        paramB0 = itemView;
        a = paramB0.getLeft();
        b = paramB0.getTop();
        c = paramB0.getRight();
        d = paramB0.getBottom();
        return this;
      }
    }
  }
  
  private class m
    implements RecyclerView.l.b
  {
    m() {}
    
    public void a(RecyclerView.b0 paramB0)
    {
      paramB0.setIsRecyclable(true);
      if ((mShadowedHolder != null) && (mShadowingHolder == null)) {
        mShadowedHolder = null;
      }
      mShadowingHolder = null;
      if ((!paramB0.shouldBeKeptAsChild()) && (!Y0(itemView)) && (paramB0.isTmpDetached())) {
        removeDetachedView(itemView, false);
      }
    }
  }
  
  public static abstract class n
  {
    public n() {}
    
    @Deprecated
    public void getItemOffsets(Rect paramRect, int paramInt, RecyclerView paramRecyclerView)
    {
      paramRect.set(0, 0, 0, 0);
    }
    
    public void getItemOffsets(Rect paramRect, View paramView, RecyclerView paramRecyclerView, RecyclerView.y paramY)
    {
      getItemOffsets(paramRect, ((RecyclerView.LayoutParams)paramView.getLayoutParams()).a(), paramRecyclerView);
    }
    
    @Deprecated
    public void onDraw(Canvas paramCanvas, RecyclerView paramRecyclerView) {}
    
    public void onDraw(Canvas paramCanvas, RecyclerView paramRecyclerView, RecyclerView.y paramY)
    {
      onDraw(paramCanvas, paramRecyclerView);
    }
    
    @Deprecated
    public void onDrawOver(Canvas paramCanvas, RecyclerView paramRecyclerView) {}
    
    public void onDrawOver(Canvas paramCanvas, RecyclerView paramRecyclerView, RecyclerView.y paramY)
    {
      onDrawOver(paramCanvas, paramRecyclerView);
    }
  }
  
  public static abstract class o
  {
    f a;
    RecyclerView b;
    private final y.b c;
    private final y.b d;
    y e;
    y f;
    RecyclerView.x g;
    boolean h;
    boolean i;
    boolean j;
    private boolean k;
    private boolean l;
    int m;
    boolean n;
    private int o;
    private int p;
    private int q;
    private int r;
    
    public o()
    {
      a localA = new a();
      c = localA;
      b localB = new b();
      d = localB;
      e = new y(localA);
      f = new y(localB);
      h = false;
      i = false;
      j = false;
      k = true;
      l = true;
    }
    
    public static d B0(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
    {
      d localD = new d();
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, c.s.d.f, paramInt1, paramInt2);
      a = paramContext.getInt(c.s.d.g, 1);
      b = paramContext.getInt(c.s.d.q, 1);
      c = paramContext.getBoolean(c.s.d.p, false);
      d = paramContext.getBoolean(c.s.d.r, false);
      paramContext.recycle();
      return localD;
    }
    
    private void C(View paramView, int paramInt, boolean paramBoolean)
    {
      Object localObject = RecyclerView.i0(paramView);
      if ((!paramBoolean) && (!((RecyclerView.b0)localObject).isRemoved())) {
        b.p.p((RecyclerView.b0)localObject);
      } else {
        b.p.b((RecyclerView.b0)localObject);
      }
      RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
      if ((!((RecyclerView.b0)localObject).wasReturnedFromScrap()) && (!((RecyclerView.b0)localObject).isScrap()))
      {
        if (paramView.getParent() == b)
        {
          int i2 = a.m(paramView);
          int i1 = paramInt;
          if (paramInt == -1) {
            i1 = a.g();
          }
          if (i2 != -1)
          {
            if (i2 != i1) {
              b.w.V0(i2, i1);
            }
          }
          else
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("Added View has RecyclerView as parent but view is not a real child. Unfiltered index:");
            ((StringBuilder)localObject).append(b.indexOfChild(paramView));
            ((StringBuilder)localObject).append(b.Q());
            throw new IllegalStateException(((StringBuilder)localObject).toString());
          }
        }
        else
        {
          a.a(paramView, paramInt, false);
          d = true;
          RecyclerView.x localX = g;
          if ((localX != null) && (localX.h())) {
            g.k(paramView);
          }
        }
      }
      else
      {
        if (((RecyclerView.b0)localObject).isScrap()) {
          ((RecyclerView.b0)localObject).unScrap();
        } else {
          ((RecyclerView.b0)localObject).clearReturnedFromScrapFlag();
        }
        a.c(paramView, paramInt, paramView.getLayoutParams(), false);
      }
      if (e)
      {
        itemView.invalidate();
        e = false;
      }
    }
    
    public static int K(int paramInt1, int paramInt2, int paramInt3)
    {
      int i1 = View.MeasureSpec.getMode(paramInt1);
      paramInt1 = View.MeasureSpec.getSize(paramInt1);
      if (i1 != Integer.MIN_VALUE)
      {
        if (i1 != 1073741824) {
          paramInt1 = Math.max(paramInt2, paramInt3);
        }
        return paramInt1;
      }
      return Math.min(paramInt1, Math.max(paramInt2, paramInt3));
    }
    
    private boolean M0(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
    {
      paramRecyclerView = paramRecyclerView.getFocusedChild();
      if (paramRecyclerView == null) {
        return false;
      }
      int i1 = v();
      int i2 = u();
      int i3 = H0();
      int i4 = p();
      int i5 = t0();
      int i6 = a();
      Rect localRect = b.s;
      m0(paramRecyclerView, localRect);
      if ((left - paramInt1 < i3 - i4) && (right - paramInt1 > i1) && (top - paramInt2 < i5 - i6)) {
        return bottom - paramInt2 > i2;
      }
      return false;
    }
    
    private static boolean Q0(int paramInt1, int paramInt2, int paramInt3)
    {
      int i1 = View.MeasureSpec.getMode(paramInt2);
      paramInt2 = View.MeasureSpec.getSize(paramInt2);
      boolean bool2 = false;
      boolean bool1 = false;
      if ((paramInt3 > 0) && (paramInt1 != paramInt3)) {
        return false;
      }
      if (i1 != Integer.MIN_VALUE)
      {
        if (i1 != 0)
        {
          if (i1 != 1073741824) {
            return false;
          }
          if (paramInt2 == paramInt1) {
            bool1 = true;
          }
          return bool1;
        }
        return true;
      }
      bool1 = bool2;
      if (paramInt2 >= paramInt1) {
        bool1 = true;
      }
      return bool1;
    }
    
    private void Q1(RecyclerView.u paramU, int paramInt, View paramView)
    {
      RecyclerView.b0 localB0 = RecyclerView.i0(paramView);
      if (localB0.shouldIgnore()) {
        return;
      }
      if ((localB0.isInvalid()) && (!localB0.isRemoved()) && (!b.v.hasStableIds()))
      {
        L1(paramInt);
        paramU.C(localB0);
        return;
      }
      U(paramInt);
      paramU.D(paramView);
      b.p.k(localB0);
    }
    
    private void V(int paramInt, View paramView)
    {
      a.d(paramInt);
    }
    
    public static int h0(int paramInt1, int paramInt2, int paramInt3, int paramInt4, boolean paramBoolean)
    {
      paramInt1 = Math.max(0, paramInt1 - paramInt3);
      if (paramBoolean)
      {
        if (paramInt4 < 0)
        {
          if (paramInt4 != -1) {
            break label100;
          }
          if (paramInt2 == Integer.MIN_VALUE) {
            break label59;
          }
          if (paramInt2 == 0) {
            break label100;
          }
          if (paramInt2 == 1073741824) {
            break label59;
          }
          break label100;
        }
      }
      else {
        if (paramInt4 < 0) {
          break label54;
        }
      }
      paramInt2 = 1073741824;
      break label104;
      label54:
      if (paramInt4 == -1)
      {
        label59:
        paramInt4 = paramInt1;
      }
      else if (paramInt4 == -2)
      {
        if ((paramInt2 != Integer.MIN_VALUE) && (paramInt2 != 1073741824))
        {
          paramInt2 = 0;
          paramInt4 = paramInt1;
        }
        else
        {
          paramInt2 = Integer.MIN_VALUE;
          paramInt4 = paramInt1;
        }
      }
      else
      {
        label100:
        paramInt2 = 0;
        paramInt4 = paramInt2;
      }
      label104:
      return View.MeasureSpec.makeMeasureSpec(paramInt4, paramInt2);
    }
    
    private int[] i0(View paramView, Rect paramRect)
    {
      int i1 = v();
      int i2 = u();
      int i3 = H0();
      int i10 = p();
      int i5 = t0();
      int i6 = a();
      int i11 = paramView.getLeft() + left - paramView.getScrollX();
      int i7 = paramView.getTop() + top - paramView.getScrollY();
      int i12 = paramRect.width();
      int i8 = paramRect.height();
      int i9 = i11 - i1;
      i1 = Math.min(0, i9);
      int i4 = i7 - i2;
      i2 = Math.min(0, i4);
      i10 = i12 + i11 - (i3 - i10);
      i3 = Math.max(0, i10);
      i5 = Math.max(0, i8 + i7 - (i5 - i6));
      if (w0() == 1)
      {
        if (i3 != 0) {
          i1 = i3;
        } else {
          i1 = Math.max(i1, i10);
        }
      }
      else if (i1 == 0) {
        i1 = Math.min(i9, i3);
      }
      if (i2 == 0) {
        i2 = Math.min(i4, i5);
      }
      return new int[] { i1, i2 };
    }
    
    public void A(View paramView)
    {
      B(paramView, -1);
    }
    
    public int A0(View paramView)
    {
      return ((RecyclerView.LayoutParams)paramView.getLayoutParams()).a();
    }
    
    boolean A1(int paramInt, Bundle paramBundle)
    {
      RecyclerView localRecyclerView = b;
      return B1(l, v0, paramInt, paramBundle);
    }
    
    public void B(View paramView, int paramInt)
    {
      C(paramView, paramInt, false);
    }
    
    public boolean B1(RecyclerView.u paramU, RecyclerView.y paramY, int paramInt, Bundle paramBundle)
    {
      paramU = b;
      if (paramU == null) {
        return false;
      }
      if (paramInt != 4096)
      {
        if (paramInt != 8192)
        {
          paramInt = 0;
          i1 = paramInt;
          break label169;
        }
        if (paramU.canScrollVertically(-1)) {
          paramInt = -(t0() - u() - a());
        } else {
          paramInt = 0;
        }
        i1 = paramInt;
        if (!b.canScrollHorizontally(-1)) {
          break label167;
        }
        i1 = -(H0() - v() - p());
      }
      else
      {
        if (paramU.canScrollVertically(1)) {
          paramInt = t0() - u() - a();
        } else {
          paramInt = 0;
        }
        i1 = paramInt;
        if (!b.canScrollHorizontally(1)) {
          break label167;
        }
        i1 = H0() - v() - p();
      }
      int i2 = paramInt;
      paramInt = i1;
      int i1 = i2;
      break label169;
      label167:
      paramInt = 0;
      label169:
      if ((i1 == 0) && (paramInt == 0)) {
        return false;
      }
      b.s1(paramInt, i1, null, Integer.MIN_VALUE, true);
      return true;
    }
    
    public int C0(View paramView)
    {
      return getLayoutParamsc.right;
    }
    
    boolean C1(View paramView, int paramInt, Bundle paramBundle)
    {
      RecyclerView localRecyclerView = b;
      return D1(l, v0, paramView, paramInt, paramBundle);
    }
    
    public void D(String paramString)
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        localRecyclerView.p(paramString);
      }
    }
    
    public int D0(RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return -1;
    }
    
    public boolean D1(RecyclerView.u paramU, RecyclerView.y paramY, View paramView, int paramInt, Bundle paramBundle)
    {
      return false;
    }
    
    public void E(View paramView, int paramInt)
    {
      F(paramView, paramInt, (RecyclerView.LayoutParams)paramView.getLayoutParams());
    }
    
    public int E0(RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return 0;
    }
    
    public void E1()
    {
      int i1 = g0() - 1;
      while (i1 >= 0)
      {
        a.q(i1);
        i1 -= 1;
      }
    }
    
    public void F(View paramView, int paramInt, RecyclerView.LayoutParams paramLayoutParams)
    {
      RecyclerView.b0 localB0 = RecyclerView.i0(paramView);
      if (localB0.isRemoved()) {
        b.p.b(localB0);
      } else {
        b.p.p(localB0);
      }
      a.c(paramView, paramInt, paramLayoutParams, localB0.isRemoved());
    }
    
    public int F0(View paramView)
    {
      return getLayoutParamsc.top;
    }
    
    public void F1(RecyclerView.u paramU)
    {
      int i1 = g0() - 1;
      while (i1 >= 0)
      {
        if (!RecyclerView.i0(f0(i1)).shouldIgnore()) {
          I1(i1, paramU);
        }
        i1 -= 1;
      }
    }
    
    public void G(View paramView, Rect paramRect)
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView == null)
      {
        paramRect.set(0, 0, 0, 0);
        return;
      }
      paramRect.set(localRecyclerView.m0(paramView));
    }
    
    public void G0(View paramView, boolean paramBoolean, Rect paramRect)
    {
      Object localObject;
      if (paramBoolean)
      {
        localObject = getLayoutParamsc;
        paramRect.set(-left, -top, paramView.getWidth() + right, paramView.getHeight() + bottom);
      }
      else
      {
        paramRect.set(0, 0, paramView.getWidth(), paramView.getHeight());
      }
      if (b != null)
      {
        localObject = paramView.getMatrix();
        if ((localObject != null) && (!((Matrix)localObject).isIdentity()))
        {
          RectF localRectF = b.u;
          localRectF.set(paramRect);
          ((Matrix)localObject).mapRect(localRectF);
          paramRect.set((int)Math.floor(left), (int)Math.floor(top), (int)Math.ceil(right), (int)Math.ceil(bottom));
        }
      }
      paramRect.offset(paramView.getLeft(), paramView.getTop());
    }
    
    void G1(RecyclerView.u paramU)
    {
      int i2 = paramU.j();
      int i1 = i2 - 1;
      while (i1 >= 0)
      {
        View localView = paramU.n(i1);
        RecyclerView.b0 localB0 = RecyclerView.i0(localView);
        if (!localB0.shouldIgnore())
        {
          localB0.setIsRecyclable(false);
          if (localB0.isTmpDetached()) {
            b.removeDetachedView(localView, false);
          }
          RecyclerView.l localL = b.d0;
          if (localL != null) {
            localL.j(localB0);
          }
          localB0.setIsRecyclable(true);
          paramU.y(localView);
        }
        i1 -= 1;
      }
      paramU.e();
      if (i2 > 0) {
        b.invalidate();
      }
    }
    
    public boolean H()
    {
      return false;
    }
    
    public int H0()
    {
      return q;
    }
    
    public void H1(View paramView, RecyclerView.u paramU)
    {
      K1(paramView);
      paramU.B(paramView);
    }
    
    public boolean I()
    {
      return false;
    }
    
    public int I0()
    {
      return o;
    }
    
    public void I1(int paramInt, RecyclerView.u paramU)
    {
      View localView = f0(paramInt);
      L1(paramInt);
      paramU.B(localView);
    }
    
    public boolean J(RecyclerView.LayoutParams paramLayoutParams)
    {
      return paramLayoutParams != null;
    }
    
    boolean J0()
    {
      int i2 = g0();
      int i1 = 0;
      while (i1 < i2)
      {
        ViewGroup.LayoutParams localLayoutParams = f0(i1).getLayoutParams();
        if ((width < 0) && (height < 0)) {
          return true;
        }
        i1 += 1;
      }
      return false;
    }
    
    public boolean J1(Runnable paramRunnable)
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return localRecyclerView.removeCallbacks(paramRunnable);
      }
      return false;
    }
    
    public boolean K0()
    {
      return i;
    }
    
    public void K1(View paramView)
    {
      a.p(paramView);
    }
    
    public void L(int paramInt1, int paramInt2, RecyclerView.y paramY, c paramC) {}
    
    public boolean L0()
    {
      return j;
    }
    
    public void L1(int paramInt)
    {
      if (f0(paramInt) != null) {
        a.q(paramInt);
      }
    }
    
    public void M(int paramInt, c paramC) {}
    
    public boolean M1(RecyclerView paramRecyclerView, View paramView, Rect paramRect, boolean paramBoolean)
    {
      return N1(paramRecyclerView, paramView, paramRect, paramBoolean, false);
    }
    
    public int N(RecyclerView.y paramY)
    {
      return 0;
    }
    
    public final boolean N0()
    {
      return l;
    }
    
    public boolean N1(RecyclerView paramRecyclerView, View paramView, Rect paramRect, boolean paramBoolean1, boolean paramBoolean2)
    {
      paramView = i0(paramView, paramRect);
      int i1 = paramView[0];
      int i2 = paramView[1];
      if (((paramBoolean2) && (!M0(paramRecyclerView, i1, i2))) || ((i1 == 0) && (i2 == 0))) {
        return false;
      }
      if (paramBoolean1)
      {
        paramRecyclerView.scrollBy(i1, i2);
        return true;
      }
      paramRecyclerView.p1(i1, i2);
      return true;
    }
    
    public int O(RecyclerView.y paramY)
    {
      return 0;
    }
    
    public boolean O0(RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return false;
    }
    
    public void O1()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        localRecyclerView.requestLayout();
      }
    }
    
    public int P(RecyclerView.y paramY)
    {
      return 0;
    }
    
    public boolean P0()
    {
      return k;
    }
    
    public void P1()
    {
      h = true;
    }
    
    public int Q(RecyclerView.y paramY)
    {
      return 0;
    }
    
    public int R(RecyclerView.y paramY)
    {
      return 0;
    }
    
    public boolean R0()
    {
      RecyclerView.x localX = g;
      return (localX != null) && (localX.h());
    }
    
    public int R1(int paramInt, RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return 0;
    }
    
    public int S(RecyclerView.y paramY)
    {
      return 0;
    }
    
    public boolean S0(View paramView, boolean paramBoolean1, boolean paramBoolean2)
    {
      if ((e.b(paramView, 24579)) && (f.b(paramView, 24579))) {
        paramBoolean2 = true;
      } else {
        paramBoolean2 = false;
      }
      if (paramBoolean1) {
        return paramBoolean2;
      }
      return paramBoolean2 ^ true;
    }
    
    public void S1(int paramInt) {}
    
    public void T(RecyclerView.u paramU)
    {
      int i1 = g0() - 1;
      while (i1 >= 0)
      {
        Q1(paramU, i1, f0(i1));
        i1 -= 1;
      }
    }
    
    public void T0(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
      Rect localRect = c;
      paramView.layout(paramInt1 + left + leftMargin, paramInt2 + top + topMargin, paramInt3 - right - rightMargin, paramInt4 - bottom - bottomMargin);
    }
    
    public int T1(int paramInt, RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return 0;
    }
    
    public void U(int paramInt)
    {
      V(paramInt, f0(paramInt));
    }
    
    public void U0(View paramView, int paramInt1, int paramInt2)
    {
      RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
      Rect localRect = b.m0(paramView);
      int i3 = left;
      int i4 = right;
      int i1 = top;
      int i2 = bottom;
      paramInt1 = h0(H0(), I0(), v() + p() + leftMargin + rightMargin + (paramInt1 + (i3 + i4)), width, H());
      paramInt2 = h0(t0(), u0(), u() + a() + topMargin + bottomMargin + (paramInt2 + (i1 + i2)), height, I());
      if (c2(paramView, paramInt1, paramInt2, localLayoutParams)) {
        paramView.measure(paramInt1, paramInt2);
      }
    }
    
    @Deprecated
    public void U1(boolean paramBoolean)
    {
      j = paramBoolean;
    }
    
    public void V0(int paramInt1, int paramInt2)
    {
      Object localObject = f0(paramInt1);
      if (localObject != null)
      {
        U(paramInt1);
        E((View)localObject, paramInt2);
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Cannot move a child from non-existing index:");
      ((StringBuilder)localObject).append(paramInt1);
      ((StringBuilder)localObject).append(b.toString());
      throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    }
    
    void V1(RecyclerView paramRecyclerView)
    {
      X1(View.MeasureSpec.makeMeasureSpec(paramRecyclerView.getWidth(), 1073741824), View.MeasureSpec.makeMeasureSpec(paramRecyclerView.getHeight(), 1073741824));
    }
    
    void W(RecyclerView paramRecyclerView)
    {
      i = true;
      a1(paramRecyclerView);
    }
    
    public void W0(int paramInt)
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        localRecyclerView.C0(paramInt);
      }
    }
    
    public final void W1(boolean paramBoolean)
    {
      if (paramBoolean != l)
      {
        l = paramBoolean;
        m = 0;
        RecyclerView localRecyclerView = b;
        if (localRecyclerView != null) {
          l.K();
        }
      }
    }
    
    void X(RecyclerView paramRecyclerView, RecyclerView.u paramU)
    {
      i = false;
      c1(paramRecyclerView, paramU);
    }
    
    public void X0(int paramInt)
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        localRecyclerView.D0(paramInt);
      }
    }
    
    void X1(int paramInt1, int paramInt2)
    {
      q = View.MeasureSpec.getSize(paramInt1);
      paramInt1 = View.MeasureSpec.getMode(paramInt1);
      o = paramInt1;
      if ((paramInt1 == 0) && (!RecyclerView.d)) {
        q = 0;
      }
      r = View.MeasureSpec.getSize(paramInt2);
      paramInt1 = View.MeasureSpec.getMode(paramInt2);
      p = paramInt1;
      if ((paramInt1 == 0) && (!RecyclerView.d)) {
        r = 0;
      }
    }
    
    public View Y(View paramView)
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView == null) {
        return null;
      }
      paramView = localRecyclerView.T(paramView);
      if (paramView == null) {
        return null;
      }
      if (a.n(paramView)) {
        return null;
      }
      return paramView;
    }
    
    public void Y0(RecyclerView.Adapter paramAdapter1, RecyclerView.Adapter paramAdapter2) {}
    
    public void Y1(int paramInt1, int paramInt2)
    {
      RecyclerView.f(b, paramInt1, paramInt2);
    }
    
    public View Z(int paramInt)
    {
      int i2 = g0();
      int i1 = 0;
      while (i1 < i2)
      {
        View localView = f0(i1);
        RecyclerView.b0 localB0 = RecyclerView.i0(localView);
        if ((localB0 != null) && (localB0.getLayoutPosition() == paramInt) && (!localB0.shouldIgnore()) && ((b.v0.e()) || (!localB0.isRemoved()))) {
          return localView;
        }
        i1 += 1;
      }
      return null;
    }
    
    public boolean Z0(RecyclerView paramRecyclerView, ArrayList<View> paramArrayList, int paramInt1, int paramInt2)
    {
      return false;
    }
    
    public void Z1(Rect paramRect, int paramInt1, int paramInt2)
    {
      int i1 = paramRect.width();
      int i2 = v();
      int i3 = p();
      int i4 = paramRect.height();
      int i5 = u();
      int i6 = a();
      Y1(K(paramInt1, i1 + i2 + i3, z0()), K(paramInt2, i4 + i5 + i6, y0()));
    }
    
    public int a()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return localRecyclerView.getPaddingBottom();
      }
      return 0;
    }
    
    public abstract RecyclerView.LayoutParams a0();
    
    public void a1(RecyclerView paramRecyclerView) {}
    
    void a2(int paramInt1, int paramInt2)
    {
      int i8 = g0();
      if (i8 == 0)
      {
        b.x(paramInt1, paramInt2);
        return;
      }
      int i2 = 0;
      int i6 = Integer.MIN_VALUE;
      int i5 = Integer.MAX_VALUE;
      int i3 = i5;
      int i1 = Integer.MIN_VALUE;
      while (i2 < i8)
      {
        View localView = f0(i2);
        Rect localRect = b.s;
        m0(localView, localRect);
        int i7 = left;
        int i4 = i5;
        if (i7 < i5) {
          i4 = i7;
        }
        i7 = right;
        i5 = i6;
        if (i7 > i6) {
          i5 = i7;
        }
        i6 = top;
        i7 = i3;
        if (i6 < i3) {
          i7 = i6;
        }
        i6 = bottom;
        i3 = i1;
        if (i6 > i1) {
          i3 = i6;
        }
        i2 += 1;
        i6 = i5;
        i1 = i3;
        i5 = i4;
        i3 = i7;
      }
      b.s.set(i5, i3, i6, i1);
      Z1(b.s, paramInt1, paramInt2);
    }
    
    public int b()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return f0.H(localRecyclerView);
      }
      return 0;
    }
    
    public RecyclerView.LayoutParams b0(Context paramContext, AttributeSet paramAttributeSet)
    {
      return new RecyclerView.LayoutParams(paramContext, paramAttributeSet);
    }
    
    @Deprecated
    public void b1(RecyclerView paramRecyclerView) {}
    
    void b2(RecyclerView paramRecyclerView)
    {
      if (paramRecyclerView == null)
      {
        b = null;
        a = null;
        q = 0;
        r = 0;
      }
      else
      {
        b = paramRecyclerView;
        a = o;
        q = paramRecyclerView.getWidth();
        r = paramRecyclerView.getHeight();
      }
      o = 1073741824;
      p = 1073741824;
    }
    
    public RecyclerView.LayoutParams c0(ViewGroup.LayoutParams paramLayoutParams)
    {
      if ((paramLayoutParams instanceof RecyclerView.LayoutParams)) {
        return new RecyclerView.LayoutParams((RecyclerView.LayoutParams)paramLayoutParams);
      }
      if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
        return new RecyclerView.LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams);
      }
      return new RecyclerView.LayoutParams(paramLayoutParams);
    }
    
    public void c1(RecyclerView paramRecyclerView, RecyclerView.u paramU)
    {
      b1(paramRecyclerView);
    }
    
    boolean c2(View paramView, int paramInt1, int paramInt2, RecyclerView.LayoutParams paramLayoutParams)
    {
      return (paramView.isLayoutRequested()) || (!k) || (!Q0(paramView.getWidth(), paramInt1, width)) || (!Q0(paramView.getHeight(), paramInt2, height));
    }
    
    public int d0()
    {
      return -1;
    }
    
    public View d1(View paramView, int paramInt, RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return null;
    }
    
    boolean d2()
    {
      return false;
    }
    
    public int e0(View paramView)
    {
      return getLayoutParamsc.bottom;
    }
    
    public void e1(AccessibilityEvent paramAccessibilityEvent)
    {
      RecyclerView localRecyclerView = b;
      f1(l, v0, paramAccessibilityEvent);
    }
    
    boolean e2(View paramView, int paramInt1, int paramInt2, RecyclerView.LayoutParams paramLayoutParams)
    {
      return (!k) || (!Q0(paramView.getMeasuredWidth(), paramInt1, width)) || (!Q0(paramView.getMeasuredHeight(), paramInt2, height));
    }
    
    public View f0(int paramInt)
    {
      f localF = a;
      if (localF != null) {
        return localF.f(paramInt);
      }
      return null;
    }
    
    public void f1(RecyclerView.u paramU, RecyclerView.y paramY, AccessibilityEvent paramAccessibilityEvent)
    {
      paramU = b;
      if (paramU != null)
      {
        if (paramAccessibilityEvent == null) {
          return;
        }
        boolean bool2 = true;
        boolean bool1 = bool2;
        if (!paramU.canScrollVertically(1))
        {
          bool1 = bool2;
          if (!b.canScrollVertically(-1))
          {
            bool1 = bool2;
            if (!b.canScrollHorizontally(-1)) {
              if (b.canScrollHorizontally(1)) {
                bool1 = bool2;
              } else {
                bool1 = false;
              }
            }
          }
        }
        paramAccessibilityEvent.setScrollable(bool1);
        paramU = b.v;
        if (paramU != null) {
          paramAccessibilityEvent.setItemCount(paramU.getItemCount());
        }
      }
    }
    
    public void f2(RecyclerView paramRecyclerView, RecyclerView.y paramY, int paramInt)
    {
      Log.e("RecyclerView", "You must override smoothScrollToPosition to support smooth scrolling");
    }
    
    public int g0()
    {
      f localF = a;
      if (localF != null) {
        return localF.g();
      }
      return 0;
    }
    
    void g1(c paramC)
    {
      RecyclerView localRecyclerView = b;
      h1(l, v0, paramC);
    }
    
    public void g2(RecyclerView.x paramX)
    {
      RecyclerView.x localX = g;
      if ((localX != null) && (paramX != localX) && (localX.h())) {
        g.r();
      }
      g = paramX;
      paramX.q(b, this);
    }
    
    public void h1(RecyclerView.u paramU, RecyclerView.y paramY, c paramC)
    {
      if ((b.canScrollVertically(-1)) || (b.canScrollHorizontally(-1)))
      {
        paramC.a(8192);
        paramC.q0(true);
      }
      if ((b.canScrollVertically(1)) || (b.canScrollHorizontally(1)))
      {
        paramC.a(4096);
        paramC.q0(true);
      }
      paramC.a0(c.b.a(D0(paramU, paramY), k0(paramU, paramY), O0(paramU, paramY), E0(paramU, paramY)));
    }
    
    void h2()
    {
      RecyclerView.x localX = g;
      if (localX != null) {
        localX.r();
      }
    }
    
    void i1(View paramView, c paramC)
    {
      Object localObject = RecyclerView.i0(paramView);
      if ((localObject != null) && (!((RecyclerView.b0)localObject).isRemoved()) && (!a.n(itemView)))
      {
        localObject = b;
        j1(l, v0, paramView, paramC);
      }
    }
    
    public boolean i2()
    {
      return false;
    }
    
    public boolean j0()
    {
      RecyclerView localRecyclerView = b;
      return (localRecyclerView != null) && (q);
    }
    
    public void j1(RecyclerView.u paramU, RecyclerView.y paramY, View paramView, c paramC) {}
    
    public int k0(RecyclerView.u paramU, RecyclerView.y paramY)
    {
      return -1;
    }
    
    public View k1(View paramView, int paramInt)
    {
      return null;
    }
    
    public int l0(View paramView)
    {
      return paramView.getBottom() + e0(paramView);
    }
    
    public void l1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2) {}
    
    public void m0(View paramView, Rect paramRect)
    {
      RecyclerView.j0(paramView, paramRect);
    }
    
    public void m1(RecyclerView paramRecyclerView) {}
    
    public int n0(View paramView)
    {
      return paramView.getLeft() - x0(paramView);
    }
    
    public void n1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2, int paramInt3) {}
    
    public int o0(View paramView)
    {
      Rect localRect = getLayoutParamsc;
      return paramView.getMeasuredHeight() + top + bottom;
    }
    
    public void o1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2) {}
    
    public int p()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return localRecyclerView.getPaddingRight();
      }
      return 0;
    }
    
    public int p0(View paramView)
    {
      Rect localRect = getLayoutParamsc;
      return paramView.getMeasuredWidth() + left + right;
    }
    
    public void p1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2) {}
    
    public int q0(View paramView)
    {
      return paramView.getRight() + C0(paramView);
    }
    
    public void q1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2, Object paramObject)
    {
      p1(paramRecyclerView, paramInt1, paramInt2);
    }
    
    public int r0(View paramView)
    {
      return paramView.getTop() - F0(paramView);
    }
    
    public void r1(RecyclerView.u paramU, RecyclerView.y paramY)
    {
      Log.e("RecyclerView", "You must override onLayoutChildren(Recycler recycler, State state) ");
    }
    
    public View s0()
    {
      Object localObject = b;
      if (localObject == null) {
        return null;
      }
      localObject = ((ViewGroup)localObject).getFocusedChild();
      if (localObject != null)
      {
        if (a.n((View)localObject)) {
          return null;
        }
        return localObject;
      }
      return null;
    }
    
    public void s1(RecyclerView.y paramY) {}
    
    public int t()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return f0.I(localRecyclerView);
      }
      return 0;
    }
    
    public int t0()
    {
      return r;
    }
    
    public void t1(RecyclerView.u paramU, RecyclerView.y paramY, int paramInt1, int paramInt2)
    {
      b.x(paramInt1, paramInt2);
    }
    
    public int u()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return localRecyclerView.getPaddingTop();
      }
      return 0;
    }
    
    public int u0()
    {
      return p;
    }
    
    @Deprecated
    public boolean u1(RecyclerView paramRecyclerView, View paramView1, View paramView2)
    {
      return (R0()) || (paramRecyclerView.w0());
    }
    
    public int v()
    {
      RecyclerView localRecyclerView = b;
      if (localRecyclerView != null) {
        return localRecyclerView.getPaddingLeft();
      }
      return 0;
    }
    
    public int v0()
    {
      Object localObject = b;
      if (localObject != null) {
        localObject = ((RecyclerView)localObject).getAdapter();
      } else {
        localObject = null;
      }
      if (localObject != null) {
        return ((RecyclerView.Adapter)localObject).getItemCount();
      }
      return 0;
    }
    
    public boolean v1(RecyclerView paramRecyclerView, RecyclerView.y paramY, View paramView1, View paramView2)
    {
      return u1(paramRecyclerView, paramView1, paramView2);
    }
    
    public int w0()
    {
      return f0.D(b);
    }
    
    public void w1(Parcelable paramParcelable) {}
    
    public int x0(View paramView)
    {
      return getLayoutParamsc.left;
    }
    
    public Parcelable x1()
    {
      return null;
    }
    
    public void y(View paramView)
    {
      z(paramView, -1);
    }
    
    public int y0()
    {
      return f0.E(b);
    }
    
    public void y1(int paramInt) {}
    
    public void z(View paramView, int paramInt)
    {
      C(paramView, paramInt, true);
    }
    
    public int z0()
    {
      return f0.F(b);
    }
    
    void z1(RecyclerView.x paramX)
    {
      if (g == paramX) {
        g = null;
      }
    }
    
    class a
      implements y.b
    {
      a() {}
      
      public View a(int paramInt)
      {
        return f0(paramInt);
      }
      
      public int b(View paramView)
      {
        RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
        return n0(paramView) - leftMargin;
      }
      
      public int c()
      {
        return v();
      }
      
      public int d()
      {
        return H0() - p();
      }
      
      public int e(View paramView)
      {
        RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
        return q0(paramView) + rightMargin;
      }
    }
    
    class b
      implements y.b
    {
      b() {}
      
      public View a(int paramInt)
      {
        return f0(paramInt);
      }
      
      public int b(View paramView)
      {
        RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
        return r0(paramView) - topMargin;
      }
      
      public int c()
      {
        return u();
      }
      
      public int d()
      {
        return t0() - a();
      }
      
      public int e(View paramView)
      {
        RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
        return l0(paramView) + bottomMargin;
      }
    }
    
    public static abstract interface c
    {
      public abstract void a(int paramInt1, int paramInt2);
    }
    
    public static class d
    {
      public int a;
      public int b;
      public boolean c;
      public boolean d;
      
      public d() {}
    }
  }
  
  public static abstract interface p
  {
    public abstract void b(View paramView);
    
    public abstract void d(View paramView);
  }
  
  public static abstract class q
  {
    public q() {}
    
    public abstract boolean a(int paramInt1, int paramInt2);
  }
  
  public static abstract interface r
  {
    public abstract void a(RecyclerView paramRecyclerView, MotionEvent paramMotionEvent);
    
    public abstract boolean c(RecyclerView paramRecyclerView, MotionEvent paramMotionEvent);
    
    public abstract void e(boolean paramBoolean);
  }
  
  public static abstract class s
  {
    public s() {}
    
    public void a(RecyclerView paramRecyclerView, int paramInt) {}
    
    public void b(RecyclerView paramRecyclerView, int paramInt1, int paramInt2) {}
  }
  
  public static class t
  {
    SparseArray<a> a = new SparseArray();
    private int b = 0;
    
    public t() {}
    
    private a g(int paramInt)
    {
      a localA2 = (a)a.get(paramInt);
      a localA1 = localA2;
      if (localA2 == null)
      {
        localA1 = new a();
        a.put(paramInt, localA1);
      }
      return localA1;
    }
    
    void a()
    {
      b += 1;
    }
    
    public void b()
    {
      int i = 0;
      while (i < a.size())
      {
        a.valueAt(i)).a.clear();
        i += 1;
      }
    }
    
    void c()
    {
      b -= 1;
    }
    
    void d(int paramInt, long paramLong)
    {
      a localA = g(paramInt);
      d = j(d, paramLong);
    }
    
    void e(int paramInt, long paramLong)
    {
      a localA = g(paramInt);
      c = j(c, paramLong);
    }
    
    public RecyclerView.b0 f(int paramInt)
    {
      Object localObject = (a)a.get(paramInt);
      if ((localObject != null) && (!a.isEmpty()))
      {
        localObject = a;
        paramInt = ((ArrayList)localObject).size() - 1;
        while (paramInt >= 0)
        {
          if (!((RecyclerView.b0)((ArrayList)localObject).get(paramInt)).isAttachedToTransitionOverlay()) {
            return (RecyclerView.b0)((ArrayList)localObject).remove(paramInt);
          }
          paramInt -= 1;
        }
      }
      return null;
    }
    
    void h(RecyclerView.Adapter paramAdapter1, RecyclerView.Adapter paramAdapter2, boolean paramBoolean)
    {
      if (paramAdapter1 != null) {
        c();
      }
      if ((!paramBoolean) && (b == 0)) {
        b();
      }
      if (paramAdapter2 != null) {
        a();
      }
    }
    
    public void i(RecyclerView.b0 paramB0)
    {
      int i = paramB0.getItemViewType();
      ArrayList localArrayList = ga;
      if (a.get(i)).b <= localArrayList.size()) {
        return;
      }
      paramB0.resetInternal();
      localArrayList.add(paramB0);
    }
    
    long j(long paramLong1, long paramLong2)
    {
      if (paramLong1 == 0L) {
        return paramLong2;
      }
      return paramLong1 / 4L * 3L + paramLong2 / 4L;
    }
    
    boolean k(int paramInt, long paramLong1, long paramLong2)
    {
      long l = gd;
      return (l == 0L) || (paramLong1 + l < paramLong2);
    }
    
    boolean l(int paramInt, long paramLong1, long paramLong2)
    {
      long l = gc;
      return (l == 0L) || (paramLong1 + l < paramLong2);
    }
    
    static class a
    {
      final ArrayList<RecyclerView.b0> a = new ArrayList();
      int b = 5;
      long c = 0L;
      long d = 0L;
      
      a() {}
    }
  }
  
  public final class u
  {
    final ArrayList<RecyclerView.b0> a;
    ArrayList<RecyclerView.b0> b;
    final ArrayList<RecyclerView.b0> c;
    private final List<RecyclerView.b0> d;
    private int e;
    int f;
    RecyclerView.t g;
    private RecyclerView.z h;
    
    public u()
    {
      this$1 = new ArrayList();
      a = RecyclerView.this;
      b = null;
      c = new ArrayList();
      d = Collections.unmodifiableList(RecyclerView.this);
      e = 2;
      f = 2;
    }
    
    private boolean H(RecyclerView.b0 paramB0, int paramInt1, int paramInt2, long paramLong)
    {
      mBindingAdapter = null;
      mOwnerRecyclerView = RecyclerView.this;
      int j = paramB0.getItemViewType();
      long l = getNanoTime();
      if ((paramLong != Long.MAX_VALUE) && (!g.k(j, l, paramLong))) {
        return false;
      }
      v.bindViewHolder(paramB0, paramInt1);
      paramLong = getNanoTime();
      g.d(paramB0.getItemViewType(), paramLong - l);
      b(paramB0);
      if (v0.e()) {
        mPreLayoutPosition = paramInt2;
      }
      return true;
    }
    
    private void b(RecyclerView.b0 paramB0)
    {
      if (v0())
      {
        paramB0 = itemView;
        if (f0.B(paramB0) == 0) {
          f0.A0(paramB0, 1);
        }
        Object localObject = C0;
        if (localObject == null) {
          return;
        }
        localObject = ((u)localObject).n();
        if ((localObject instanceof u.a)) {
          ((u.a)localObject).o(paramB0);
        }
        f0.p0(paramB0, (c.h.q.f)localObject);
      }
    }
    
    private void q(ViewGroup paramViewGroup, boolean paramBoolean)
    {
      int j = paramViewGroup.getChildCount() - 1;
      while (j >= 0)
      {
        View localView = paramViewGroup.getChildAt(j);
        if ((localView instanceof ViewGroup)) {
          q((ViewGroup)localView, true);
        }
        j -= 1;
      }
      if (!paramBoolean) {
        return;
      }
      if (paramViewGroup.getVisibility() == 4)
      {
        paramViewGroup.setVisibility(0);
        paramViewGroup.setVisibility(4);
        return;
      }
      j = paramViewGroup.getVisibility();
      paramViewGroup.setVisibility(4);
      paramViewGroup.setVisibility(j);
    }
    
    private void r(RecyclerView.b0 paramB0)
    {
      paramB0 = itemView;
      if ((paramB0 instanceof ViewGroup)) {
        q((ViewGroup)paramB0, false);
      }
    }
    
    void A(int paramInt)
    {
      a((RecyclerView.b0)c.get(paramInt), true);
      c.remove(paramInt);
    }
    
    public void B(View paramView)
    {
      RecyclerView.b0 localB0 = RecyclerView.i0(paramView);
      if (localB0.isTmpDetached()) {
        removeDetachedView(paramView, false);
      }
      if (localB0.isScrap()) {
        localB0.unScrap();
      } else if (localB0.wasReturnedFromScrap()) {
        localB0.clearReturnedFromScrapFlag();
      }
      C(localB0);
      if ((d0 != null) && (!localB0.isRecyclable())) {
        d0.j(localB0);
      }
    }
    
    void C(RecyclerView.b0 paramB0)
    {
      boolean bool2 = paramB0.isScrap();
      boolean bool1 = false;
      int k = 0;
      int m = 1;
      if ((!bool2) && (itemView.getParent() == null))
      {
        if (!paramB0.isTmpDetached())
        {
          if (!paramB0.shouldIgnore())
          {
            bool1 = paramB0.doesTransientStatePreventRecycling();
            localObject = v;
            int j;
            if ((localObject != null) && (bool1) && (((RecyclerView.Adapter)localObject).onFailedToRecycleView(paramB0))) {
              j = 1;
            } else {
              j = 0;
            }
            if ((j == 0) && (!paramB0.isRecyclable()))
            {
              m = 0;
              j = k;
              k = m;
            }
            else
            {
              if ((f > 0) && (!paramB0.hasAnyOfTheFlags(526)))
              {
                k = c.size();
                j = k;
                if (k >= f)
                {
                  j = k;
                  if (k > 0)
                  {
                    A(0);
                    j = k - 1;
                  }
                }
                k = j;
                if (RecyclerView.f)
                {
                  k = j;
                  if (j > 0)
                  {
                    k = j;
                    if (!u0.d(mPosition))
                    {
                      j -= 1;
                      while (j >= 0)
                      {
                        k = c.get(j)).mPosition;
                        if (!u0.d(k)) {
                          break;
                        }
                        j -= 1;
                      }
                      k = j + 1;
                    }
                  }
                }
                c.add(k, paramB0);
                j = 1;
              }
              else
              {
                j = 0;
              }
              if (j == 0)
              {
                a(paramB0, true);
                k = m;
              }
              else
              {
                k = 0;
              }
            }
            p.q(paramB0);
            if ((j == 0) && (k == 0) && (bool1))
            {
              mBindingAdapter = null;
              mOwnerRecyclerView = null;
            }
            return;
          }
          paramB0 = new StringBuilder();
          paramB0.append("Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.");
          paramB0.append(Q());
          throw new IllegalArgumentException(paramB0.toString());
        }
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Tmp detached view should be removed from RecyclerView before it can be recycled: ");
        ((StringBuilder)localObject).append(paramB0);
        ((StringBuilder)localObject).append(Q());
        throw new IllegalArgumentException(((StringBuilder)localObject).toString());
      }
      Object localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Scrapped or attached views may not be recycled. isScrap:");
      ((StringBuilder)localObject).append(paramB0.isScrap());
      ((StringBuilder)localObject).append(" isAttached:");
      if (itemView.getParent() != null) {
        bool1 = true;
      }
      ((StringBuilder)localObject).append(bool1);
      ((StringBuilder)localObject).append(Q());
      throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    }
    
    void D(View paramView)
    {
      paramView = RecyclerView.i0(paramView);
      if ((!paramView.hasAnyOfTheFlags(12)) && (paramView.isUpdated()) && (!q(paramView)))
      {
        if (b == null) {
          b = new ArrayList();
        }
        paramView.setScrapContainer(this, true);
        b.add(paramView);
        return;
      }
      if ((paramView.isInvalid()) && (!paramView.isRemoved()) && (!v.hasStableIds()))
      {
        paramView = new StringBuilder();
        paramView.append("Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.");
        paramView.append(Q());
        throw new IllegalArgumentException(paramView.toString());
      }
      paramView.setScrapContainer(this, false);
      a.add(paramView);
    }
    
    void E(RecyclerView.t paramT)
    {
      RecyclerView.t localT = g;
      if (localT != null) {
        localT.c();
      }
      g = paramT;
      if ((paramT != null) && (getAdapter() != null)) {
        g.a();
      }
    }
    
    void F(RecyclerView.z paramZ) {}
    
    public void G(int paramInt)
    {
      e = paramInt;
      K();
    }
    
    RecyclerView.b0 I(int paramInt, boolean paramBoolean, long paramLong)
    {
      if ((paramInt >= 0) && (paramInt < v0.b()))
      {
        boolean bool2 = v0.e();
        boolean bool1 = true;
        if (bool2)
        {
          localObject2 = h(paramInt);
          localObject1 = localObject2;
          if (localObject2 != null)
          {
            k = 1;
            break label70;
          }
        }
        else
        {
          localObject1 = null;
        }
        int k = 0;
        Object localObject2 = localObject1;
        label70:
        localObject1 = localObject2;
        int j = k;
        if (localObject2 == null)
        {
          localObject2 = m(paramInt, paramBoolean);
          localObject1 = localObject2;
          j = k;
          if (localObject2 != null) {
            if (!L((RecyclerView.b0)localObject2))
            {
              if (!paramBoolean)
              {
                ((RecyclerView.b0)localObject2).addFlags(4);
                if (((RecyclerView.b0)localObject2).isScrap())
                {
                  removeDetachedView(itemView, false);
                  ((RecyclerView.b0)localObject2).unScrap();
                }
                else if (((RecyclerView.b0)localObject2).wasReturnedFromScrap())
                {
                  ((RecyclerView.b0)localObject2).clearReturnedFromScrapFlag();
                }
                C((RecyclerView.b0)localObject2);
              }
              localObject1 = null;
              j = k;
            }
            else
            {
              j = 1;
              localObject1 = localObject2;
            }
          }
        }
        Object localObject3 = localObject1;
        int m = j;
        if (localObject1 == null)
        {
          m = RecyclerView.this.n.m(paramInt);
          if ((m >= 0) && (m < v.getItemCount()))
          {
            int n = v.getItemViewType(m);
            k = j;
            if (v.hasStableIds())
            {
              localObject2 = l(v.getItemId(m), n, paramBoolean);
              localObject1 = localObject2;
              k = j;
              if (localObject2 != null)
              {
                mPosition = m;
                k = 1;
                localObject1 = localObject2;
              }
            }
            if ((localObject1 == null) && (h != null)) {
              throw null;
            }
            localObject2 = localObject1;
            if (localObject1 == null)
            {
              localObject2 = i().f(n);
              if (localObject2 != null)
              {
                ((RecyclerView.b0)localObject2).resetInternal();
                if (RecyclerView.c) {
                  r((RecyclerView.b0)localObject2);
                }
              }
            }
            localObject3 = localObject2;
            m = k;
            if (localObject2 == null)
            {
              long l1 = getNanoTime();
              if ((paramLong != Long.MAX_VALUE) && (!g.l(n, l1, paramLong))) {
                return null;
              }
              localObject1 = RecyclerView.this;
              localObject2 = v.createViewHolder((ViewGroup)localObject1, n);
              if (RecyclerView.f)
              {
                localObject1 = RecyclerView.X(itemView);
                if (localObject1 != null) {
                  mNestedRecyclerView = new WeakReference(localObject1);
                }
              }
              long l2 = getNanoTime();
              g.e(n, l2 - l1);
              break label601;
            }
          }
          else
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("Inconsistency detected. Invalid item position ");
            ((StringBuilder)localObject1).append(paramInt);
            ((StringBuilder)localObject1).append("(offset:");
            ((StringBuilder)localObject1).append(m);
            ((StringBuilder)localObject1).append(").state:");
            ((StringBuilder)localObject1).append(v0.b());
            ((StringBuilder)localObject1).append(Q());
            throw new IndexOutOfBoundsException(((StringBuilder)localObject1).toString());
          }
        }
        localObject2 = localObject3;
        k = m;
        label601:
        if ((k != 0) && (!v0.e()) && (((RecyclerView.b0)localObject2).hasAnyOfTheFlags(8192)))
        {
          ((RecyclerView.b0)localObject2).setFlags(0, 8192);
          if (v0.k)
          {
            j = RecyclerView.l.e((RecyclerView.b0)localObject2);
            localObject1 = RecyclerView.this;
            localObject1 = d0.u(v0, (RecyclerView.b0)localObject2, j | 0x1000, ((RecyclerView.b0)localObject2).getUnmodifiedPayloads());
            U0((RecyclerView.b0)localObject2, (RecyclerView.l.c)localObject1);
          }
        }
        if ((v0.e()) && (((RecyclerView.b0)localObject2).isBound())) {
          mPreLayoutPosition = paramInt;
        } else {
          if ((!((RecyclerView.b0)localObject2).isBound()) || (((RecyclerView.b0)localObject2).needsUpdate()) || (((RecyclerView.b0)localObject2).isInvalid())) {
            break label766;
          }
        }
        paramBoolean = false;
        break label786;
        label766:
        paramBoolean = H((RecyclerView.b0)localObject2, RecyclerView.this.n.m(paramInt), paramInt, paramLong);
        label786:
        localObject1 = itemView.getLayoutParams();
        if (localObject1 == null)
        {
          localObject1 = (RecyclerView.LayoutParams)generateDefaultLayoutParams();
          itemView.setLayoutParams((ViewGroup.LayoutParams)localObject1);
        }
        else if (!checkLayoutParams((ViewGroup.LayoutParams)localObject1))
        {
          localObject1 = (RecyclerView.LayoutParams)generateLayoutParams((ViewGroup.LayoutParams)localObject1);
          itemView.setLayoutParams((ViewGroup.LayoutParams)localObject1);
        }
        else
        {
          localObject1 = (RecyclerView.LayoutParams)localObject1;
        }
        b = ((RecyclerView.b0)localObject2);
        if ((k != 0) && (paramBoolean)) {
          paramBoolean = bool1;
        } else {
          paramBoolean = false;
        }
        e = paramBoolean;
        return localObject2;
      }
      Object localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Invalid item position ");
      ((StringBuilder)localObject1).append(paramInt);
      ((StringBuilder)localObject1).append("(");
      ((StringBuilder)localObject1).append(paramInt);
      ((StringBuilder)localObject1).append("). Item count:");
      ((StringBuilder)localObject1).append(v0.b());
      ((StringBuilder)localObject1).append(Q());
      throw new IndexOutOfBoundsException(((StringBuilder)localObject1).toString());
    }
    
    void J(RecyclerView.b0 paramB0)
    {
      if (mInChangeScrap) {
        b.remove(paramB0);
      } else {
        a.remove(paramB0);
      }
      mScrapContainer = null;
      mInChangeScrap = false;
      paramB0.clearReturnedFromScrapFlag();
    }
    
    void K()
    {
      RecyclerView.o localO = w;
      if (localO != null) {
        j = m;
      } else {
        j = 0;
      }
      f = (e + j);
      int j = c.size() - 1;
      while ((j >= 0) && (c.size() > f))
      {
        A(j);
        j -= 1;
      }
    }
    
    boolean L(RecyclerView.b0 paramB0)
    {
      if (paramB0.isRemoved()) {
        return v0.e();
      }
      int j = mPosition;
      if ((j >= 0) && (j < v.getItemCount()))
      {
        boolean bool2 = v0.e();
        boolean bool1 = false;
        if ((!bool2) && (v.getItemViewType(mPosition) != paramB0.getItemViewType())) {
          return false;
        }
        if (v.hasStableIds())
        {
          if (paramB0.getItemId() == v.getItemId(mPosition)) {
            bool1 = true;
          }
          return bool1;
        }
        return true;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Inconsistency detected. Invalid view holder adapter position");
      localStringBuilder.append(paramB0);
      localStringBuilder.append(Q());
      throw new IndexOutOfBoundsException(localStringBuilder.toString());
    }
    
    void M(int paramInt1, int paramInt2)
    {
      int j = c.size() - 1;
      while (j >= 0)
      {
        RecyclerView.b0 localB0 = (RecyclerView.b0)c.get(j);
        if (localB0 != null)
        {
          int k = mPosition;
          if ((k >= paramInt1) && (k < paramInt2 + paramInt1))
          {
            localB0.addFlags(2);
            A(j);
          }
        }
        j -= 1;
      }
    }
    
    void a(RecyclerView.b0 paramB0, boolean paramBoolean)
    {
      RecyclerView.s(paramB0);
      View localView = itemView;
      Object localObject = C0;
      if (localObject != null)
      {
        localObject = ((u)localObject).n();
        if ((localObject instanceof u.a)) {
          localObject = ((u.a)localObject).n(localView);
        } else {
          localObject = null;
        }
        f0.p0(localView, (c.h.q.f)localObject);
      }
      if (paramBoolean) {
        g(paramB0);
      }
      mBindingAdapter = null;
      mOwnerRecyclerView = null;
      i().i(paramB0);
    }
    
    public void c()
    {
      a.clear();
      z();
    }
    
    void d()
    {
      int m = c.size();
      int k = 0;
      int j = 0;
      while (j < m)
      {
        ((RecyclerView.b0)c.get(j)).clearOldPosition();
        j += 1;
      }
      m = a.size();
      j = 0;
      while (j < m)
      {
        ((RecyclerView.b0)a.get(j)).clearOldPosition();
        j += 1;
      }
      ArrayList localArrayList = b;
      if (localArrayList != null)
      {
        m = localArrayList.size();
        j = k;
        while (j < m)
        {
          ((RecyclerView.b0)b.get(j)).clearOldPosition();
          j += 1;
        }
      }
    }
    
    void e()
    {
      a.clear();
      ArrayList localArrayList = b;
      if (localArrayList != null) {
        localArrayList.clear();
      }
    }
    
    public int f(int paramInt)
    {
      if ((paramInt >= 0) && (paramInt < v0.b()))
      {
        if (!v0.e()) {
          return paramInt;
        }
        return n.m(paramInt);
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("invalid position ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(". State item count is ");
      localStringBuilder.append(v0.b());
      localStringBuilder.append(Q());
      throw new IndexOutOfBoundsException(localStringBuilder.toString());
    }
    
    void g(RecyclerView.b0 paramB0)
    {
      Object localObject = x;
      if (localObject != null) {
        ((RecyclerView.v)localObject).a(paramB0);
      }
      int k = y.size();
      int j = 0;
      while (j < k)
      {
        ((RecyclerView.v)y.get(j)).a(paramB0);
        j += 1;
      }
      localObject = v;
      if (localObject != null) {
        ((RecyclerView.Adapter)localObject).onViewRecycled(paramB0);
      }
      localObject = RecyclerView.this;
      if (v0 != null) {
        p.q(paramB0);
      }
    }
    
    RecyclerView.b0 h(int paramInt)
    {
      Object localObject = b;
      if (localObject != null)
      {
        int m = ((ArrayList)localObject).size();
        if (m == 0) {
          return null;
        }
        int k = 0;
        int j = 0;
        while (j < m)
        {
          localObject = (RecyclerView.b0)b.get(j);
          if ((!((RecyclerView.b0)localObject).wasReturnedFromScrap()) && (((RecyclerView.b0)localObject).getLayoutPosition() == paramInt))
          {
            ((RecyclerView.b0)localObject).addFlags(32);
            return localObject;
          }
          j += 1;
        }
        if (v.hasStableIds())
        {
          paramInt = n.m(paramInt);
          if ((paramInt > 0) && (paramInt < v.getItemCount()))
          {
            long l = v.getItemId(paramInt);
            paramInt = k;
            while (paramInt < m)
            {
              localObject = (RecyclerView.b0)b.get(paramInt);
              if ((!((RecyclerView.b0)localObject).wasReturnedFromScrap()) && (((RecyclerView.b0)localObject).getItemId() == l))
              {
                ((RecyclerView.b0)localObject).addFlags(32);
                return localObject;
              }
              paramInt += 1;
            }
          }
        }
      }
      return null;
    }
    
    RecyclerView.t i()
    {
      if (g == null) {
        g = new RecyclerView.t();
      }
      return g;
    }
    
    int j()
    {
      return a.size();
    }
    
    public List<RecyclerView.b0> k()
    {
      return d;
    }
    
    RecyclerView.b0 l(long paramLong, int paramInt, boolean paramBoolean)
    {
      int j = a.size() - 1;
      RecyclerView.b0 localB0;
      while (j >= 0)
      {
        localB0 = (RecyclerView.b0)a.get(j);
        if ((localB0.getItemId() == paramLong) && (!localB0.wasReturnedFromScrap()))
        {
          if (paramInt == localB0.getItemViewType())
          {
            localB0.addFlags(32);
            if ((localB0.isRemoved()) && (!v0.e())) {
              localB0.setFlags(2, 14);
            }
            return localB0;
          }
          if (!paramBoolean)
          {
            a.remove(j);
            removeDetachedView(itemView, false);
            y(itemView);
          }
        }
        j -= 1;
      }
      j = c.size() - 1;
      while (j >= 0)
      {
        localB0 = (RecyclerView.b0)c.get(j);
        if ((localB0.getItemId() == paramLong) && (!localB0.isAttachedToTransitionOverlay()))
        {
          if (paramInt == localB0.getItemViewType())
          {
            if (!paramBoolean) {
              c.remove(j);
            }
            return localB0;
          }
          if (!paramBoolean)
          {
            A(j);
            return null;
          }
        }
        j -= 1;
      }
      return null;
    }
    
    RecyclerView.b0 m(int paramInt, boolean paramBoolean)
    {
      int m = a.size();
      int k = 0;
      int j = 0;
      RecyclerView.b0 localB0;
      while (j < m)
      {
        localB0 = (RecyclerView.b0)a.get(j);
        if ((!localB0.wasReturnedFromScrap()) && (localB0.getLayoutPosition() == paramInt) && (!localB0.isInvalid()) && ((v0.h) || (!localB0.isRemoved())))
        {
          localB0.addFlags(32);
          return localB0;
        }
        j += 1;
      }
      if (!paramBoolean)
      {
        Object localObject = o.e(paramInt);
        if (localObject != null)
        {
          localB0 = RecyclerView.i0((View)localObject);
          o.s((View)localObject);
          paramInt = o.m((View)localObject);
          if (paramInt != -1)
          {
            o.d(paramInt);
            D((View)localObject);
            localB0.addFlags(8224);
            return localB0;
          }
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("layout index should not be -1 after unhiding a view:");
          ((StringBuilder)localObject).append(localB0);
          ((StringBuilder)localObject).append(Q());
          throw new IllegalStateException(((StringBuilder)localObject).toString());
        }
      }
      m = c.size();
      j = k;
      while (j < m)
      {
        localB0 = (RecyclerView.b0)c.get(j);
        if ((!localB0.isInvalid()) && (localB0.getLayoutPosition() == paramInt) && (!localB0.isAttachedToTransitionOverlay()))
        {
          if (!paramBoolean) {
            c.remove(j);
          }
          return localB0;
        }
        j += 1;
      }
      return null;
    }
    
    View n(int paramInt)
    {
      return a.get(paramInt)).itemView;
    }
    
    public View o(int paramInt)
    {
      return p(paramInt, false);
    }
    
    View p(int paramInt, boolean paramBoolean)
    {
      return IMAX_VALUEitemView;
    }
    
    void s()
    {
      int k = c.size();
      int j = 0;
      while (j < k)
      {
        RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)c.get(j)).itemView.getLayoutParams();
        if (localLayoutParams != null) {
          d = true;
        }
        j += 1;
      }
    }
    
    void t()
    {
      int k = c.size();
      int j = 0;
      while (j < k)
      {
        localObject = (RecyclerView.b0)c.get(j);
        if (localObject != null)
        {
          ((RecyclerView.b0)localObject).addFlags(6);
          ((RecyclerView.b0)localObject).addChangePayload(null);
        }
        j += 1;
      }
      Object localObject = v;
      if ((localObject == null) || (!((RecyclerView.Adapter)localObject).hasStableIds())) {
        z();
      }
    }
    
    void u(int paramInt1, int paramInt2)
    {
      int k = c.size();
      int j = 0;
      while (j < k)
      {
        RecyclerView.b0 localB0 = (RecyclerView.b0)c.get(j);
        if ((localB0 != null) && (mPosition >= paramInt1)) {
          localB0.offsetPosition(paramInt2, false);
        }
        j += 1;
      }
    }
    
    void v(int paramInt1, int paramInt2)
    {
      int j;
      int k;
      int m;
      if (paramInt1 < paramInt2)
      {
        j = -1;
        k = paramInt1;
        m = paramInt2;
      }
      else
      {
        j = 1;
        m = paramInt1;
        k = paramInt2;
      }
      int i1 = c.size();
      int n = 0;
      while (n < i1)
      {
        RecyclerView.b0 localB0 = (RecyclerView.b0)c.get(n);
        if (localB0 != null)
        {
          int i2 = mPosition;
          if ((i2 >= k) && (i2 <= m)) {
            if (i2 == paramInt1) {
              localB0.offsetPosition(paramInt2 - paramInt1, false);
            } else {
              localB0.offsetPosition(j, false);
            }
          }
        }
        n += 1;
      }
    }
    
    void w(int paramInt1, int paramInt2, boolean paramBoolean)
    {
      int j = c.size() - 1;
      while (j >= 0)
      {
        RecyclerView.b0 localB0 = (RecyclerView.b0)c.get(j);
        if (localB0 != null)
        {
          int k = mPosition;
          if (k >= paramInt1 + paramInt2)
          {
            localB0.offsetPosition(-paramInt2, paramBoolean);
          }
          else if (k >= paramInt1)
          {
            localB0.addFlags(8);
            A(j);
          }
        }
        j -= 1;
      }
    }
    
    void x(RecyclerView.Adapter paramAdapter1, RecyclerView.Adapter paramAdapter2, boolean paramBoolean)
    {
      c();
      i().h(paramAdapter1, paramAdapter2, paramBoolean);
    }
    
    void y(View paramView)
    {
      paramView = RecyclerView.i0(paramView);
      mScrapContainer = null;
      mInChangeScrap = false;
      paramView.clearReturnedFromScrapFlag();
      C(paramView);
    }
    
    void z()
    {
      int j = c.size() - 1;
      while (j >= 0)
      {
        A(j);
        j -= 1;
      }
      c.clear();
      if (RecyclerView.f) {
        u0.b();
      }
    }
  }
  
  public static abstract interface v
  {
    public abstract void a(RecyclerView.b0 paramB0);
  }
  
  private class w
    extends RecyclerView.i
  {
    w() {}
    
    public void a()
    {
      p(null);
      RecyclerView localRecyclerView = RecyclerView.this;
      v0.g = true;
      localRecyclerView.S0(true);
      if (!n.p()) {
        requestLayout();
      }
    }
    
    public void c(int paramInt1, int paramInt2, Object paramObject)
    {
      p(null);
      if (n.r(paramInt1, paramInt2, paramObject)) {
        g();
      }
    }
    
    public void d(int paramInt1, int paramInt2)
    {
      p(null);
      if (n.s(paramInt1, paramInt2)) {
        g();
      }
    }
    
    public void e(int paramInt1, int paramInt2, int paramInt3)
    {
      p(null);
      if (n.t(paramInt1, paramInt2, paramInt3)) {
        g();
      }
    }
    
    public void f(int paramInt1, int paramInt2)
    {
      p(null);
      if (n.u(paramInt1, paramInt2)) {
        g();
      }
    }
    
    void g()
    {
      if (RecyclerView.e)
      {
        localRecyclerView = RecyclerView.this;
        if ((D) && (C))
        {
          f0.h0(localRecyclerView, r);
          return;
        }
      }
      RecyclerView localRecyclerView = RecyclerView.this;
      L = true;
      localRecyclerView.requestLayout();
    }
  }
  
  public static abstract class x
  {
    private int a = -1;
    private RecyclerView b;
    private RecyclerView.o c;
    private boolean d;
    private boolean e;
    private View f;
    private final a g = new a(0, 0);
    private boolean h;
    
    public x() {}
    
    public PointF a(int paramInt)
    {
      Object localObject = e();
      if ((localObject instanceof b)) {
        return ((b)localObject).d(paramInt);
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("You should override computeScrollVectorForPosition when the LayoutManager does not implement ");
      ((StringBuilder)localObject).append(b.class.getCanonicalName());
      Log.w("RecyclerView", ((StringBuilder)localObject).toString());
      return null;
    }
    
    public View b(int paramInt)
    {
      return b.w.Z(paramInt);
    }
    
    public int c()
    {
      return b.w.g0();
    }
    
    public int d(View paramView)
    {
      return b.g0(paramView);
    }
    
    public RecyclerView.o e()
    {
      return c;
    }
    
    public int f()
    {
      return a;
    }
    
    public boolean g()
    {
      return d;
    }
    
    public boolean h()
    {
      return e;
    }
    
    protected void i(PointF paramPointF)
    {
      float f1 = x;
      float f2 = y;
      f1 = (float)Math.sqrt(f1 * f1 + f2 * f2);
      x /= f1;
      y /= f1;
    }
    
    void j(int paramInt1, int paramInt2)
    {
      RecyclerView localRecyclerView = b;
      if ((a == -1) || (localRecyclerView == null)) {
        r();
      }
      if ((d) && (f == null) && (c != null))
      {
        localObject = a(a);
        if (localObject != null)
        {
          float f1 = x;
          if ((f1 != 0.0F) || (y != 0.0F)) {
            localRecyclerView.k1((int)Math.signum(f1), (int)Math.signum(y), null);
          }
        }
      }
      d = false;
      Object localObject = f;
      if (localObject != null) {
        if (d((View)localObject) == a)
        {
          o(f, v0, g);
          g.c(localRecyclerView);
          r();
        }
        else
        {
          Log.e("RecyclerView", "Passed over target position while smooth scrolling.");
          f = null;
        }
      }
      if (e)
      {
        l(paramInt1, paramInt2, v0, g);
        boolean bool = g.a();
        g.c(localRecyclerView);
        if ((bool) && (e))
        {
          d = true;
          s0.d();
        }
      }
    }
    
    protected void k(View paramView)
    {
      if (d(paramView) == f()) {
        f = paramView;
      }
    }
    
    protected abstract void l(int paramInt1, int paramInt2, RecyclerView.y paramY, a paramA);
    
    protected abstract void m();
    
    protected abstract void n();
    
    protected abstract void o(View paramView, RecyclerView.y paramY, a paramA);
    
    public void p(int paramInt)
    {
      a = paramInt;
    }
    
    void q(RecyclerView paramRecyclerView, RecyclerView.o paramO)
    {
      s0.f();
      if (h)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("An instance of ");
        localStringBuilder.append(getClass().getSimpleName());
        localStringBuilder.append(" was started more than once. Each instance of");
        localStringBuilder.append(getClass().getSimpleName());
        localStringBuilder.append(" is intended to only be used once. You should create a new instance for each use.");
        Log.w("RecyclerView", localStringBuilder.toString());
      }
      b = paramRecyclerView;
      c = paramO;
      int i = a;
      if (i != -1)
      {
        v0.a = i;
        e = true;
        d = true;
        f = b(f());
        m();
        b.s0.d();
        h = true;
        return;
      }
      throw new IllegalArgumentException("Invalid target position");
    }
    
    protected final void r()
    {
      if (!e) {
        return;
      }
      e = false;
      n();
      b.v0.a = -1;
      f = null;
      a = -1;
      d = false;
      c.z1(this);
      c = null;
      b = null;
    }
    
    public static class a
    {
      private int a;
      private int b;
      private int c;
      private int d = -1;
      private Interpolator e;
      private boolean f = false;
      private int g = 0;
      
      public a(int paramInt1, int paramInt2)
      {
        this(paramInt1, paramInt2, Integer.MIN_VALUE, null);
      }
      
      public a(int paramInt1, int paramInt2, int paramInt3, Interpolator paramInterpolator)
      {
        a = paramInt1;
        b = paramInt2;
        c = paramInt3;
        e = paramInterpolator;
      }
      
      private void e()
      {
        if ((e != null) && (c < 1)) {
          throw new IllegalStateException("If you provide an interpolator, you must set a positive duration");
        }
        if (c >= 1) {
          return;
        }
        throw new IllegalStateException("Scroll duration must be a positive number");
      }
      
      boolean a()
      {
        return d >= 0;
      }
      
      public void b(int paramInt)
      {
        d = paramInt;
      }
      
      void c(RecyclerView paramRecyclerView)
      {
        int i = d;
        if (i >= 0)
        {
          d = -1;
          paramRecyclerView.y0(i);
          f = false;
          return;
        }
        if (f)
        {
          e();
          s0.e(a, b, c, e);
          i = g + 1;
          g = i;
          if (i > 10) {
            Log.e("RecyclerView", "Smooth Scroll action is being updated too frequently. Make sure you are not changing it unless necessary");
          }
          f = false;
          return;
        }
        g = 0;
      }
      
      public void d(int paramInt1, int paramInt2, int paramInt3, Interpolator paramInterpolator)
      {
        a = paramInt1;
        b = paramInt2;
        c = paramInt3;
        e = paramInterpolator;
        f = true;
      }
    }
    
    public static abstract interface b
    {
      public abstract PointF d(int paramInt);
    }
  }
  
  public static class y
  {
    int a = -1;
    private SparseArray<Object> b;
    int c = 0;
    int d = 0;
    int e = 1;
    int f = 0;
    boolean g = false;
    boolean h = false;
    boolean i = false;
    boolean j = false;
    boolean k = false;
    boolean l = false;
    int m;
    long n;
    int o;
    int p;
    int q;
    
    public y() {}
    
    void a(int paramInt)
    {
      if ((e & paramInt) != 0) {
        return;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Layout state should be one of ");
      localStringBuilder.append(Integer.toBinaryString(paramInt));
      localStringBuilder.append(" but it is ");
      localStringBuilder.append(Integer.toBinaryString(e));
      throw new IllegalStateException(localStringBuilder.toString());
    }
    
    public int b()
    {
      if (h) {
        return c - d;
      }
      return f;
    }
    
    public int c()
    {
      return a;
    }
    
    public boolean d()
    {
      return a != -1;
    }
    
    public boolean e()
    {
      return h;
    }
    
    void f(RecyclerView.Adapter paramAdapter)
    {
      e = 1;
      f = paramAdapter.getItemCount();
      h = false;
      i = false;
      j = false;
    }
    
    public boolean g()
    {
      return l;
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("State{mTargetPosition=");
      localStringBuilder.append(a);
      localStringBuilder.append(", mData=");
      localStringBuilder.append(b);
      localStringBuilder.append(", mItemCount=");
      localStringBuilder.append(f);
      localStringBuilder.append(", mIsMeasuring=");
      localStringBuilder.append(j);
      localStringBuilder.append(", mPreviousLayoutItemCount=");
      localStringBuilder.append(c);
      localStringBuilder.append(", mDeletedInvisibleItemCountSincePreviousLayout=");
      localStringBuilder.append(d);
      localStringBuilder.append(", mStructureChanged=");
      localStringBuilder.append(g);
      localStringBuilder.append(", mInPreLayout=");
      localStringBuilder.append(h);
      localStringBuilder.append(", mRunSimpleAnimations=");
      localStringBuilder.append(k);
      localStringBuilder.append(", mRunPredictiveAnimations=");
      localStringBuilder.append(l);
      localStringBuilder.append('}');
      return localStringBuilder.toString();
    }
  }
  
  public static abstract class z {}
}
