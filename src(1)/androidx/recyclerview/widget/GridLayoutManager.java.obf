package androidx.recyclerview.widget;

import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseIntArray;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import c.h.q.p0.c;
import c.h.q.p0.c.c;
import java.util.Arrays;

public class GridLayoutManager
  extends LinearLayoutManager
{
  boolean I = false;
  int J = -1;
  int[] K;
  View[] L;
  final SparseIntArray M = new SparseIntArray();
  final SparseIntArray N = new SparseIntArray();
  b O = new a();
  final Rect P = new Rect();
  private boolean Q;
  
  public GridLayoutManager(Context paramContext, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    super(paramContext, paramInt2, paramBoolean);
    A3(paramInt1);
  }
  
  public GridLayoutManager(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2)
  {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    A3(B0b);
  }
  
  private void B3()
  {
    int i;
    int j;
    if (K2() == 1)
    {
      i = H0() - p();
      j = v();
    }
    else
    {
      i = t0() - a();
      j = u();
    }
    l3(i - j);
  }
  
  private void j3(RecyclerView.u paramU, RecyclerView.y paramY, int paramInt, boolean paramBoolean)
  {
    int k = 0;
    int i = -1;
    int j;
    int m;
    if (paramBoolean)
    {
      j = 1;
      m = 0;
      i = paramInt;
      paramInt = m;
    }
    else
    {
      paramInt -= 1;
      j = -1;
    }
    while (paramInt != i)
    {
      View localView = L[paramInt];
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      m = w3(paramU, paramY, A0(localView));
      g = m;
      f = k;
      k += m;
      paramInt += j;
    }
  }
  
  private void k3()
  {
    int j = g0();
    int i = 0;
    while (i < j)
    {
      LayoutParams localLayoutParams = (LayoutParams)f0(i).getLayoutParams();
      int k = localLayoutParams.a();
      M.put(k, localLayoutParams.f());
      N.put(k, localLayoutParams.e());
      i += 1;
    }
  }
  
  private void l3(int paramInt)
  {
    K = m3(K, J, paramInt);
  }
  
  static int[] m3(int[] paramArrayOfInt, int paramInt1, int paramInt2)
  {
    int j = 1;
    int[] arrayOfInt;
    if ((paramArrayOfInt != null) && (paramArrayOfInt.length == paramInt1 + 1))
    {
      arrayOfInt = paramArrayOfInt;
      if (paramArrayOfInt[(paramArrayOfInt.length - 1)] == paramInt2) {}
    }
    else
    {
      arrayOfInt = new int[paramInt1 + 1];
    }
    int k = 0;
    arrayOfInt[0] = 0;
    int m = paramInt2 / paramInt1;
    int n = paramInt2 % paramInt1;
    int i = 0;
    paramInt2 = k;
    while (j <= paramInt1)
    {
      paramInt2 += n;
      if ((paramInt2 > 0) && (paramInt1 - paramInt2 < n))
      {
        k = m + 1;
        paramInt2 -= paramInt1;
      }
      else
      {
        k = m;
      }
      i += k;
      arrayOfInt[j] = i;
      j += 1;
    }
    return arrayOfInt;
  }
  
  private void n3()
  {
    M.clear();
    N.clear();
  }
  
  private int o3(RecyclerView.y paramY)
  {
    if (g0() != 0)
    {
      if (paramY.b() == 0) {
        return 0;
      }
      q2();
      boolean bool = M2();
      View localView1 = v2(bool ^ true, true);
      View localView2 = u2(bool ^ true, true);
      if (localView1 != null)
      {
        if (localView2 == null) {
          return 0;
        }
        int j = O.b(A0(localView1), J);
        int k = O.b(A0(localView2), J);
        int i = Math.min(j, k);
        j = Math.max(j, k);
        k = O.b(paramY.b() - 1, J);
        if (x) {
          i = Math.max(0, k + 1 - j - 1);
        } else {
          i = Math.max(0, i);
        }
        if (!bool) {
          return i;
        }
        j = Math.abs(u.d(localView2) - u.g(localView1));
        k = O.b(A0(localView1), J);
        int m = O.b(A0(localView2), J);
        float f = j / (m - k + 1);
        return Math.round(i * f + (u.m() - u.g(localView1)));
      }
    }
    return 0;
  }
  
  private int p3(RecyclerView.y paramY)
  {
    if (g0() != 0)
    {
      if (paramY.b() == 0) {
        return 0;
      }
      q2();
      View localView1 = v2(M2() ^ true, true);
      View localView2 = u2(M2() ^ true, true);
      if (localView1 != null)
      {
        if (localView2 == null) {
          return 0;
        }
        if (!M2()) {
          return O.b(paramY.b() - 1, J) + 1;
        }
        int i = u.d(localView2);
        int j = u.g(localView1);
        int k = O.b(A0(localView1), J);
        int m = O.b(A0(localView2), J);
        int n = O.b(paramY.b() - 1, J);
        return (int)((i - j) / (m - k + 1) * (n + 1));
      }
    }
    return 0;
  }
  
  private void q3(RecyclerView.u paramU, RecyclerView.y paramY, LinearLayoutManager.a paramA, int paramInt)
  {
    if (paramInt == 1) {
      paramInt = 1;
    } else {
      paramInt = 0;
    }
    int i = v3(paramU, paramY, b);
    if (paramInt != 0) {
      while (i > 0)
      {
        paramInt = b;
        if (paramInt <= 0) {
          break;
        }
        paramInt -= 1;
        b = paramInt;
        i = v3(paramU, paramY, paramInt);
      }
    }
    int m = paramY.b();
    paramInt = b;
    while (paramInt < m - 1)
    {
      int k = paramInt + 1;
      int j = v3(paramU, paramY, k);
      if (j <= i) {
        break;
      }
      paramInt = k;
      i = j;
    }
    b = paramInt;
  }
  
  private void r3()
  {
    View[] arrayOfView = L;
    if ((arrayOfView == null) || (arrayOfView.length != J)) {
      L = new View[J];
    }
  }
  
  private int u3(RecyclerView.u paramU, RecyclerView.y paramY, int paramInt)
  {
    if (!paramY.e()) {
      return O.b(paramInt, J);
    }
    int i = paramU.f(paramInt);
    if (i == -1)
    {
      paramU = new StringBuilder();
      paramU.append("Cannot find span size for pre layout position. ");
      paramU.append(paramInt);
      Log.w("GridLayoutManager", paramU.toString());
      return 0;
    }
    return O.b(i, J);
  }
  
  private int v3(RecyclerView.u paramU, RecyclerView.y paramY, int paramInt)
  {
    if (!paramY.e()) {
      return O.c(paramInt, J);
    }
    int i = N.get(paramInt, -1);
    if (i != -1) {
      return i;
    }
    i = paramU.f(paramInt);
    if (i == -1)
    {
      paramU = new StringBuilder();
      paramU.append("Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:");
      paramU.append(paramInt);
      Log.w("GridLayoutManager", paramU.toString());
      return 0;
    }
    return O.c(i, J);
  }
  
  private int w3(RecyclerView.u paramU, RecyclerView.y paramY, int paramInt)
  {
    if (!paramY.e()) {
      return O.f(paramInt);
    }
    int i = M.get(paramInt, -1);
    if (i != -1) {
      return i;
    }
    i = paramU.f(paramInt);
    if (i == -1)
    {
      paramU = new StringBuilder();
      paramU.append("Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:");
      paramU.append(paramInt);
      Log.w("GridLayoutManager", paramU.toString());
      return 1;
    }
    return O.f(i);
  }
  
  private void x3(float paramFloat, int paramInt)
  {
    l3(Math.max(Math.round(paramFloat * J), paramInt));
  }
  
  private void y3(View paramView, int paramInt, boolean paramBoolean)
  {
    LayoutParams localLayoutParams = (LayoutParams)paramView.getLayoutParams();
    Rect localRect = c;
    int j = top + bottom + topMargin + bottomMargin;
    int i = left + right + leftMargin + rightMargin;
    int k = s3(f, g);
    if (s == 1)
    {
      i = RecyclerView.o.h0(k, paramInt, i, width, false);
      paramInt = RecyclerView.o.h0(u.n(), u0(), j, height, true);
    }
    else
    {
      paramInt = RecyclerView.o.h0(k, paramInt, j, height, false);
      i = RecyclerView.o.h0(u.n(), I0(), i, width, true);
    }
    z3(paramView, i, paramInt, paramBoolean);
  }
  
  private void z3(View paramView, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    RecyclerView.LayoutParams localLayoutParams = (RecyclerView.LayoutParams)paramView.getLayoutParams();
    if (paramBoolean) {
      paramBoolean = e2(paramView, paramInt1, paramInt2, localLayoutParams);
    } else {
      paramBoolean = c2(paramView, paramInt1, paramInt2, localLayoutParams);
    }
    if (paramBoolean) {
      paramView.measure(paramInt1, paramInt2);
    }
  }
  
  public void A3(int paramInt)
  {
    if (paramInt == J) {
      return;
    }
    I = true;
    if (paramInt >= 1)
    {
      J = paramInt;
      O.h();
      O1();
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Span count should be at least 1. Provided ");
    localStringBuilder.append(paramInt);
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public int D0(RecyclerView.u paramU, RecyclerView.y paramY)
  {
    if (s == 0) {
      return J;
    }
    if (paramY.b() < 1) {
      return 0;
    }
    return u3(paramU, paramY, paramY.b() - 1) + 1;
  }
  
  View E2(RecyclerView.u paramU, RecyclerView.y paramY, boolean paramBoolean1, boolean paramBoolean2)
  {
    int i = g0();
    int j = -1;
    int k = 1;
    if (paramBoolean2)
    {
      i = g0() - 1;
      k = -1;
    }
    else
    {
      j = i;
      i = 0;
    }
    int m = paramY.b();
    q2();
    int n = u.m();
    int i1 = u.i();
    Object localObject2 = null;
    Object localObject4;
    for (Object localObject1 = null; i != j; localObject1 = localObject4)
    {
      View localView = f0(i);
      int i2 = A0(localView);
      Object localObject3 = localObject2;
      localObject4 = localObject1;
      if (i2 >= 0)
      {
        localObject3 = localObject2;
        localObject4 = localObject1;
        if (i2 < m) {
          if (v3(paramU, paramY, i2) != 0)
          {
            localObject3 = localObject2;
            localObject4 = localObject1;
          }
          else if (((RecyclerView.LayoutParams)localView.getLayoutParams()).c())
          {
            localObject3 = localObject2;
            localObject4 = localObject1;
            if (localObject1 == null)
            {
              localObject4 = localView;
              localObject3 = localObject2;
            }
          }
          else
          {
            if ((u.g(localView) < i1) && (u.d(localView) >= n)) {
              return localView;
            }
            localObject3 = localObject2;
            localObject4 = localObject1;
            if (localObject2 == null)
            {
              localObject3 = localView;
              localObject4 = localObject1;
            }
          }
        }
      }
      i += k;
      localObject2 = localObject3;
    }
    if (localObject2 != null) {
      return localObject2;
    }
    return localObject1;
  }
  
  public boolean J(RecyclerView.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof LayoutParams;
  }
  
  void N2(RecyclerView.u paramU, RecyclerView.y paramY, LinearLayoutManager.c paramC, LinearLayoutManager.b paramB)
  {
    int i3 = u.l();
    int k;
    if (i3 != 1073741824) {
      k = 1;
    } else {
      k = 0;
    }
    int m;
    if (g0() > 0) {
      m = K[J];
    } else {
      m = 0;
    }
    if (k != 0) {
      B3();
    }
    boolean bool;
    if (e == 1) {
      bool = true;
    } else {
      bool = false;
    }
    int i = J;
    if (!bool) {
      i = v3(paramU, paramY, d) + w3(paramU, paramY, d);
    }
    int i1 = 0;
    int n;
    Object localObject;
    while ((i1 < J) && (paramC.c(paramY)) && (i > 0))
    {
      j = d;
      n = w3(paramU, paramY, j);
      if (n <= J)
      {
        i -= n;
        if (i >= 0)
        {
          localObject = paramC.d(paramU);
          if (localObject != null)
          {
            L[i1] = localObject;
            i1 += 1;
          }
        }
      }
      else
      {
        paramU = new StringBuilder();
        paramU.append("Item at position ");
        paramU.append(j);
        paramU.append(" requires ");
        paramU.append(n);
        paramU.append(" spans but GridLayoutManager has only ");
        paramU.append(J);
        paramU.append(" spans.");
        throw new IllegalArgumentException(paramU.toString());
      }
    }
    if (i1 == 0)
    {
      b = true;
      return;
    }
    float f1 = 0.0F;
    j3(paramU, paramY, i1, bool);
    int j = 0;
    i = j;
    while (j < i1)
    {
      paramU = L[j];
      if (l == null)
      {
        if (bool) {
          A(paramU);
        } else {
          B(paramU, 0);
        }
      }
      else if (bool) {
        y(paramU);
      } else {
        z(paramU, 0);
      }
      G(paramU, P);
      y3(paramU, i3, false);
      i2 = u.e(paramU);
      n = i;
      if (i2 > i) {
        n = i2;
      }
      paramY = (LayoutParams)paramU.getLayoutParams();
      float f3 = u.f(paramU) * 1.0F / g;
      float f2 = f1;
      if (f3 > f1) {
        f2 = f3;
      }
      j += 1;
      i = n;
      f1 = f2;
    }
    j = i;
    if (k != 0)
    {
      x3(f1, m);
      k = 0;
      for (i = 0;; i = j)
      {
        j = i;
        if (k >= i1) {
          break;
        }
        paramU = L[k];
        y3(paramU, 1073741824, true);
        m = u.e(paramU);
        j = i;
        if (m > i) {
          j = m;
        }
        k += 1;
      }
    }
    i = 0;
    while (i < i1)
    {
      paramU = L[i];
      if (u.e(paramU) != j)
      {
        paramY = (LayoutParams)paramU.getLayoutParams();
        localObject = c;
        m = top + bottom + topMargin + bottomMargin;
        k = left + right + leftMargin + rightMargin;
        n = s3(f, g);
        if (s == 1)
        {
          k = RecyclerView.o.h0(n, 1073741824, k, width, false);
          m = View.MeasureSpec.makeMeasureSpec(j - m, 1073741824);
        }
        else
        {
          k = View.MeasureSpec.makeMeasureSpec(j - k, 1073741824);
          m = RecyclerView.o.h0(n, 1073741824, m, height, false);
        }
        z3(paramU, k, m, true);
      }
      i += 1;
    }
    int i2 = 0;
    a = j;
    if (s == 1)
    {
      if (f == -1)
      {
        i = b;
        j = i - j;
      }
      else
      {
        k = b;
        i = k;
        k = j + k;
        j = i;
        i = k;
      }
      k = 0;
      m = k;
    }
    else if (f == -1)
    {
      k = b;
      m = k - j;
      j = 0;
      i = j;
    }
    else
    {
      m = b;
      k = j + m;
      i = 0;
      j = i;
    }
    while (i2 < i1)
    {
      paramU = L[i2];
      paramY = (LayoutParams)paramU.getLayoutParams();
      if (s == 1)
      {
        if (L2())
        {
          k = v() + K[(J - f)];
          n = u.f(paramU);
          m = k;
          k -= n;
        }
        else
        {
          m = v() + K[f];
          n = u.f(paramU);
          k = m;
          m = n + m;
        }
        n = i;
        i = j;
        j = k;
      }
      else
      {
        n = u() + K[f];
        i3 = u.f(paramU);
        i = n;
        j = m;
        n = i3 + n;
        m = k;
      }
      T0(paramU, j, i, m, n);
      if ((paramY.c()) || (paramY.b())) {
        c = true;
      }
      d |= paramU.hasFocusable();
      i3 = i2 + 1;
      k = m;
      i2 = i;
      i = n;
      m = j;
      j = i2;
      i2 = i3;
    }
    Arrays.fill(L, null);
  }
  
  public int O(RecyclerView.y paramY)
  {
    if (Q) {
      return o3(paramY);
    }
    return super.O(paramY);
  }
  
  public int P(RecyclerView.y paramY)
  {
    if (Q) {
      return p3(paramY);
    }
    return super.P(paramY);
  }
  
  void P2(RecyclerView.u paramU, RecyclerView.y paramY, LinearLayoutManager.a paramA, int paramInt)
  {
    super.P2(paramU, paramY, paramA, paramInt);
    B3();
    if ((paramY.b() > 0) && (!paramY.e())) {
      q3(paramU, paramY, paramA, paramInt);
    }
    r3();
  }
  
  public int R(RecyclerView.y paramY)
  {
    if (Q) {
      return o3(paramY);
    }
    return super.R(paramY);
  }
  
  public int R1(int paramInt, RecyclerView.u paramU, RecyclerView.y paramY)
  {
    B3();
    r3();
    return super.R1(paramInt, paramU, paramY);
  }
  
  public int S(RecyclerView.y paramY)
  {
    if (Q) {
      return p3(paramY);
    }
    return super.S(paramY);
  }
  
  public int T1(int paramInt, RecyclerView.u paramU, RecyclerView.y paramY)
  {
    B3();
    r3();
    return super.T1(paramInt, paramU, paramY);
  }
  
  public void Z1(Rect paramRect, int paramInt1, int paramInt2)
  {
    if (K == null) {
      super.Z1(paramRect, paramInt1, paramInt2);
    }
    int i = v() + p();
    int j = u() + a();
    if (s == 1)
    {
      paramInt2 = RecyclerView.o.K(paramInt2, paramRect.height() + j, y0());
      paramRect = K;
      i = RecyclerView.o.K(paramInt1, paramRect[(paramRect.length - 1)] + i, z0());
      paramInt1 = paramInt2;
      paramInt2 = i;
    }
    else
    {
      paramInt1 = RecyclerView.o.K(paramInt1, paramRect.width() + i, z0());
      paramRect = K;
      i = RecyclerView.o.K(paramInt2, paramRect[(paramRect.length - 1)] + j, y0());
      paramInt2 = paramInt1;
      paramInt1 = i;
    }
    Y1(paramInt2, paramInt1);
  }
  
  public RecyclerView.LayoutParams a0()
  {
    if (s == 0) {
      return new LayoutParams(-2, -1);
    }
    return new LayoutParams(-1, -2);
  }
  
  public void a3(boolean paramBoolean)
  {
    if (!paramBoolean)
    {
      super.a3(false);
      return;
    }
    throw new UnsupportedOperationException("GridLayoutManager does not support stack from end. Consider using reverse layout");
  }
  
  public RecyclerView.LayoutParams b0(Context paramContext, AttributeSet paramAttributeSet)
  {
    return new LayoutParams(paramContext, paramAttributeSet);
  }
  
  public RecyclerView.LayoutParams c0(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new LayoutParams(paramLayoutParams);
  }
  
  public View d1(View paramView, int paramInt, RecyclerView.u paramU, RecyclerView.y paramY)
  {
    View localView = Y(paramView);
    Object localObject1 = null;
    if (localView == null) {
      return null;
    }
    Object localObject2 = (LayoutParams)localView.getLayoutParams();
    int i6 = f;
    int i7 = g + i6;
    if (super.d1(paramView, paramInt, paramU, paramY) == null) {
      return null;
    }
    int i12;
    if (o2(paramInt) == 1) {
      i12 = 1;
    } else {
      i12 = 0;
    }
    if (i12 != x) {
      paramInt = 1;
    } else {
      paramInt = 0;
    }
    int m;
    if (paramInt != 0)
    {
      paramInt = g0() - 1;
      i = -1;
      m = i;
    }
    else
    {
      i = g0();
      m = 1;
      paramInt = 0;
    }
    int n;
    if ((s == 1) && (L2())) {
      n = 1;
    } else {
      n = 0;
    }
    int i8 = u3(paramU, paramY, paramInt);
    int i3 = -1;
    int j = i3;
    int k = 0;
    int i1 = 0;
    int i2 = paramInt;
    paramView = null;
    paramInt = i1;
    i1 = i;
    int i = k;
    while (i2 != i1)
    {
      k = u3(paramU, paramY, i2);
      localObject2 = f0(i2);
      if (localObject2 == localView) {
        break;
      }
      if ((((View)localObject2).hasFocusable()) && (k != i8))
      {
        if (localObject1 != null) {
          break;
        }
      }
      else
      {
        LayoutParams localLayoutParams = (LayoutParams)((View)localObject2).getLayoutParams();
        int i9 = f;
        int i10 = g + i9;
        if ((((View)localObject2).hasFocusable()) && (i9 == i6) && (i10 == i7)) {
          return localObject2;
        }
        if (((((View)localObject2).hasFocusable()) && (localObject1 == null)) || ((!((View)localObject2).hasFocusable()) && (paramView == null))) {}
        for (;;)
        {
          k = 1;
          break label479;
          k = Math.max(i9, i6);
          int i11 = Math.min(i10, i7) - k;
          if (((View)localObject2).hasFocusable())
          {
            if (i11 <= i) {
              while (i11 == i)
              {
                if (i9 > i3) {
                  k = 1;
                } else {
                  k = 0;
                }
                if (n != k) {
                  break;
                }
              }
            }
          }
          else
          {
            if (localObject1 != null) {
              break;
            }
            int i5 = 1;
            k = 1;
            if (!S0((View)localObject2, false, true)) {
              break;
            }
            int i4 = paramInt;
            if (i11 > i4)
            {
              k = i5;
              break label479;
            }
            if (i11 != i4) {
              break;
            }
            if (i9 <= j) {
              k = 0;
            }
            if (n != k) {
              break;
            }
          }
        }
        k = 0;
        label479:
        if (k != 0) {
          if (((View)localObject2).hasFocusable())
          {
            i3 = f;
            i = Math.min(i10, i7);
            k = Math.max(i9, i6);
            localObject1 = localObject2;
            i -= k;
          }
          else
          {
            j = f;
            paramInt = Math.min(i10, i7) - Math.max(i9, i6);
            paramView = (View)localObject2;
          }
        }
      }
      i2 += m;
    }
    if (localObject1 != null) {
      return localObject1;
    }
    return paramView;
  }
  
  public boolean i2()
  {
    return (D == null) && (!I);
  }
  
  public void j1(RecyclerView.u paramU, RecyclerView.y paramY, View paramView, c paramC)
  {
    ViewGroup.LayoutParams localLayoutParams = paramView.getLayoutParams();
    if (!(localLayoutParams instanceof LayoutParams))
    {
      super.i1(paramView, paramC);
      return;
    }
    paramView = (LayoutParams)localLayoutParams;
    int i = u3(paramU, paramY, paramView.a());
    if (s == 0)
    {
      paramC.b0(c.c.a(paramView.e(), paramView.f(), i, 1, false, false));
      return;
    }
    paramC.b0(c.c.a(i, 1, paramView.e(), paramView.f(), false, false));
  }
  
  public int k0(RecyclerView.u paramU, RecyclerView.y paramY)
  {
    if (s == 1) {
      return J;
    }
    if (paramY.b() < 1) {
      return 0;
    }
    return u3(paramU, paramY, paramY.b() - 1) + 1;
  }
  
  void k2(RecyclerView.y paramY, LinearLayoutManager.c paramC, RecyclerView.o.c paramC1)
  {
    int j = J;
    int i = 0;
    while ((i < J) && (paramC.c(paramY)) && (j > 0))
    {
      int k = d;
      paramC1.a(k, Math.max(0, g));
      j -= O.f(k);
      d += e;
      i += 1;
    }
  }
  
  public void l1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
  {
    O.h();
    O.g();
  }
  
  public void m1(RecyclerView paramRecyclerView)
  {
    O.h();
    O.g();
  }
  
  public void n1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2, int paramInt3)
  {
    O.h();
    O.g();
  }
  
  public void o1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2)
  {
    O.h();
    O.g();
  }
  
  public void q1(RecyclerView paramRecyclerView, int paramInt1, int paramInt2, Object paramObject)
  {
    O.h();
    O.g();
  }
  
  public void r1(RecyclerView.u paramU, RecyclerView.y paramY)
  {
    if (paramY.e()) {
      k3();
    }
    super.r1(paramU, paramY);
    n3();
  }
  
  public void s1(RecyclerView.y paramY)
  {
    super.s1(paramY);
    I = false;
  }
  
  int s3(int paramInt1, int paramInt2)
  {
    if ((s == 1) && (L2()))
    {
      arrayOfInt = K;
      int i = J;
      return arrayOfInt[(i - paramInt1)] - arrayOfInt[(i - paramInt1 - paramInt2)];
    }
    int[] arrayOfInt = K;
    return arrayOfInt[(paramInt2 + paramInt1)] - arrayOfInt[paramInt1];
  }
  
  public int t3()
  {
    return J;
  }
  
  public static class LayoutParams
    extends RecyclerView.LayoutParams
  {
    int f = -1;
    int g = 0;
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public LayoutParams(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    public int e()
    {
      return f;
    }
    
    public int f()
    {
      return g;
    }
  }
  
  public static final class a
    extends GridLayoutManager.b
  {
    public a() {}
    
    public int e(int paramInt1, int paramInt2)
    {
      return paramInt1 % paramInt2;
    }
    
    public int f(int paramInt)
    {
      return 1;
    }
  }
  
  public static abstract class b
  {
    final SparseIntArray a = new SparseIntArray();
    final SparseIntArray b = new SparseIntArray();
    private boolean c = false;
    private boolean d = false;
    
    public b() {}
    
    static int a(SparseIntArray paramSparseIntArray, int paramInt)
    {
      int j = paramSparseIntArray.size() - 1;
      int i = 0;
      while (i <= j)
      {
        int k = i + j >>> 1;
        if (paramSparseIntArray.keyAt(k) < paramInt) {
          i = k + 1;
        } else {
          j = k - 1;
        }
      }
      paramInt = i - 1;
      if ((paramInt >= 0) && (paramInt < paramSparseIntArray.size())) {
        return paramSparseIntArray.keyAt(paramInt);
      }
      return -1;
    }
    
    int b(int paramInt1, int paramInt2)
    {
      if (!d) {
        return d(paramInt1, paramInt2);
      }
      int i = b.get(paramInt1, -1);
      if (i != -1) {
        return i;
      }
      paramInt2 = d(paramInt1, paramInt2);
      b.put(paramInt1, paramInt2);
      return paramInt2;
    }
    
    int c(int paramInt1, int paramInt2)
    {
      if (!c) {
        return e(paramInt1, paramInt2);
      }
      int i = a.get(paramInt1, -1);
      if (i != -1) {
        return i;
      }
      paramInt2 = e(paramInt1, paramInt2);
      a.put(paramInt1, paramInt2);
      return paramInt2;
    }
    
    public int d(int paramInt1, int paramInt2)
    {
      int i1;
      if (d)
      {
        i = a(b, paramInt1);
        if (i != -1)
        {
          n = b.get(i);
          m = i + 1;
          i1 = c(i, paramInt2) + f(i);
          i = n;
          k = m;
          j = i1;
          if (i1 != paramInt2) {
            break label91;
          }
          i = n + 1;
          j = 0;
          k = m;
          break label91;
        }
      }
      int i = 0;
      int k = i;
      int j = k;
      label91:
      int i2 = f(paramInt1);
      int n = j;
      int m = k;
      j = i;
      while (m < paramInt1)
      {
        i1 = f(m);
        n += i1;
        if (n == paramInt2)
        {
          k = j + 1;
          i = 0;
        }
        else
        {
          k = j;
          i = n;
          if (n > paramInt2)
          {
            k = j + 1;
            i = i1;
          }
        }
        m += 1;
        j = k;
        n = i;
      }
      paramInt1 = j;
      if (n + i2 > paramInt2) {
        paramInt1 = j + 1;
      }
      return paramInt1;
    }
    
    public abstract int e(int paramInt1, int paramInt2);
    
    public abstract int f(int paramInt);
    
    public void g()
    {
      b.clear();
    }
    
    public void h()
    {
      a.clear();
    }
  }
}
