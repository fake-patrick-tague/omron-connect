package androidx.work;

import android.content.Context;
import androidx.annotation.Keep;
import androidx.work.impl.utils.futures.b;
import com.google.common.util.concurrent.c;
import java.util.UUID;
import java.util.concurrent.Executor;

public abstract class ListenableWorker
{
  private Context b;
  private WorkerParameters c;
  private volatile boolean d;
  private boolean e;
  private boolean f;
  
  @Keep
  public ListenableWorker(Context paramContext, WorkerParameters paramWorkerParameters)
  {
    if (paramContext != null)
    {
      if (paramWorkerParameters != null)
      {
        b = paramContext;
        c = paramWorkerParameters;
        return;
      }
      throw new IllegalArgumentException("WorkerParameters is null");
    }
    throw new IllegalArgumentException("Application Context is null");
  }
  
  public final Context a()
  {
    return b;
  }
  
  public Executor c()
  {
    return c.a();
  }
  
  public c<e> d()
  {
    b localB = b.t();
    localB.q(new IllegalStateException("Expedited WorkRequests require a ListenableWorker to provide an implementation for `getForegroundInfoAsync()`"));
    return localB;
  }
  
  public final UUID e()
  {
    return c.c();
  }
  
  public final d g()
  {
    return c.d();
  }
  
  public t h()
  {
    return c.e();
  }
  
  public boolean i()
  {
    return f;
  }
  
  public final boolean j()
  {
    return d;
  }
  
  public final boolean k()
  {
    return e;
  }
  
  public void l() {}
  
  public void m(boolean paramBoolean)
  {
    f = paramBoolean;
  }
  
  public final void n()
  {
    e = true;
  }
  
  public abstract c<a> o();
  
  public final void p()
  {
    d = true;
    l();
  }
  
  public static abstract class a
  {
    a() {}
    
    public static a a()
    {
      return new a();
    }
    
    public static a b()
    {
      return new b();
    }
    
    public static a c()
    {
      return new c();
    }
    
    public static a d(d paramD)
    {
      return new c(paramD);
    }
    
    public static final class a
      extends ListenableWorker.a
    {
      private final d a;
      
      public a()
      {
        this(d.b);
      }
      
      public a(d paramD)
      {
        a = paramD;
      }
      
      public d e()
      {
        return a;
      }
      
      public boolean equals(Object paramObject)
      {
        if (this == paramObject) {
          return true;
        }
        if ((paramObject != null) && (a.class == paramObject.getClass()))
        {
          paramObject = (a)paramObject;
          return a.equals(a);
        }
        return false;
      }
      
      public int hashCode()
      {
        return a.class.getName().hashCode() * 31 + a.hashCode();
      }
      
      public String toString()
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Failure {mOutputData=");
        localStringBuilder.append(a);
        localStringBuilder.append('}');
        return localStringBuilder.toString();
      }
    }
    
    public static final class b
      extends ListenableWorker.a
    {
      public b() {}
      
      public boolean equals(Object paramObject)
      {
        if (this == paramObject) {
          return true;
        }
        return (paramObject != null) && (b.class == paramObject.getClass());
      }
      
      public int hashCode()
      {
        return b.class.getName().hashCode();
      }
      
      public String toString()
      {
        return "Retry";
      }
    }
    
    public static final class c
      extends ListenableWorker.a
    {
      private final d a;
      
      public c()
      {
        this(d.b);
      }
      
      public c(d paramD)
      {
        a = paramD;
      }
      
      public d e()
      {
        return a;
      }
      
      public boolean equals(Object paramObject)
      {
        if (this == paramObject) {
          return true;
        }
        if ((paramObject != null) && (c.class == paramObject.getClass()))
        {
          paramObject = (c)paramObject;
          return a.equals(a);
        }
        return false;
      }
      
      public int hashCode()
      {
        return c.class.getName().hashCode() * 31 + a.hashCode();
      }
      
      public String toString()
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Success {mOutputData=");
        localStringBuilder.append(a);
        localStringBuilder.append('}');
        return localStringBuilder.toString();
      }
    }
  }
}
