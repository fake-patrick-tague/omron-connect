package androidx.work.impl.m.f;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.ConnectivityManager.NetworkCallback;
import android.net.Network;
import android.net.NetworkCapabilities;
import android.net.NetworkInfo;
import android.os.Build.VERSION;
import androidx.work.impl.m.b;
import androidx.work.j;

public class e
  extends d<b>
{
  static final String g = j.f("NetworkStateTracker");
  private final ConnectivityManager h = (ConnectivityManager)c.getSystemService("connectivity");
  private b i;
  private a j;
  
  public e(Context paramContext, androidx.work.impl.utils.p.a paramA)
  {
    super(paramContext, paramA);
    if (j())
    {
      i = new b();
      return;
    }
    j = new a();
  }
  
  private static boolean j()
  {
    return Build.VERSION.SDK_INT >= 24;
  }
  
  public void e()
  {
    if (j())
    {
      try
      {
        j.c().a(g, "Registering network callback", new Throwable[0]);
        h.registerDefaultNetworkCallback(i);
        return;
      }
      catch (SecurityException localSecurityException) {}catch (IllegalArgumentException localIllegalArgumentException) {}
      j.c().b(g, "Received exception while registering network callback", new Throwable[] { localIllegalArgumentException });
      return;
    }
    j.c().a(g, "Registering broadcast receiver", new Throwable[0]);
    c.registerReceiver(j, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
  }
  
  public void f()
  {
    if (j())
    {
      try
      {
        j.c().a(g, "Unregistering network callback", new Throwable[0]);
        h.unregisterNetworkCallback(i);
        return;
      }
      catch (SecurityException localSecurityException) {}catch (IllegalArgumentException localIllegalArgumentException) {}
      j.c().b(g, "Received exception while unregistering network callback", new Throwable[] { localIllegalArgumentException });
      return;
    }
    j.c().a(g, "Unregistering broadcast receiver", new Throwable[0]);
    c.unregisterReceiver(j);
  }
  
  b g()
  {
    NetworkInfo localNetworkInfo = h.getActiveNetworkInfo();
    boolean bool2 = true;
    boolean bool1;
    if ((localNetworkInfo != null) && (localNetworkInfo.isConnected())) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    boolean bool3 = i();
    boolean bool4 = c.h.l.a.a(h);
    if ((localNetworkInfo == null) || (localNetworkInfo.isRoaming())) {
      bool2 = false;
    }
    return new b(bool1, bool3, bool4, bool2);
  }
  
  public b h()
  {
    return g();
  }
  
  boolean i()
  {
    int k = Build.VERSION.SDK_INT;
    boolean bool2 = false;
    if (k < 23) {
      return false;
    }
    try
    {
      Object localObject = h.getActiveNetwork();
      localObject = h.getNetworkCapabilities((Network)localObject);
      boolean bool1 = bool2;
      if (localObject != null)
      {
        boolean bool3 = ((NetworkCapabilities)localObject).hasCapability(16);
        bool1 = bool2;
        if (bool3) {
          bool1 = true;
        }
      }
      return bool1;
    }
    catch (SecurityException localSecurityException)
    {
      j.c().b(g, "Unable to validate active network", new Throwable[] { localSecurityException });
    }
    return false;
  }
  
  private class a
    extends BroadcastReceiver
  {
    a() {}
    
    public void onReceive(Context paramContext, Intent paramIntent)
    {
      if (paramIntent != null)
      {
        if (paramIntent.getAction() == null) {
          return;
        }
        if (paramIntent.getAction().equals("android.net.conn.CONNECTIVITY_CHANGE"))
        {
          j.c().a(e.g, "Network broadcast received", new Throwable[0]);
          paramContext = e.this;
          paramContext.d(paramContext.g());
        }
      }
    }
  }
  
  private class b
    extends ConnectivityManager.NetworkCallback
  {
    b() {}
    
    public void onCapabilitiesChanged(Network paramNetwork, NetworkCapabilities paramNetworkCapabilities)
    {
      j.c().a(e.g, String.format("Network capabilities changed: %s", new Object[] { paramNetworkCapabilities }), new Throwable[0]);
      paramNetwork = e.this;
      paramNetwork.d(paramNetwork.g());
    }
    
    public void onLost(Network paramNetwork)
    {
      j.c().a(e.g, "Network connection lost", new Throwable[0]);
      paramNetwork = e.this;
      paramNetwork.d(paramNetwork.g());
    }
  }
}
