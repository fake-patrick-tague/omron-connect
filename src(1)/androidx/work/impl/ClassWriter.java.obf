package androidx.work.impl;

import android.content.Context;
import android.os.PowerManager.WakeLock;
import androidx.work.WorkerParameters.a;
import androidx.work.impl.utils.g;
import androidx.work.j;
import com.google.common.util.concurrent.c;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public class d
  implements b, androidx.work.impl.foreground.a
{
  private static final String b = j.f("Processor");
  private PowerManager.WakeLock c;
  private Context d;
  private androidx.work.a e;
  private androidx.work.impl.utils.p.a f;
  private WorkDatabase g;
  private Map<String, k> h;
  private Map<String, k> i;
  private List<e> j;
  private Set<String> k;
  private final List<b> l;
  private final Object m;
  
  public d(Context paramContext, androidx.work.a paramA, androidx.work.impl.utils.p.a paramA1, WorkDatabase paramWorkDatabase, List<e> paramList)
  {
    d = paramContext;
    e = paramA;
    f = paramA1;
    g = paramWorkDatabase;
    i = new HashMap();
    h = new HashMap();
    j = paramList;
    k = new HashSet();
    l = new ArrayList();
    c = null;
    m = new Object();
  }
  
  private static boolean e(String paramString, k paramK)
  {
    if (paramK != null)
    {
      paramK.d();
      j.c().a(b, String.format("WorkerWrapper interrupted for %s", new Object[] { paramString }), new Throwable[0]);
      return true;
    }
    j.c().a(b, String.format("WorkerWrapper could not be found for %s", new Object[] { paramString }), new Throwable[0]);
    return false;
  }
  
  /* Error */
  private void m()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 84	androidx/work/impl/d:m	Ljava/lang/Object;
    //   4: astore_1
    //   5: aload_1
    //   6: monitorenter
    //   7: aload_0
    //   8: getfield 68	androidx/work/impl/d:h	Ljava/util/Map;
    //   11: invokeinterface 115 1 0
    //   16: iconst_1
    //   17: ixor
    //   18: ifne +61 -> 79
    //   21: aload_0
    //   22: getfield 55	androidx/work/impl/d:d	Landroid/content/Context;
    //   25: invokestatic 120	androidx/work/impl/foreground/b:e	(Landroid/content/Context;)Landroid/content/Intent;
    //   28: astore_2
    //   29: aload_0
    //   30: getfield 55	androidx/work/impl/d:d	Landroid/content/Context;
    //   33: aload_2
    //   34: invokevirtual 126	android/content/Context:startService	(Landroid/content/Intent;)Landroid/content/ComponentName;
    //   37: pop
    //   38: goto +23 -> 61
    //   41: astore_2
    //   42: invokestatic 94	androidx/work/j:c	()Landroidx/work/j;
    //   45: getstatic 48	androidx/work/impl/d:b	Ljava/lang/String;
    //   48: ldc -128
    //   50: iconst_1
    //   51: anewarray 104	java/lang/Throwable
    //   54: dup
    //   55: iconst_0
    //   56: aload_2
    //   57: aastore
    //   58: invokevirtual 130	androidx/work/j:b	(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Throwable;)V
    //   61: aload_0
    //   62: getfield 82	androidx/work/impl/d:c	Landroid/os/PowerManager$WakeLock;
    //   65: astore_2
    //   66: aload_2
    //   67: ifnull +12 -> 79
    //   70: aload_2
    //   71: invokevirtual 135	android/os/PowerManager$WakeLock:release	()V
    //   74: aload_0
    //   75: aconst_null
    //   76: putfield 82	androidx/work/impl/d:c	Landroid/os/PowerManager$WakeLock;
    //   79: aload_1
    //   80: monitorexit
    //   81: return
    //   82: astore_2
    //   83: aload_1
    //   84: monitorexit
    //   85: aload_2
    //   86: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	87	0	this	d
    //   4	80	1	localObject1	Object
    //   28	6	2	localIntent	android.content.Intent
    //   41	16	2	localObject2	Object
    //   65	6	2	localWakeLock	PowerManager.WakeLock
    //   82	4	2	localObject3	Object
    // Exception table:
    //   from	to	target	type
    //   29	38	41	finally
    //   7	29	82	finally
    //   42	61	82	finally
    //   61	66	82	finally
    //   70	79	82	finally
    //   79	81	82	finally
    //   83	85	82	finally
  }
  
  public void a(String paramString, androidx.work.e paramE)
  {
    synchronized (m)
    {
      j.c().d(b, String.format("Moving WorkSpec (%s) to the foreground", new Object[] { paramString }), new Throwable[0]);
      k localK = (k)i.remove(paramString);
      if (localK != null)
      {
        if (c == null)
        {
          PowerManager.WakeLock localWakeLock = androidx.work.impl.utils.k.b(d, "ProcessorForegroundLck");
          c = localWakeLock;
          localWakeLock.acquire();
        }
        h.put(paramString, localK);
        paramString = androidx.work.impl.foreground.b.c(d, paramString, paramE);
        androidx.core.content.a.m(d, paramString);
      }
      return;
    }
  }
  
  public void b(String paramString)
  {
    synchronized (m)
    {
      h.remove(paramString);
      m();
      return;
    }
  }
  
  public void c(b paramB)
  {
    synchronized (m)
    {
      l.add(paramB);
      return;
    }
  }
  
  public void d(String paramString, boolean paramBoolean)
  {
    synchronized (m)
    {
      i.remove(paramString);
      j.c().a(b, String.format("%s %s executed; reschedule = %s", new Object[] { getClass().getSimpleName(), paramString, Boolean.valueOf(paramBoolean) }), new Throwable[0]);
      Iterator localIterator = l.iterator();
      while (localIterator.hasNext()) {
        ((b)localIterator.next()).d(paramString, paramBoolean);
      }
      return;
    }
  }
  
  public boolean f(String paramString)
  {
    synchronized (m)
    {
      boolean bool = k.contains(paramString);
      return bool;
    }
  }
  
  public boolean g(String paramString)
  {
    for (;;)
    {
      synchronized (m)
      {
        if (i.containsKey(paramString)) {
          break label50;
        }
        if (h.containsKey(paramString))
        {
          break label50;
          return bool;
        }
      }
      boolean bool = false;
      continue;
      label50:
      bool = true;
    }
  }
  
  public boolean h(String paramString)
  {
    synchronized (m)
    {
      boolean bool = h.containsKey(paramString);
      return bool;
    }
  }
  
  public void i(b paramB)
  {
    synchronized (m)
    {
      l.remove(paramB);
      return;
    }
  }
  
  public boolean j(String paramString)
  {
    return k(paramString, null);
  }
  
  public boolean k(String paramString, WorkerParameters.a paramA)
  {
    synchronized (m)
    {
      if (g(paramString))
      {
        j.c().a(b, String.format("Work %s is already enqueued for processing", new Object[] { paramString }), new Throwable[0]);
        return false;
      }
      paramA = new k.c(d, e, f, this, g, paramString).c(j).b(paramA).a();
      c localC = paramA.b();
      localC.a(new a(this, paramString, localC), f.a());
      i.put(paramString, paramA);
      f.c().execute(paramA);
      j.c().a(b, String.format("%s: processing %s", new Object[] { d.class.getSimpleName(), paramString }), new Throwable[0]);
      return true;
    }
  }
  
  public boolean l(String paramString)
  {
    for (;;)
    {
      synchronized (m)
      {
        Object localObject1 = j.c();
        Object localObject2 = b;
        n = 1;
        ((j)localObject1).a((String)localObject2, String.format("Processor cancelling %s", new Object[] { paramString }), new Throwable[0]);
        k.add(paramString);
        localObject2 = (k)h.remove(paramString);
        if (localObject2 != null)
        {
          localObject1 = localObject2;
          if (localObject2 == null) {
            localObject1 = (k)i.remove(paramString);
          }
          boolean bool = e(paramString, (k)localObject1);
          if (n != 0) {
            m();
          }
          return bool;
        }
      }
      int n = 0;
    }
  }
  
  public boolean n(String paramString)
  {
    synchronized (m)
    {
      j.c().a(b, String.format("Processor stopping foreground work %s", new Object[] { paramString }), new Throwable[0]);
      boolean bool = e(paramString, (k)h.remove(paramString));
      return bool;
    }
  }
  
  public boolean o(String paramString)
  {
    synchronized (m)
    {
      j.c().a(b, String.format("Processor stopping background work %s", new Object[] { paramString }), new Throwable[0]);
      boolean bool = e(paramString, (k)i.remove(paramString));
      return bool;
    }
  }
  
  private static class a
    implements Runnable
  {
    private b b;
    private String c;
    private c<Boolean> d;
    
    a(b paramB, String paramString, c<Boolean> paramC)
    {
      b = paramB;
      c = paramString;
      d = paramC;
    }
    
    public void run()
    {
      try
      {
        bool = ((Boolean)d.get()).booleanValue();
      }
      catch (InterruptedException|ExecutionException localInterruptedException)
      {
        boolean bool;
        for (;;) {}
      }
      bool = true;
      b.d(c, bool);
    }
  }
}
