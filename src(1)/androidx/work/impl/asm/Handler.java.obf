package androidx.work.impl.n;

import android.os.Build.VERSION;
import androidx.work.BackoffPolicy;
import androidx.work.NetworkType;
import androidx.work.OutOfQuotaPolicy;
import androidx.work.WorkInfo.State;

public class v
{
  public static int a(BackoffPolicy paramBackoffPolicy)
  {
    int i = a.b[paramBackoffPolicy.ordinal()];
    if (i != 1)
    {
      if (i == 2) {
        return 1;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not convert ");
      localStringBuilder.append(paramBackoffPolicy);
      localStringBuilder.append(" to int");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return 0;
  }
  
  /* Error */
  public static androidx.work.c b(byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: new 50	androidx/work/c
    //   3: dup
    //   4: invokespecial 51	androidx/work/c:<init>	()V
    //   7: astore 5
    //   9: aload_0
    //   10: ifnonnull +6 -> 16
    //   13: aload 5
    //   15: areturn
    //   16: new 53	java/io/ByteArrayInputStream
    //   19: dup
    //   20: aload_0
    //   21: invokespecial 56	java/io/ByteArrayInputStream:<init>	([B)V
    //   24: astore 4
    //   26: new 58	java/io/ObjectInputStream
    //   29: dup
    //   30: aload 4
    //   32: invokespecial 61	java/io/ObjectInputStream:<init>	(Ljava/io/InputStream;)V
    //   35: astore_2
    //   36: aload_2
    //   37: astore_0
    //   38: aload_2
    //   39: invokevirtual 64	java/io/ObjectInputStream:readInt	()I
    //   42: istore_1
    //   43: iload_1
    //   44: ifle +28 -> 72
    //   47: aload_2
    //   48: astore_0
    //   49: aload 5
    //   51: aload_2
    //   52: invokevirtual 67	java/io/ObjectInputStream:readUTF	()Ljava/lang/String;
    //   55: invokestatic 73	android/net/Uri:parse	(Ljava/lang/String;)Landroid/net/Uri;
    //   58: aload_2
    //   59: invokevirtual 77	java/io/ObjectInputStream:readBoolean	()Z
    //   62: invokevirtual 80	androidx/work/c:a	(Landroid/net/Uri;Z)V
    //   65: iload_1
    //   66: iconst_1
    //   67: isub
    //   68: istore_1
    //   69: goto -26 -> 43
    //   72: aload_2
    //   73: invokevirtual 83	java/io/ObjectInputStream:close	()V
    //   76: goto +8 -> 84
    //   79: astore_0
    //   80: aload_0
    //   81: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   84: aload 4
    //   86: invokevirtual 87	java/io/ByteArrayInputStream:close	()V
    //   89: aload 5
    //   91: areturn
    //   92: astore_3
    //   93: goto +12 -> 105
    //   96: astore_2
    //   97: aconst_null
    //   98: astore_0
    //   99: goto +45 -> 144
    //   102: astore_3
    //   103: aconst_null
    //   104: astore_2
    //   105: aload_2
    //   106: astore_0
    //   107: aload_3
    //   108: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   111: aload_2
    //   112: ifnull +15 -> 127
    //   115: aload_2
    //   116: invokevirtual 83	java/io/ObjectInputStream:close	()V
    //   119: goto +8 -> 127
    //   122: astore_0
    //   123: aload_0
    //   124: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   127: aload 4
    //   129: invokevirtual 87	java/io/ByteArrayInputStream:close	()V
    //   132: aload 5
    //   134: areturn
    //   135: astore_0
    //   136: aload_0
    //   137: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   140: aload 5
    //   142: areturn
    //   143: astore_2
    //   144: aload_0
    //   145: ifnull +15 -> 160
    //   148: aload_0
    //   149: invokevirtual 83	java/io/ObjectInputStream:close	()V
    //   152: goto +8 -> 160
    //   155: astore_0
    //   156: aload_0
    //   157: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   160: aload 4
    //   162: invokevirtual 87	java/io/ByteArrayInputStream:close	()V
    //   165: goto +8 -> 173
    //   168: astore_0
    //   169: aload_0
    //   170: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   173: aload_2
    //   174: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	175	0	paramArrayOfByte	byte[]
    //   42	27	1	i	int
    //   35	38	2	localObjectInputStream	java.io.ObjectInputStream
    //   96	1	2	localObject1	Object
    //   104	12	2	localObject2	Object
    //   143	31	2	localObject3	Object
    //   92	1	3	localIOException1	java.io.IOException
    //   102	6	3	localIOException2	java.io.IOException
    //   24	137	4	localByteArrayInputStream	java.io.ByteArrayInputStream
    //   7	134	5	localC	androidx.work.c
    // Exception table:
    //   from	to	target	type
    //   72	76	79	java/io/IOException
    //   38	43	92	java/io/IOException
    //   49	65	92	java/io/IOException
    //   26	36	96	finally
    //   26	36	102	java/io/IOException
    //   115	119	122	java/io/IOException
    //   84	89	135	java/io/IOException
    //   127	132	135	java/io/IOException
    //   38	43	143	finally
    //   49	65	143	finally
    //   107	111	143	finally
    //   148	152	155	java/io/IOException
    //   160	165	168	java/io/IOException
  }
  
  /* Error */
  public static byte[] c(androidx.work.c paramC)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokevirtual 91	androidx/work/c:c	()I
    //   4: istore_1
    //   5: aconst_null
    //   6: astore 4
    //   8: aconst_null
    //   9: astore_2
    //   10: iload_1
    //   11: ifne +5 -> 16
    //   14: aconst_null
    //   15: areturn
    //   16: new 93	java/io/ByteArrayOutputStream
    //   19: dup
    //   20: invokespecial 94	java/io/ByteArrayOutputStream:<init>	()V
    //   23: astore 5
    //   25: new 96	java/io/ObjectOutputStream
    //   28: dup
    //   29: aload 5
    //   31: invokespecial 99	java/io/ObjectOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   34: astore_3
    //   35: aload_3
    //   36: aload_0
    //   37: invokevirtual 91	androidx/work/c:c	()I
    //   40: invokevirtual 103	java/io/ObjectOutputStream:writeInt	(I)V
    //   43: aload_0
    //   44: invokevirtual 106	androidx/work/c:b	()Ljava/util/Set;
    //   47: invokeinterface 112 1 0
    //   52: astore_0
    //   53: aload_0
    //   54: invokeinterface 117 1 0
    //   59: ifeq +35 -> 94
    //   62: aload_0
    //   63: invokeinterface 121 1 0
    //   68: checkcast 123	androidx/work/c$a
    //   71: astore_2
    //   72: aload_3
    //   73: aload_2
    //   74: invokevirtual 126	androidx/work/c$a:a	()Landroid/net/Uri;
    //   77: invokevirtual 127	android/net/Uri:toString	()Ljava/lang/String;
    //   80: invokevirtual 130	java/io/ObjectOutputStream:writeUTF	(Ljava/lang/String;)V
    //   83: aload_3
    //   84: aload_2
    //   85: invokevirtual 132	androidx/work/c$a:b	()Z
    //   88: invokevirtual 136	java/io/ObjectOutputStream:writeBoolean	(Z)V
    //   91: goto -38 -> 53
    //   94: aload_3
    //   95: invokevirtual 137	java/io/ObjectOutputStream:close	()V
    //   98: goto +8 -> 106
    //   101: astore_0
    //   102: aload_0
    //   103: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   106: aload 5
    //   108: invokevirtual 138	java/io/ByteArrayOutputStream:close	()V
    //   111: goto +60 -> 171
    //   114: astore_0
    //   115: aload_3
    //   116: astore_2
    //   117: goto +60 -> 177
    //   120: astore_2
    //   121: aload_3
    //   122: astore_0
    //   123: aload_2
    //   124: astore_3
    //   125: goto +11 -> 136
    //   128: astore_0
    //   129: goto +48 -> 177
    //   132: astore_3
    //   133: aload 4
    //   135: astore_0
    //   136: aload_0
    //   137: astore_2
    //   138: aload_3
    //   139: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   142: aload_0
    //   143: ifnull +15 -> 158
    //   146: aload_0
    //   147: invokevirtual 137	java/io/ObjectOutputStream:close	()V
    //   150: goto +8 -> 158
    //   153: astore_0
    //   154: aload_0
    //   155: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   158: aload 5
    //   160: invokevirtual 138	java/io/ByteArrayOutputStream:close	()V
    //   163: goto +8 -> 171
    //   166: astore_0
    //   167: aload_0
    //   168: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   171: aload 5
    //   173: invokevirtual 142	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   176: areturn
    //   177: aload_2
    //   178: ifnull +15 -> 193
    //   181: aload_2
    //   182: invokevirtual 137	java/io/ObjectOutputStream:close	()V
    //   185: goto +8 -> 193
    //   188: astore_2
    //   189: aload_2
    //   190: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   193: aload 5
    //   195: invokevirtual 138	java/io/ByteArrayOutputStream:close	()V
    //   198: goto +8 -> 206
    //   201: astore_2
    //   202: aload_2
    //   203: invokevirtual 86	java/io/IOException:printStackTrace	()V
    //   206: aload_0
    //   207: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	208	0	paramC	androidx.work.c
    //   4	7	1	i	int
    //   9	108	2	localObject1	Object
    //   120	4	2	localIOException1	java.io.IOException
    //   137	45	2	localC	androidx.work.c
    //   188	2	2	localIOException2	java.io.IOException
    //   201	2	2	localIOException3	java.io.IOException
    //   34	91	3	localObject2	Object
    //   132	7	3	localIOException4	java.io.IOException
    //   6	128	4	localObject3	Object
    //   23	171	5	localByteArrayOutputStream	java.io.ByteArrayOutputStream
    // Exception table:
    //   from	to	target	type
    //   94	98	101	java/io/IOException
    //   35	53	114	finally
    //   53	91	114	finally
    //   35	53	120	java/io/IOException
    //   53	91	120	java/io/IOException
    //   25	35	128	finally
    //   138	142	128	finally
    //   25	35	132	java/io/IOException
    //   146	150	153	java/io/IOException
    //   106	111	166	java/io/IOException
    //   158	163	166	java/io/IOException
    //   181	185	188	java/io/IOException
    //   193	198	201	java/io/IOException
  }
  
  public static BackoffPolicy d(int paramInt)
  {
    if (paramInt != 0)
    {
      if (paramInt == 1) {
        return BackoffPolicy.c;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not convert ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" to BackoffPolicy");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return BackoffPolicy.b;
  }
  
  public static NetworkType e(int paramInt)
  {
    if (paramInt != 0)
    {
      if (paramInt != 1)
      {
        if (paramInt != 2)
        {
          if (paramInt != 3)
          {
            if (paramInt != 4)
            {
              if ((Build.VERSION.SDK_INT >= 30) && (paramInt == 5)) {
                return NetworkType.g;
              }
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Could not convert ");
              localStringBuilder.append(paramInt);
              localStringBuilder.append(" to NetworkType");
              throw new IllegalArgumentException(localStringBuilder.toString());
            }
            return NetworkType.f;
          }
          return NetworkType.e;
        }
        return NetworkType.d;
      }
      return NetworkType.c;
    }
    return NetworkType.b;
  }
  
  public static OutOfQuotaPolicy f(int paramInt)
  {
    if (paramInt != 0)
    {
      if (paramInt == 1) {
        return OutOfQuotaPolicy.c;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not convert ");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" to OutOfQuotaPolicy");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return OutOfQuotaPolicy.b;
  }
  
  public static WorkInfo.State g(int paramInt)
  {
    if (paramInt != 0)
    {
      if (paramInt != 1)
      {
        if (paramInt != 2)
        {
          if (paramInt != 3)
          {
            if (paramInt != 4)
            {
              if (paramInt == 5) {
                return WorkInfo.State.g;
              }
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Could not convert ");
              localStringBuilder.append(paramInt);
              localStringBuilder.append(" to State");
              throw new IllegalArgumentException(localStringBuilder.toString());
            }
            return WorkInfo.State.f;
          }
          return WorkInfo.State.e;
        }
        return WorkInfo.State.d;
      }
      return WorkInfo.State.c;
    }
    return WorkInfo.State.b;
  }
  
  public static int h(NetworkType paramNetworkType)
  {
    int i = a.c[paramNetworkType.ordinal()];
    if (i != 1)
    {
      if (i != 2)
      {
        if (i != 3)
        {
          if (i != 4)
          {
            if (i != 5)
            {
              if ((Build.VERSION.SDK_INT >= 30) && (paramNetworkType == NetworkType.g)) {
                return 5;
              }
              StringBuilder localStringBuilder = new StringBuilder();
              localStringBuilder.append("Could not convert ");
              localStringBuilder.append(paramNetworkType);
              localStringBuilder.append(" to int");
              throw new IllegalArgumentException(localStringBuilder.toString());
            }
            return 4;
          }
          return 3;
        }
        return 2;
      }
      return 1;
    }
    return 0;
  }
  
  public static int i(OutOfQuotaPolicy paramOutOfQuotaPolicy)
  {
    int i = a.d[paramOutOfQuotaPolicy.ordinal()];
    if (i != 1)
    {
      if (i == 2) {
        return 1;
      }
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not convert ");
      localStringBuilder.append(paramOutOfQuotaPolicy);
      localStringBuilder.append(" to int");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    return 0;
  }
  
  public static int j(WorkInfo.State paramState)
  {
    switch (a.a[paramState.ordinal()])
    {
    default: 
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not convert ");
      localStringBuilder.append(paramState);
      localStringBuilder.append(" to int");
      throw new IllegalArgumentException(localStringBuilder.toString());
    case 6: 
      return 5;
    case 5: 
      return 4;
    case 4: 
      return 3;
    case 3: 
      return 2;
    case 2: 
      return 1;
    }
    return 0;
  }
}
