package androidx.core.graphics.drawable;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.graphics.ColorFilter;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.DrawableContainer;
import android.graphics.drawable.DrawableContainer.DrawableContainerState;
import android.graphics.drawable.InsetDrawable;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.Log;
import java.io.IOException;
import java.lang.reflect.Method;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public final class a
{
  private static Method a;
  private static boolean b;
  private static Method c;
  private static boolean d;
  
  public static void a(Drawable paramDrawable, Resources.Theme paramTheme)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      b.a(paramDrawable, paramTheme);
    }
  }
  
  public static boolean b(Drawable paramDrawable)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return b.b(paramDrawable);
    }
    return false;
  }
  
  public static void c(Drawable paramDrawable)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 23)
    {
      paramDrawable.clearColorFilter();
      return;
    }
    if (i >= 21)
    {
      paramDrawable.clearColorFilter();
      if ((paramDrawable instanceof InsetDrawable))
      {
        c(a.c((InsetDrawable)paramDrawable));
        return;
      }
      if ((paramDrawable instanceof c))
      {
        c(((c)paramDrawable).b());
        return;
      }
      if ((paramDrawable instanceof DrawableContainer))
      {
        paramDrawable = (DrawableContainer.DrawableContainerState)((DrawableContainer)paramDrawable).getConstantState();
        if (paramDrawable != null)
        {
          i = 0;
          int j = paramDrawable.getChildCount();
          while (i < j)
          {
            Drawable localDrawable = a.b(paramDrawable, i);
            if (localDrawable != null) {
              c(localDrawable);
            }
            i += 1;
          }
        }
      }
    }
    else
    {
      paramDrawable.clearColorFilter();
    }
  }
  
  public static int d(Drawable paramDrawable)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return a.a(paramDrawable);
    }
    return 0;
  }
  
  public static ColorFilter e(Drawable paramDrawable)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return b.c(paramDrawable);
    }
    return null;
  }
  
  public static int f(Drawable paramDrawable)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 23) {
      return c.a(paramDrawable);
    }
    if (i >= 17)
    {
      if (!d)
      {
        try
        {
          Method localMethod1 = Drawable.class.getDeclaredMethod("getLayoutDirection", new Class[0]);
          c = localMethod1;
          localMethod1.setAccessible(true);
        }
        catch (NoSuchMethodException localNoSuchMethodException)
        {
          Log.i("DrawableCompat", "Failed to retrieve getLayoutDirection() method", localNoSuchMethodException);
        }
        d = true;
      }
      Method localMethod2 = c;
      if (localMethod2 != null) {
        try
        {
          i = ((Integer)localMethod2.invoke(paramDrawable, new Object[0])).intValue();
          return i;
        }
        catch (Exception paramDrawable)
        {
          Log.i("DrawableCompat", "Failed to invoke getLayoutDirection() via reflection", paramDrawable);
          c = null;
        }
      }
    }
    return 0;
  }
  
  public static void g(Drawable paramDrawable, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
    throws XmlPullParserException, IOException
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      b.d(paramDrawable, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return;
    }
    paramDrawable.inflate(paramResources, paramXmlPullParser, paramAttributeSet);
  }
  
  public static boolean h(Drawable paramDrawable)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return a.d(paramDrawable);
    }
    return false;
  }
  
  @Deprecated
  public static void i(Drawable paramDrawable)
  {
    paramDrawable.jumpToCurrentState();
  }
  
  public static void j(Drawable paramDrawable, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      a.e(paramDrawable, paramBoolean);
    }
  }
  
  public static void k(Drawable paramDrawable, float paramFloat1, float paramFloat2)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      b.e(paramDrawable, paramFloat1, paramFloat2);
    }
  }
  
  public static void l(Drawable paramDrawable, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      b.f(paramDrawable, paramInt1, paramInt2, paramInt3, paramInt4);
    }
  }
  
  public static boolean m(Drawable paramDrawable, int paramInt)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 23) {
      return c.b(paramDrawable, paramInt);
    }
    if (i >= 17)
    {
      if (!b)
      {
        try
        {
          Method localMethod1 = Drawable.class.getDeclaredMethod("setLayoutDirection", new Class[] { Integer.TYPE });
          a = localMethod1;
          localMethod1.setAccessible(true);
        }
        catch (NoSuchMethodException localNoSuchMethodException)
        {
          Log.i("DrawableCompat", "Failed to retrieve setLayoutDirection(int) method", localNoSuchMethodException);
        }
        b = true;
      }
      Method localMethod2 = a;
      if (localMethod2 != null) {
        try
        {
          localMethod2.invoke(paramDrawable, new Object[] { Integer.valueOf(paramInt) });
          return true;
        }
        catch (Exception paramDrawable)
        {
          Log.i("DrawableCompat", "Failed to invoke setLayoutDirection(int) via reflection", paramDrawable);
          a = null;
        }
      }
    }
    return false;
  }
  
  public static void n(Drawable paramDrawable, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      b.g(paramDrawable, paramInt);
      return;
    }
    if ((paramDrawable instanceof b)) {
      ((b)paramDrawable).setTint(paramInt);
    }
  }
  
  public static void o(Drawable paramDrawable, ColorStateList paramColorStateList)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      b.h(paramDrawable, paramColorStateList);
      return;
    }
    if ((paramDrawable instanceof b)) {
      ((b)paramDrawable).setTintList(paramColorStateList);
    }
  }
  
  public static void p(Drawable paramDrawable, PorterDuff.Mode paramMode)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      b.i(paramDrawable, paramMode);
      return;
    }
    if ((paramDrawable instanceof b)) {
      ((b)paramDrawable).setTintMode(paramMode);
    }
  }
  
  public static <T extends Drawable> T q(Drawable paramDrawable)
  {
    Drawable localDrawable = paramDrawable;
    if ((paramDrawable instanceof c)) {
      localDrawable = ((c)paramDrawable).b();
    }
    return localDrawable;
  }
  
  public static Drawable r(Drawable paramDrawable)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 23) {
      return paramDrawable;
    }
    if (i >= 21)
    {
      if (!(paramDrawable instanceof b)) {
        return new e(paramDrawable);
      }
      return paramDrawable;
    }
    if (!(paramDrawable instanceof b)) {
      return new d(paramDrawable);
    }
    return paramDrawable;
  }
  
  static class a
  {
    static int a(Drawable paramDrawable)
    {
      return paramDrawable.getAlpha();
    }
    
    static Drawable b(DrawableContainer.DrawableContainerState paramDrawableContainerState, int paramInt)
    {
      return paramDrawableContainerState.getChild(paramInt);
    }
    
    static Drawable c(InsetDrawable paramInsetDrawable)
    {
      return paramInsetDrawable.getDrawable();
    }
    
    static boolean d(Drawable paramDrawable)
    {
      return paramDrawable.isAutoMirrored();
    }
    
    static void e(Drawable paramDrawable, boolean paramBoolean)
    {
      paramDrawable.setAutoMirrored(paramBoolean);
    }
  }
  
  static class b
  {
    static void a(Drawable paramDrawable, Resources.Theme paramTheme)
    {
      paramDrawable.applyTheme(paramTheme);
    }
    
    static boolean b(Drawable paramDrawable)
    {
      return paramDrawable.canApplyTheme();
    }
    
    static ColorFilter c(Drawable paramDrawable)
    {
      return paramDrawable.getColorFilter();
    }
    
    static void d(Drawable paramDrawable, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
      throws XmlPullParserException, IOException
    {
      paramDrawable.inflate(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    }
    
    static void e(Drawable paramDrawable, float paramFloat1, float paramFloat2)
    {
      paramDrawable.setHotspot(paramFloat1, paramFloat2);
    }
    
    static void f(Drawable paramDrawable, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      paramDrawable.setHotspotBounds(paramInt1, paramInt2, paramInt3, paramInt4);
    }
    
    static void g(Drawable paramDrawable, int paramInt)
    {
      paramDrawable.setTint(paramInt);
    }
    
    static void h(Drawable paramDrawable, ColorStateList paramColorStateList)
    {
      paramDrawable.setTintList(paramColorStateList);
    }
    
    static void i(Drawable paramDrawable, PorterDuff.Mode paramMode)
    {
      paramDrawable.setTintMode(paramMode);
    }
  }
  
  static class c
  {
    static int a(Drawable paramDrawable)
    {
      return paramDrawable.getLayoutDirection();
    }
    
    static boolean b(Drawable paramDrawable, int paramInt)
    {
      return paramDrawable.setLayoutDirection(paramInt);
    }
  }
}
