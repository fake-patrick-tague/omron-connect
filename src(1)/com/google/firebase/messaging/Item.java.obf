package com.google.firebase.messaging;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.concurrent.NamedThreadFactory;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.TaskCompletionSource;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

class j1
  implements ServiceConnection
{
  private final Context a;
  private final Intent b;
  private final ScheduledExecutorService c;
  private final Queue<a> d = new ArrayDeque();
  private i1 e;
  private boolean f = false;
  
  j1(Context paramContext, String paramString)
  {
    this(paramContext, paramString, new ScheduledThreadPoolExecutor(0, new NamedThreadFactory("Firebase-FirebaseInstanceIdServiceConnection")));
  }
  
  j1(Context paramContext, String paramString, ScheduledExecutorService paramScheduledExecutorService)
  {
    paramContext = paramContext.getApplicationContext();
    a = paramContext;
    b = new Intent(paramString).setPackage(paramContext.getPackageName());
    c = paramScheduledExecutorService;
  }
  
  private void a()
  {
    while (!d.isEmpty()) {
      ((a)d.poll()).b();
    }
  }
  
  private void b()
  {
    try
    {
      if (Log.isLoggable("FirebaseMessaging", 3)) {
        Log.d("FirebaseMessaging", "flush queue called");
      }
      while (!d.isEmpty())
      {
        if (Log.isLoggable("FirebaseMessaging", 3)) {
          Log.d("FirebaseMessaging", "found intent to be delivered");
        }
        Object localObject1 = e;
        if ((localObject1 != null) && (((Binder)localObject1).isBinderAlive()))
        {
          if (Log.isLoggable("FirebaseMessaging", 3)) {
            Log.d("FirebaseMessaging", "binder is alive, sending the intent.");
          }
          localObject1 = (a)d.poll();
          e.b((a)localObject1);
        }
        else
        {
          d();
          return;
        }
      }
      return;
    }
    finally {}
  }
  
  private void d()
  {
    if (Log.isLoggable("FirebaseMessaging", 3))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("binder is dead. start connection? ");
      localStringBuilder.append(f ^ true);
      Log.d("FirebaseMessaging", localStringBuilder.toString());
    }
    if (f) {
      return;
    }
    f = true;
    try
    {
      if (ConnectionTracker.getInstance().bindService(a, b, this, 65)) {
        return;
      }
      Log.e("FirebaseMessaging", "binding to the service failed");
    }
    catch (SecurityException localSecurityException)
    {
      Log.e("FirebaseMessaging", "Exception while binding the service", localSecurityException);
    }
    f = false;
    a();
  }
  
  Task<Void> c(Intent paramIntent)
  {
    try
    {
      if (Log.isLoggable("FirebaseMessaging", 3)) {
        Log.d("FirebaseMessaging", "new intent queued in the bind-strategy delivery");
      }
      paramIntent = new a(paramIntent);
      paramIntent.a(c);
      d.add(paramIntent);
      b();
      paramIntent = paramIntent.c();
      return paramIntent;
    }
    finally {}
  }
  
  public void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
  {
    try
    {
      if (Log.isLoggable("FirebaseMessaging", 3))
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("onServiceConnected: ");
        localStringBuilder.append(paramComponentName);
        Log.d("FirebaseMessaging", localStringBuilder.toString());
      }
      f = false;
      if (!(paramIBinder instanceof i1))
      {
        paramComponentName = new StringBuilder();
        paramComponentName.append("Invalid service connection: ");
        paramComponentName.append(paramIBinder);
        Log.e("FirebaseMessaging", paramComponentName.toString());
        a();
        return;
      }
      e = ((i1)paramIBinder);
      b();
      return;
    }
    finally {}
  }
  
  public void onServiceDisconnected(ComponentName paramComponentName)
  {
    if (Log.isLoggable("FirebaseMessaging", 3))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("onServiceDisconnected: ");
      localStringBuilder.append(paramComponentName);
      Log.d("FirebaseMessaging", localStringBuilder.toString());
    }
    b();
  }
  
  static class a
  {
    final Intent a;
    private final TaskCompletionSource<Void> b = new TaskCompletionSource();
    
    a(Intent paramIntent)
    {
      a = paramIntent;
    }
    
    void a(ScheduledExecutorService paramScheduledExecutorService)
    {
      int i;
      if ((a.getFlags() & 0x10000000) != 0) {
        i = 1;
      } else {
        i = 0;
      }
      Object localObject = new d0(this);
      long l;
      if (i != 0) {
        l = h1.a;
      } else {
        l = 9000L;
      }
      localObject = paramScheduledExecutorService.schedule((Runnable)localObject, l, TimeUnit.MILLISECONDS);
      c().addOnCompleteListener(paramScheduledExecutorService, new e0((ScheduledFuture)localObject));
    }
    
    void b()
    {
      b.trySetResult(null);
    }
    
    Task<Void> c()
    {
      return b.getTask();
    }
  }
}
