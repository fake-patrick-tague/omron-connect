package com.google.firebase.p;

import java.lang.annotation.Annotation;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public final class c
{
  private final String a;
  private final Map<Class<?>, Object> b;
  
  private c(String paramString, Map<Class<?>, Object> paramMap)
  {
    a = paramString;
    b = paramMap;
  }
  
  public static b a(String paramString)
  {
    return new b(paramString);
  }
  
  public static c d(String paramString)
  {
    return new c(paramString, Collections.emptyMap());
  }
  
  public String b()
  {
    return a;
  }
  
  public <T extends Annotation> T c(Class<T> paramClass)
  {
    return (Annotation)b.get(paramClass);
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof c)) {
      return false;
    }
    paramObject = (c)paramObject;
    return (a.equals(a)) && (b.equals(b));
  }
  
  public int hashCode()
  {
    return a.hashCode() * 31 + b.hashCode();
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("FieldDescriptor{name=");
    localStringBuilder.append(a);
    localStringBuilder.append(", properties=");
    localStringBuilder.append(b.values());
    localStringBuilder.append("}");
    return localStringBuilder.toString();
  }
  
  public static final class b
  {
    private final String a;
    private Map<Class<?>, Object> b = null;
    
    b(String paramString)
    {
      a = paramString;
    }
    
    public c a()
    {
      String str = a;
      Map localMap;
      if (b == null) {
        localMap = Collections.emptyMap();
      } else {
        localMap = Collections.unmodifiableMap(new HashMap(b));
      }
      return new c(str, localMap, null);
    }
    
    public <T extends Annotation> b b(T paramT)
    {
      if (b == null) {
        b = new HashMap();
      }
      b.put(paramT.annotationType(), paramT);
      return this;
    }
  }
}
