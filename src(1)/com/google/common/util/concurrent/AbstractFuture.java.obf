package com.google.common.util.concurrent;

import com.google.common.base.j;
import com.google.common.base.n;
import java.lang.reflect.Field;
import java.security.PrivilegedExceptionAction;
import java.util.Locale;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.locks.LockSupport;
import java.util.logging.Level;
import java.util.logging.Logger;
import sun.misc.Unsafe;

public abstract class a<V>
  extends com.google.common.util.concurrent.h.a
  implements c<V>
{
  private static final boolean b;
  private static final Logger c;
  private static final b d;
  private static final Object e;
  private volatile Object f;
  private volatile e g;
  private volatile k h;
  
  /* Error */
  static
  {
    // Byte code:
    //   0: ldc 55
    //   2: ldc 57
    //   4: invokestatic 63	java/lang/System:getProperty	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   7: invokestatic 69	java/lang/Boolean:parseBoolean	(Ljava/lang/String;)Z
    //   10: istore_0
    //   11: goto +5 -> 16
    //   14: iconst_0
    //   15: istore_0
    //   16: iload_0
    //   17: putstatic 71	com/google/common/util/concurrent/a:b	Z
    //   20: ldc 2
    //   22: invokevirtual 77	java/lang/Class:getName	()Ljava/lang/String;
    //   25: invokestatic 83	java/util/logging/Logger:getLogger	(Ljava/lang/String;)Ljava/util/logging/Logger;
    //   28: putstatic 85	com/google/common/util/concurrent/a:c	Ljava/util/logging/Logger;
    //   31: aconst_null
    //   32: astore_2
    //   33: new 37	com/google/common/util/concurrent/a$j
    //   36: dup
    //   37: aconst_null
    //   38: invokespecial 89	com/google/common/util/concurrent/a$j:<init>	(Lcom/google/common/util/concurrent/a$a;)V
    //   41: astore_1
    //   42: aconst_null
    //   43: astore_3
    //   44: goto +70 -> 114
    //   47: astore_3
    //   48: new 25	com/google/common/util/concurrent/a$f
    //   51: dup
    //   52: ldc 42
    //   54: ldc 91
    //   56: ldc 92
    //   58: invokestatic 98	java/util/concurrent/atomic/AtomicReferenceFieldUpdater:newUpdater	(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
    //   61: ldc 42
    //   63: ldc 42
    //   65: ldc 99
    //   67: invokestatic 98	java/util/concurrent/atomic/AtomicReferenceFieldUpdater:newUpdater	(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
    //   70: ldc 2
    //   72: ldc 42
    //   74: ldc 100
    //   76: invokestatic 98	java/util/concurrent/atomic/AtomicReferenceFieldUpdater:newUpdater	(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
    //   79: ldc 2
    //   81: ldc 22
    //   83: ldc 101
    //   85: invokestatic 98	java/util/concurrent/atomic/AtomicReferenceFieldUpdater:newUpdater	(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
    //   88: ldc 2
    //   90: ldc 103
    //   92: ldc 104
    //   94: invokestatic 98	java/util/concurrent/atomic/AtomicReferenceFieldUpdater:newUpdater	(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
    //   97: invokespecial 107	com/google/common/util/concurrent/a$f:<init>	(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;)V
    //   100: astore_1
    //   101: goto +13 -> 114
    //   104: astore_2
    //   105: new 31	com/google/common/util/concurrent/a$h
    //   108: dup
    //   109: aconst_null
    //   110: invokespecial 108	com/google/common/util/concurrent/a$h:<init>	(Lcom/google/common/util/concurrent/a$a;)V
    //   113: astore_1
    //   114: aload_1
    //   115: putstatic 110	com/google/common/util/concurrent/a:d	Lcom/google/common/util/concurrent/a$b;
    //   118: aload_2
    //   119: ifnull +30 -> 149
    //   122: getstatic 85	com/google/common/util/concurrent/a:c	Ljava/util/logging/Logger;
    //   125: astore_1
    //   126: getstatic 116	java/util/logging/Level:SEVERE	Ljava/util/logging/Level;
    //   129: astore 4
    //   131: aload_1
    //   132: aload 4
    //   134: ldc 118
    //   136: aload_3
    //   137: invokevirtual 122	java/util/logging/Logger:log	(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   140: aload_1
    //   141: aload 4
    //   143: ldc 124
    //   145: aload_2
    //   146: invokevirtual 122	java/util/logging/Logger:log	(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
    //   149: new 103	java/lang/Object
    //   152: dup
    //   153: invokespecial 126	java/lang/Object:<init>	()V
    //   156: putstatic 128	com/google/common/util/concurrent/a:e	Ljava/lang/Object;
    //   159: return
    //   160: astore_1
    //   161: goto -147 -> 14
    // Local variable table:
    //   start	length	slot	name	signature
    //   10	7	0	bool	boolean
    //   41	100	1	localObject1	Object
    //   160	1	1	localSecurityException	SecurityException
    //   32	1	2	localObject2	Object
    //   104	42	2	localThrowable1	Throwable
    //   43	1	3	localObject3	Object
    //   47	90	3	localThrowable2	Throwable
    //   129	13	4	localLevel	Level
    // Exception table:
    //   from	to	target	type
    //   33	42	47	finally
    //   48	101	104	finally
    //   0	11	160	java/lang/SecurityException
  }
  
  protected a() {}
  
  private void A(k paramK)
  {
    b = null;
    paramK = h;
    if (paramK == k.a) {
      return;
    }
    Object localObject2;
    for (Object localObject1 = null;; localObject1 = localObject2)
    {
      if (paramK == null) {
        return;
      }
      k localK = c;
      if (b != null)
      {
        localObject2 = paramK;
      }
      else
      {
        if (localObject1 != null)
        {
          c = localK;
          localObject2 = localObject1;
          if (b != null) {
            break label82;
          }
          break;
        }
        localObject2 = localObject1;
        if (!d.c(this, paramK, localK)) {
          break;
        }
      }
      label82:
      paramK = localK;
    }
  }
  
  private void m(StringBuilder paramStringBuilder)
  {
    try
    {
      Object localObject = w(this);
      paramStringBuilder.append("SUCCESS, result=[");
      p(paramStringBuilder, localObject);
      paramStringBuilder.append("]");
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      paramStringBuilder.append("UNKNOWN, cause=[");
      paramStringBuilder.append(localRuntimeException.getClass());
      paramStringBuilder.append(" thrown from get()]");
      return;
      paramStringBuilder.append("CANCELLED");
      return;
    }
    catch (ExecutionException localExecutionException)
    {
      paramStringBuilder.append("FAILURE, cause=[");
      paramStringBuilder.append(localExecutionException.getCause());
      paramStringBuilder.append("]");
      return;
    }
    catch (CancellationException localCancellationException)
    {
      for (;;) {}
    }
  }
  
  private void n(StringBuilder paramStringBuilder)
  {
    int i = paramStringBuilder.length();
    paramStringBuilder.append("PENDING");
    Object localObject = f;
    if ((localObject instanceof g))
    {
      paramStringBuilder.append(", setFuture=[");
      p(paramStringBuilder, c);
      paramStringBuilder.append("]");
    }
    else
    {
      try
      {
        localObject = n.a(y());
      }
      catch (StackOverflowError localStackOverflowError) {}catch (RuntimeException localRuntimeException) {}
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Exception thrown from implementation: ");
      localStringBuilder.append(localRuntimeException.getClass());
      String str = localStringBuilder.toString();
      if (str != null)
      {
        paramStringBuilder.append(", info=[");
        paramStringBuilder.append(str);
        paramStringBuilder.append("]");
      }
    }
    if (isDone())
    {
      paramStringBuilder.delete(i, paramStringBuilder.length());
      m(paramStringBuilder);
    }
  }
  
  private void p(StringBuilder paramStringBuilder, Object paramObject)
  {
    if (paramObject == this) {}
    try
    {
      paramStringBuilder.append("this future");
      return;
    }
    catch (StackOverflowError paramObject) {}catch (RuntimeException paramObject) {}
    paramStringBuilder.append(paramObject);
    return;
    paramStringBuilder.append("Exception thrown from implementation: ");
    paramStringBuilder.append(paramObject.getClass());
  }
  
  private static CancellationException q(String paramString, Throwable paramThrowable)
  {
    paramString = new CancellationException(paramString);
    paramString.initCause(paramThrowable);
    return paramString;
  }
  
  private e r(e paramE)
  {
    e localE2;
    do
    {
      localE2 = g;
    } while (!d.a(this, localE2, e.a));
    e localE1 = paramE;
    for (paramE = localE2; paramE != null; paramE = localE2)
    {
      localE2 = d;
      d = localE1;
      localE1 = paramE;
    }
    return localE1;
  }
  
  private static void s(a<?> paramA)
  {
    Object localObject2 = null;
    Object localObject1 = paramA;
    paramA = (a<?>)localObject2;
    ((a)localObject1).z();
    ((a)localObject1).o();
    for (localObject1 = ((a)localObject1).r(paramA);; localObject1 = paramA)
    {
      if (localObject1 == null) {
        return;
      }
      paramA = d;
      localObject2 = b;
      if ((localObject2 instanceof g))
      {
        localObject2 = (g)localObject2;
        localObject1 = b;
        if (f != localObject2) {
          continue;
        }
        Object localObject3 = v(c);
        if (!d.b((a)localObject1, localObject2, localObject3)) {
          continue;
        }
        break;
      }
      t((Runnable)localObject2, c);
    }
  }
  
  private static void t(Runnable paramRunnable, Executor paramExecutor)
  {
    try
    {
      paramExecutor.execute(paramRunnable);
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      Logger localLogger = c;
      Level localLevel = Level.SEVERE;
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("RuntimeException while executing runnable ");
      localStringBuilder.append(paramRunnable);
      localStringBuilder.append(" with executor ");
      localStringBuilder.append(paramExecutor);
      localLogger.log(localLevel, localStringBuilder.toString(), localRuntimeException);
    }
  }
  
  private V u(Object paramObject)
    throws ExecutionException
  {
    if (!(paramObject instanceof c))
    {
      if (!(paramObject instanceof d))
      {
        Object localObject = paramObject;
        if (paramObject == e) {
          localObject = null;
        }
        return localObject;
      }
      throw new ExecutionException(b);
    }
    throw q("Task was cancelled.", d);
  }
  
  /* Error */
  private static Object v(c<?> paramC)
  {
    // Byte code:
    //   0: aload_0
    //   1: instanceof 5
    //   4: ifeq +24 -> 28
    //   7: aload_0
    //   8: checkcast 5	com/google/common/util/concurrent/h/a
    //   11: invokestatic 327	com/google/common/util/concurrent/h/b:a	(Lcom/google/common/util/concurrent/h/a;)Ljava/lang/Throwable;
    //   14: astore_2
    //   15: aload_2
    //   16: ifnull +12 -> 28
    //   19: new 17	com/google/common/util/concurrent/a$d
    //   22: dup
    //   23: aload_2
    //   24: invokespecial 328	com/google/common/util/concurrent/a$d:<init>	(Ljava/lang/Throwable;)V
    //   27: areturn
    //   28: aload_0
    //   29: invokeinterface 333 1 0
    //   34: istore_1
    //   35: getstatic 71	com/google/common/util/concurrent/a:b	Z
    //   38: iconst_1
    //   39: ixor
    //   40: iload_1
    //   41: iand
    //   42: ifeq +7 -> 49
    //   45: getstatic 336	com/google/common/util/concurrent/a$c:b	Lcom/google/common/util/concurrent/a$c;
    //   48: areturn
    //   49: aload_0
    //   50: invokestatic 178	com/google/common/util/concurrent/a:w	(Ljava/util/concurrent/Future;)Ljava/lang/Object;
    //   53: astore_3
    //   54: iload_1
    //   55: ifeq +45 -> 100
    //   58: new 182	java/lang/StringBuilder
    //   61: dup
    //   62: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   65: astore_2
    //   66: aload_2
    //   67: ldc_w 338
    //   70: invokevirtual 186	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   73: pop
    //   74: aload_2
    //   75: aload_0
    //   76: invokevirtual 201	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   79: pop
    //   80: new 14	com/google/common/util/concurrent/a$c
    //   83: dup
    //   84: iconst_0
    //   85: new 340	java/lang/IllegalArgumentException
    //   88: dup
    //   89: aload_2
    //   90: invokevirtual 239	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   93: invokespecial 341	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;)V
    //   96: invokespecial 344	com/google/common/util/concurrent/a$c:<init>	(ZLjava/lang/Throwable;)V
    //   99: areturn
    //   100: aload_3
    //   101: astore_2
    //   102: aload_3
    //   103: ifnonnull +7 -> 110
    //   106: getstatic 128	com/google/common/util/concurrent/a:e	Ljava/lang/Object;
    //   109: astore_2
    //   110: aload_2
    //   111: areturn
    //   112: astore_0
    //   113: new 17	com/google/common/util/concurrent/a$d
    //   116: dup
    //   117: aload_0
    //   118: invokespecial 328	com/google/common/util/concurrent/a$d:<init>	(Ljava/lang/Throwable;)V
    //   121: areturn
    //   122: astore_2
    //   123: iload_1
    //   124: ifne +45 -> 169
    //   127: new 182	java/lang/StringBuilder
    //   130: dup
    //   131: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   134: astore_3
    //   135: aload_3
    //   136: ldc_w 346
    //   139: invokevirtual 186	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   142: pop
    //   143: aload_3
    //   144: aload_0
    //   145: invokevirtual 201	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   148: pop
    //   149: new 17	com/google/common/util/concurrent/a$d
    //   152: dup
    //   153: new 340	java/lang/IllegalArgumentException
    //   156: dup
    //   157: aload_3
    //   158: invokevirtual 239	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   161: aload_2
    //   162: invokespecial 349	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   165: invokespecial 328	com/google/common/util/concurrent/a$d:<init>	(Ljava/lang/Throwable;)V
    //   168: areturn
    //   169: new 14	com/google/common/util/concurrent/a$c
    //   172: dup
    //   173: iconst_0
    //   174: aload_2
    //   175: invokespecial 344	com/google/common/util/concurrent/a$c:<init>	(ZLjava/lang/Throwable;)V
    //   178: areturn
    //   179: astore_2
    //   180: iload_1
    //   181: ifeq +46 -> 227
    //   184: new 182	java/lang/StringBuilder
    //   187: dup
    //   188: invokespecial 234	java/lang/StringBuilder:<init>	()V
    //   191: astore_3
    //   192: aload_3
    //   193: ldc_w 338
    //   196: invokevirtual 186	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   199: pop
    //   200: aload_3
    //   201: aload_0
    //   202: invokevirtual 201	java/lang/StringBuilder:append	(Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   205: pop
    //   206: new 14	com/google/common/util/concurrent/a$c
    //   209: dup
    //   210: iconst_0
    //   211: new 340	java/lang/IllegalArgumentException
    //   214: dup
    //   215: aload_3
    //   216: invokevirtual 239	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   219: aload_2
    //   220: invokespecial 349	java/lang/IllegalArgumentException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
    //   223: invokespecial 344	com/google/common/util/concurrent/a$c:<init>	(ZLjava/lang/Throwable;)V
    //   226: areturn
    //   227: new 17	com/google/common/util/concurrent/a$d
    //   230: dup
    //   231: aload_2
    //   232: invokevirtual 211	java/util/concurrent/ExecutionException:getCause	()Ljava/lang/Throwable;
    //   235: invokespecial 328	com/google/common/util/concurrent/a$d:<init>	(Ljava/lang/Throwable;)V
    //   238: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	239	0	paramC	c<?>
    //   34	147	1	bool	boolean
    //   14	97	2	localObject1	Object
    //   122	53	2	localCancellationException	CancellationException
    //   179	53	2	localExecutionException	ExecutionException
    //   53	163	3	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   49	54	112	finally
    //   58	100	112	finally
    //   106	110	112	finally
    //   49	54	122	java/util/concurrent/CancellationException
    //   58	100	122	java/util/concurrent/CancellationException
    //   106	110	122	java/util/concurrent/CancellationException
    //   49	54	179	java/util/concurrent/ExecutionException
    //   58	100	179	java/util/concurrent/ExecutionException
    //   106	110	179	java/util/concurrent/ExecutionException
  }
  
  /* Error */
  private static <V> V w(Future<V> paramFuture)
    throws ExecutionException
  {
    // Byte code:
    //   0: iconst_0
    //   1: istore_1
    //   2: aload_0
    //   3: invokeinterface 356 1 0
    //   8: astore_2
    //   9: iload_1
    //   10: ifeq +9 -> 19
    //   13: invokestatic 360	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   16: invokevirtual 363	java/lang/Thread:interrupt	()V
    //   19: aload_2
    //   20: areturn
    //   21: astore_0
    //   22: iload_1
    //   23: ifeq +9 -> 32
    //   26: invokestatic 360	java/lang/Thread:currentThread	()Ljava/lang/Thread;
    //   29: invokevirtual 363	java/lang/Thread:interrupt	()V
    //   32: aload_0
    //   33: athrow
    //   34: iconst_1
    //   35: istore_1
    //   36: goto -34 -> 2
    //   39: astore_2
    //   40: goto -6 -> 34
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	43	0	paramFuture	Future<V>
    //   1	35	1	i	int
    //   8	12	2	localObject	Object
    //   39	1	2	localInterruptedException	InterruptedException
    // Exception table:
    //   from	to	target	type
    //   2	9	21	finally
    //   2	9	39	java/lang/InterruptedException
  }
  
  private void z()
  {
    k localK;
    do
    {
      localK = h;
    } while (!d.c(this, localK, k.a));
    while (localK != null)
    {
      localK.b();
      localK = c;
    }
  }
  
  protected boolean B(V paramV)
  {
    Object localObject = paramV;
    if (paramV == null) {
      localObject = e;
    }
    if (d.b(this, null, localObject))
    {
      s(this);
      return true;
    }
    return false;
  }
  
  protected boolean C(Throwable paramThrowable)
  {
    paramThrowable = new d((Throwable)j.n(paramThrowable));
    if (d.b(this, null, paramThrowable))
    {
      s(this);
      return true;
    }
    return false;
  }
  
  public void a(Runnable paramRunnable, Executor paramExecutor)
  {
    j.o(paramRunnable, "Runnable was null.");
    j.o(paramExecutor, "Executor was null.");
    if (!isDone())
    {
      Object localObject = g;
      if (localObject != e.a)
      {
        e localE2 = new e(paramRunnable, paramExecutor);
        e localE1;
        do
        {
          d = ((e)localObject);
          if (d.a(this, (e)localObject, localE2)) {
            return;
          }
          localE1 = g;
          localObject = localE1;
        } while (localE1 != e.a);
      }
    }
    t(paramRunnable, paramExecutor);
  }
  
  protected final Throwable b()
  {
    return null;
  }
  
  public boolean cancel(boolean paramBoolean)
  {
    Object localObject1 = f;
    boolean bool = true;
    int i;
    if (localObject1 == null) {
      i = 1;
    } else {
      i = 0;
    }
    if ((i | localObject1 instanceof g) != 0)
    {
      c localC;
      if (b) {
        localC = new c(paramBoolean, new CancellationException("Future.cancel() was called."));
      } else if (paramBoolean) {
        localC = c.a;
      } else {
        localC = c.b;
      }
      Object localObject2;
      do
      {
        if (d.b(this, localObject1, localC))
        {
          if (paramBoolean) {
            x();
          }
          s(this);
          if (!(localObject1 instanceof g)) {
            break;
          }
          c.cancel(paramBoolean);
          return true;
        }
        localObject2 = f;
        localObject1 = localObject2;
      } while ((localObject2 instanceof g));
    }
    bool = false;
    return bool;
  }
  
  public V get()
    throws InterruptedException, ExecutionException
  {
    if (!Thread.interrupted())
    {
      Object localObject = f;
      int i;
      if (localObject != null) {
        i = 1;
      } else {
        i = 0;
      }
      if ((i & (localObject instanceof g ^ true)) != 0) {
        return u(localObject);
      }
      localObject = h;
      if (localObject != k.a)
      {
        k localK2 = new k();
        k localK1;
        do
        {
          localK2.a((k)localObject);
          if (d.c(this, (k)localObject, localK2))
          {
            do
            {
              LockSupport.park(this);
              if (Thread.interrupted()) {
                break;
              }
              localObject = f;
              if (localObject != null) {
                i = 1;
              } else {
                i = 0;
              }
            } while ((i & (localObject instanceof g ^ true)) == 0);
            return u(localObject);
            A(localK2);
            throw new InterruptedException();
          }
          localK1 = h;
          localObject = localK1;
        } while (localK1 != k.a);
      }
      return u(f);
    }
    throw new InterruptedException();
  }
  
  public V get(long paramLong, TimeUnit paramTimeUnit)
    throws InterruptedException, TimeoutException, ExecutionException
  {
    long l3 = paramTimeUnit.toNanos(paramLong);
    if (!Thread.interrupted())
    {
      Object localObject1 = f;
      int i;
      if (localObject1 != null) {
        i = 1;
      } else {
        i = 0;
      }
      if ((i & (localObject1 instanceof g ^ true)) != 0) {
        return u(localObject1);
      }
      long l2;
      if (l3 > 0L) {
        l2 = System.nanoTime() + l3;
      } else {
        l2 = 0L;
      }
      long l1 = l3;
      if (l3 >= 1000L)
      {
        localObject1 = h;
        if (localObject1 != k.a)
        {
          localObject3 = new k();
          do
          {
            ((k)localObject3).a((k)localObject1);
            if (d.c(this, (k)localObject1, (k)localObject3))
            {
              do
              {
                LockSupport.parkNanos(this, l3);
                if (Thread.interrupted()) {
                  break;
                }
                localObject1 = f;
                if (localObject1 != null) {
                  i = 1;
                } else {
                  i = 0;
                }
                if ((i & (localObject1 instanceof g ^ true)) != 0) {
                  return u(localObject1);
                }
                l1 = l2 - System.nanoTime();
                l3 = l1;
              } while (l1 >= 1000L);
              A((k)localObject3);
              break;
              A((k)localObject3);
              throw new InterruptedException();
            }
            localObject2 = h;
            localObject1 = localObject2;
          } while (localObject2 != k.a);
        }
        return u(f);
      }
      while (l1 > 0L)
      {
        localObject1 = f;
        if (localObject1 != null) {
          i = 1;
        } else {
          i = 0;
        }
        if ((i & (localObject1 instanceof g ^ true)) != 0) {
          return u(localObject1);
        }
        if (!Thread.interrupted()) {
          l1 = l2 - System.nanoTime();
        } else {
          throw new InterruptedException();
        }
      }
      Object localObject3 = toString();
      Object localObject2 = paramTimeUnit.toString();
      localObject1 = Locale.ROOT;
      String str = ((String)localObject2).toLowerCase((Locale)localObject1);
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Waited ");
      ((StringBuilder)localObject2).append(paramLong);
      ((StringBuilder)localObject2).append(" ");
      ((StringBuilder)localObject2).append(paramTimeUnit.toString().toLowerCase((Locale)localObject1));
      localObject2 = ((StringBuilder)localObject2).toString();
      localObject1 = localObject2;
      if (l1 + 1000L < 0L)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append(" (plus ");
        localObject1 = ((StringBuilder)localObject1).toString();
        l1 = -l1;
        paramLong = paramTimeUnit.convert(l1, TimeUnit.NANOSECONDS);
        l1 -= paramTimeUnit.toNanos(paramLong);
        boolean bool = paramLong < 0L;
        if ((bool) && (l1 <= 1000L)) {
          i = 0;
        } else {
          i = 1;
        }
        paramTimeUnit = (TimeUnit)localObject1;
        if (bool)
        {
          paramTimeUnit = new StringBuilder();
          paramTimeUnit.append((String)localObject1);
          paramTimeUnit.append(paramLong);
          paramTimeUnit.append(" ");
          paramTimeUnit.append(str);
          localObject1 = paramTimeUnit.toString();
          paramTimeUnit = (TimeUnit)localObject1;
          if (i != 0)
          {
            paramTimeUnit = new StringBuilder();
            paramTimeUnit.append((String)localObject1);
            paramTimeUnit.append(",");
            paramTimeUnit = paramTimeUnit.toString();
          }
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramTimeUnit);
          ((StringBuilder)localObject1).append(" ");
          paramTimeUnit = ((StringBuilder)localObject1).toString();
        }
        localObject1 = paramTimeUnit;
        if (i != 0)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramTimeUnit);
          ((StringBuilder)localObject1).append(l1);
          ((StringBuilder)localObject1).append(" nanoseconds ");
          localObject1 = ((StringBuilder)localObject1).toString();
        }
        paramTimeUnit = new StringBuilder();
        paramTimeUnit.append((String)localObject1);
        paramTimeUnit.append("delay)");
        localObject1 = paramTimeUnit.toString();
      }
      if (isDone())
      {
        paramTimeUnit = new StringBuilder();
        paramTimeUnit.append((String)localObject1);
        paramTimeUnit.append(" but future completed as timeout expired");
        throw new TimeoutException(paramTimeUnit.toString());
      }
      paramTimeUnit = new StringBuilder();
      paramTimeUnit.append((String)localObject1);
      paramTimeUnit.append(" for ");
      paramTimeUnit.append((String)localObject3);
      throw new TimeoutException(paramTimeUnit.toString());
    }
    throw new InterruptedException();
  }
  
  public boolean isCancelled()
  {
    return f instanceof c;
  }
  
  public boolean isDone()
  {
    Object localObject = f;
    int i;
    if (localObject != null) {
      i = 1;
    } else {
      i = 0;
    }
    return (localObject instanceof g ^ true) & i;
  }
  
  protected void o() {}
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(super.toString());
    localStringBuilder.append("[status=");
    if (isCancelled()) {
      localStringBuilder.append("CANCELLED");
    } else if (isDone()) {
      m(localStringBuilder);
    } else {
      n(localStringBuilder);
    }
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
  
  protected void x() {}
  
  protected String y()
  {
    if ((this instanceof ScheduledFuture))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("remaining delay=[");
      localStringBuilder.append(((ScheduledFuture)this).getDelay(TimeUnit.MILLISECONDS));
      localStringBuilder.append(" ms]");
      return localStringBuilder.toString();
    }
    return null;
  }
  
  private static abstract class b
  {
    private b() {}
    
    abstract boolean a(a<?> paramA, a.e paramE1, a.e paramE2);
    
    abstract boolean b(a<?> paramA, Object paramObject1, Object paramObject2);
    
    abstract boolean c(a<?> paramA, a.k paramK1, a.k paramK2);
    
    abstract void d(a.k paramK1, a.k paramK2);
    
    abstract void e(a.k paramK, Thread paramThread);
  }
  
  private static final class c
  {
    static final c a = new c(true, null);
    static final c b;
    final boolean c;
    final Throwable d;
    
    static
    {
      if (a.d())
      {
        b = null;
        a = null;
        return;
      }
      b = new c(false, null);
    }
    
    c(boolean paramBoolean, Throwable paramThrowable)
    {
      c = paramBoolean;
      d = paramThrowable;
    }
  }
  
  private static final class d
  {
    static final d a = new d(new a("Failure occurred while trying to finish a future."));
    final Throwable b;
    
    d(Throwable paramThrowable)
    {
      b = ((Throwable)j.n(paramThrowable));
    }
    
    static final class a
      extends Throwable
    {
      a(String paramString)
      {
        super();
      }
      
      public Throwable fillInStackTrace()
      {
        return this;
      }
    }
  }
  
  private static final class e
  {
    static final e a = new e(null, null);
    final Runnable b;
    final Executor c;
    e d;
    
    e(Runnable paramRunnable, Executor paramExecutor)
    {
      b = paramRunnable;
      c = paramExecutor;
    }
  }
  
  private static final class f
    extends a.b
  {
    final AtomicReferenceFieldUpdater<a.k, Thread> a;
    final AtomicReferenceFieldUpdater<a.k, a.k> b;
    final AtomicReferenceFieldUpdater<a, a.k> c;
    final AtomicReferenceFieldUpdater<a, a.e> d;
    final AtomicReferenceFieldUpdater<a, Object> e;
    
    f(AtomicReferenceFieldUpdater<a.k, Thread> paramAtomicReferenceFieldUpdater, AtomicReferenceFieldUpdater<a.k, a.k> paramAtomicReferenceFieldUpdater1, AtomicReferenceFieldUpdater<a, a.k> paramAtomicReferenceFieldUpdater2, AtomicReferenceFieldUpdater<a, a.e> paramAtomicReferenceFieldUpdater3, AtomicReferenceFieldUpdater<a, Object> paramAtomicReferenceFieldUpdater4)
    {
      super();
      a = paramAtomicReferenceFieldUpdater;
      b = paramAtomicReferenceFieldUpdater1;
      c = paramAtomicReferenceFieldUpdater2;
      d = paramAtomicReferenceFieldUpdater3;
      e = paramAtomicReferenceFieldUpdater4;
    }
    
    boolean a(a<?> paramA, a.e paramE1, a.e paramE2)
    {
      return d.compareAndSet(paramA, paramE1, paramE2);
    }
    
    boolean b(a<?> paramA, Object paramObject1, Object paramObject2)
    {
      return e.compareAndSet(paramA, paramObject1, paramObject2);
    }
    
    boolean c(a<?> paramA, a.k paramK1, a.k paramK2)
    {
      return c.compareAndSet(paramA, paramK1, paramK2);
    }
    
    void d(a.k paramK1, a.k paramK2)
    {
      b.lazySet(paramK1, paramK2);
    }
    
    void e(a.k paramK, Thread paramThread)
    {
      a.lazySet(paramK, paramThread);
    }
  }
  
  private static final class g<V>
    implements Runnable
  {
    final a<V> b;
    final c<? extends V> c;
    
    public void run()
    {
      if (a.e(b) != this) {
        return;
      }
      Object localObject = a.g(c);
      if (a.c().b(b, this, localObject)) {
        a.h(b);
      }
    }
  }
  
  private static final class h
    extends a.b
  {
    private h()
    {
      super();
    }
    
    boolean a(a<?> paramA, a.e paramE1, a.e paramE2)
    {
      try
      {
        if (a.k(paramA) == paramE1)
        {
          a.l(paramA, paramE2);
          return true;
        }
        return false;
      }
      finally {}
    }
    
    boolean b(a<?> paramA, Object paramObject1, Object paramObject2)
    {
      try
      {
        if (a.e(paramA) == paramObject1)
        {
          a.f(paramA, paramObject2);
          return true;
        }
        return false;
      }
      finally {}
    }
    
    boolean c(a<?> paramA, a.k paramK1, a.k paramK2)
    {
      try
      {
        if (a.i(paramA) == paramK1)
        {
          a.j(paramA, paramK2);
          return true;
        }
        return false;
      }
      finally {}
    }
    
    void d(a.k paramK1, a.k paramK2)
    {
      c = paramK2;
    }
    
    void e(a.k paramK, Thread paramThread)
    {
      b = paramThread;
    }
  }
  
  static abstract class i<V>
    extends a<V>
  {}
  
  private static final class j
    extends a.b
  {
    static final Unsafe a;
    static final long b;
    static final long c;
    static final long d;
    static final long e;
    static final long f;
    
    /* Error */
    static
    {
      // Byte code:
      //   0: invokestatic 31	sun/misc/Unsafe:getUnsafe	()Lsun/misc/Unsafe;
      //   3: astore_0
      //   4: goto +17 -> 21
      //   7: new 9	com/google/common/util/concurrent/a$j$a
      //   10: dup
      //   11: invokespecial 34	com/google/common/util/concurrent/a$j$a:<init>	()V
      //   14: invokestatic 40	java/security/AccessController:doPrivileged	(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      //   17: checkcast 27	sun/misc/Unsafe
      //   20: astore_0
      //   21: aload_0
      //   22: ldc 6
      //   24: ldc 42
      //   26: invokevirtual 48	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
      //   29: invokevirtual 52	sun/misc/Unsafe:objectFieldOffset	(Ljava/lang/reflect/Field;)J
      //   32: putstatic 54	com/google/common/util/concurrent/a$j:c	J
      //   35: aload_0
      //   36: ldc 6
      //   38: ldc 56
      //   40: invokevirtual 48	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
      //   43: invokevirtual 52	sun/misc/Unsafe:objectFieldOffset	(Ljava/lang/reflect/Field;)J
      //   46: putstatic 58	com/google/common/util/concurrent/a$j:b	J
      //   49: aload_0
      //   50: ldc 6
      //   52: ldc 59
      //   54: invokevirtual 48	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
      //   57: invokevirtual 52	sun/misc/Unsafe:objectFieldOffset	(Ljava/lang/reflect/Field;)J
      //   60: putstatic 61	com/google/common/util/concurrent/a$j:d	J
      //   63: aload_0
      //   64: ldc 63
      //   66: ldc 64
      //   68: invokevirtual 48	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
      //   71: invokevirtual 52	sun/misc/Unsafe:objectFieldOffset	(Ljava/lang/reflect/Field;)J
      //   74: putstatic 66	com/google/common/util/concurrent/a$j:e	J
      //   77: aload_0
      //   78: ldc 63
      //   80: ldc 67
      //   82: invokevirtual 48	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
      //   85: invokevirtual 52	sun/misc/Unsafe:objectFieldOffset	(Ljava/lang/reflect/Field;)J
      //   88: putstatic 69	com/google/common/util/concurrent/a$j:f	J
      //   91: aload_0
      //   92: putstatic 71	com/google/common/util/concurrent/a$j:a	Lsun/misc/Unsafe;
      //   95: return
      //   96: astore_0
      //   97: aload_0
      //   98: invokestatic 76	com/google/common/base/p:f	(Ljava/lang/Throwable;)V
      //   101: new 78	java/lang/RuntimeException
      //   104: dup
      //   105: aload_0
      //   106: invokespecial 80	java/lang/RuntimeException:<init>	(Ljava/lang/Throwable;)V
      //   109: athrow
      //   110: astore_0
      //   111: new 78	java/lang/RuntimeException
      //   114: dup
      //   115: ldc 82
      //   117: aload_0
      //   118: invokevirtual 86	java/security/PrivilegedActionException:getCause	()Ljava/lang/Throwable;
      //   121: invokespecial 89	java/lang/RuntimeException:<init>	(Ljava/lang/String;Ljava/lang/Throwable;)V
      //   124: athrow
      //   125: astore_0
      //   126: goto -119 -> 7
      // Local variable table:
      //   start	length	slot	name	signature
      //   3	89	0	localUnsafe	Unsafe
      //   96	10	0	localException	Exception
      //   110	8	0	localPrivilegedActionException	java.security.PrivilegedActionException
      //   125	1	0	localSecurityException	SecurityException
      // Exception table:
      //   from	to	target	type
      //   21	95	96	java/lang/Exception
      //   7	21	110	java/security/PrivilegedActionException
      //   0	4	125	java/lang/SecurityException
    }
    
    private j()
    {
      super();
    }
    
    boolean a(a<?> paramA, a.e paramE1, a.e paramE2)
    {
      return a.compareAndSwapObject(paramA, b, paramE1, paramE2);
    }
    
    boolean b(a<?> paramA, Object paramObject1, Object paramObject2)
    {
      return a.compareAndSwapObject(paramA, d, paramObject1, paramObject2);
    }
    
    boolean c(a<?> paramA, a.k paramK1, a.k paramK2)
    {
      return a.compareAndSwapObject(paramA, c, paramK1, paramK2);
    }
    
    void d(a.k paramK1, a.k paramK2)
    {
      a.putObject(paramK1, f, paramK2);
    }
    
    void e(a.k paramK, Thread paramThread)
    {
      a.putObject(paramK, e, paramThread);
    }
    
    static final class a
      implements PrivilegedExceptionAction<Unsafe>
    {
      a() {}
      
      public Unsafe a()
        throws Exception
      {
        Field[] arrayOfField = Unsafe.class.getDeclaredFields();
        int j = arrayOfField.length;
        int i = 0;
        while (i < j)
        {
          Object localObject = arrayOfField[i];
          ((Field)localObject).setAccessible(true);
          localObject = ((Field)localObject).get(null);
          if (Unsafe.class.isInstance(localObject)) {
            return (Unsafe)Unsafe.class.cast(localObject);
          }
          i += 1;
        }
        throw new NoSuchFieldError("the Unsafe");
      }
    }
  }
  
  private static final class k
  {
    static final k a = new k(false);
    volatile Thread b;
    volatile k c;
    
    k()
    {
      a.c().e(this, Thread.currentThread());
    }
    
    k(boolean paramBoolean) {}
    
    void a(k paramK)
    {
      a.c().d(this, paramK);
    }
    
    void b()
    {
      Thread localThread = b;
      if (localThread != null)
      {
        b = null;
        LockSupport.unpark(localThread);
      }
    }
  }
}
