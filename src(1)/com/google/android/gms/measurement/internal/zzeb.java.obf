package com.google.android.gms.measurement.internal;

import android.content.Context;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzhe;
import com.google.android.gms.internal.measurement.zzhp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@VisibleForTesting
public final class zzeb
{
  public static final zzea zzA;
  public static final zzea zzB;
  public static final zzea zzC;
  public static final zzea zzD;
  public static final zzea zzE;
  public static final zzea zzF;
  public static final zzea zzG;
  public static final zzea zzH;
  public static final zzea zzI;
  public static final zzea zzJ;
  public static final zzea zzK;
  public static final zzea zzL;
  public static final zzea zzM;
  public static final zzea zzN;
  public static final zzea zzO;
  public static final zzea zzP;
  public static final zzea zzQ;
  public static final zzea zzR;
  public static final zzea zzS;
  public static final zzea zzT;
  public static final zzea zzU;
  public static final zzea zzV;
  public static final zzea zzW;
  public static final zzea zzX;
  public static final zzea zzY;
  public static final zzea zzZ;
  public static final zzea zza;
  public static final zzea zzaA;
  public static final zzea zzaB;
  private static final List zzaC = Collections.synchronizedList(new ArrayList());
  private static final Set zzaD = Collections.synchronizedSet(new HashSet());
  public static final zzea zzaa;
  public static final zzea zzab;
  public static final zzea zzac;
  public static final zzea zzad;
  public static final zzea zzae;
  public static final zzea zzaf;
  public static final zzea zzag;
  public static final zzea zzah;
  public static final zzea zzai;
  public static final zzea zzaj;
  public static final zzea zzak;
  public static final zzea zzal;
  public static final zzea zzam;
  public static final zzea zzan;
  public static final zzea zzao;
  public static final zzea zzap;
  public static final zzea zzaq;
  public static final zzea zzar;
  public static final zzea zzas;
  public static final zzea zzat;
  public static final zzea zzau;
  public static final zzea zzav;
  public static final zzea zzaw;
  public static final zzea zzax;
  public static final zzea zzay;
  public static final zzea zzaz;
  public static final zzea zzb;
  public static final zzea zzc;
  public static final zzea zzd;
  public static final zzea zze;
  public static final zzea zzf;
  public static final zzea zzg;
  public static final zzea zzh;
  public static final zzea zzi;
  public static final zzea zzj;
  public static final zzea zzk;
  public static final zzea zzl;
  public static final zzea zzm;
  public static final zzea zzn;
  public static final zzea zzo;
  public static final zzea zzp;
  public static final zzea zzq;
  public static final zzea zzr;
  public static final zzea zzs;
  public static final zzea zzt;
  public static final zzea zzu;
  public static final zzea zzv;
  public static final zzea zzw;
  public static final zzea zzx;
  public static final zzea zzy;
  public static final zzea zzz;
  
  static
  {
    Object localObject3 = Long.valueOf(10000L);
    zza = zza("measurement.ad_id_cache_time", localObject3, localObject3, zzbj.zza);
    Object localObject2 = Long.valueOf(86400000L);
    zzb = zza("measurement.monitoring.sample_period_millis", localObject2, localObject2, zzbb.zza);
    Object localObject4 = Long.valueOf(3600000L);
    zzc = zza("measurement.config.cache_time", localObject2, localObject4, zzbn.zza);
    zzd = zza("measurement.config.url_scheme", "https", "https", zzbz.zza);
    zze = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzcl.zza);
    Object localObject1 = Integer.valueOf(100);
    zzf = zza("measurement.upload.max_bundles", localObject1, localObject1, zzcx.zza);
    Object localObject5 = Integer.valueOf(65536);
    zzg = zza("measurement.upload.max_batch_size", localObject5, localObject5, zzdj.zza);
    zzh = zza("measurement.upload.max_bundle_size", localObject5, localObject5, zzdr.zza);
    Integer localInteger = Integer.valueOf(1000);
    zzi = zza("measurement.upload.max_events_per_bundle", localInteger, localInteger, zzds.zza);
    localObject5 = Integer.valueOf(100000);
    zzj = zza("measurement.upload.max_events_per_day", localObject5, localObject5, zzdt.zza);
    zzk = zza("measurement.upload.max_error_events_per_day", localInteger, localInteger, zzbu.zza);
    localInteger = Integer.valueOf(50000);
    zzl = zza("measurement.upload.max_public_events_per_day", localInteger, localInteger, zzcf.zza);
    localInteger = Integer.valueOf(10000);
    zzm = zza("measurement.upload.max_conversions_per_day", localInteger, localInteger, zzcq.zza);
    localInteger = Integer.valueOf(10);
    zzn = zza("measurement.upload.max_realtime_events_per_day", localInteger, localInteger, zzdb.zza);
    zzo = zza("measurement.store.max_stored_events_per_app", localObject5, localObject5, zzdm.zza);
    zzp = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzdu.zza);
    localObject5 = Long.valueOf(43200000L);
    zzq = zza("measurement.upload.backoff_period", localObject5, localObject5, zzdv.zza);
    zzr = zza("measurement.upload.window_interval", localObject4, localObject4, zzdw.zza);
    zzs = zza("measurement.upload.interval", localObject4, localObject4, zzaz.zza);
    zzt = zza("measurement.upload.realtime_upload_interval", localObject3, localObject3, zzba.zza);
    localObject3 = Long.valueOf(1000L);
    zzu = zza("measurement.upload.debug_upload_interval", localObject3, localObject3, zzbc.zza);
    localObject3 = Long.valueOf(500L);
    zzv = zza("measurement.upload.minimum_delay", localObject3, localObject3, zzbd.zza);
    localObject3 = Long.valueOf(60000L);
    zzw = zza("measurement.alarm_manager.minimum_interval", localObject3, localObject3, zzbe.zza);
    zzx = zza("measurement.upload.stale_data_deletion_interval", localObject2, localObject2, zzbf.zza);
    localObject2 = Long.valueOf(604800000L);
    zzy = zza("measurement.upload.refresh_blacklisted_config_interval", localObject2, localObject2, zzbg.zza);
    localObject3 = Long.valueOf(15000L);
    zzz = zza("measurement.upload.initial_upload_delay_time", localObject3, localObject3, zzbh.zza);
    localObject3 = Long.valueOf(1800000L);
    zzA = zza("measurement.upload.retry_time", localObject3, localObject3, zzbi.zza);
    localObject3 = Integer.valueOf(6);
    zzB = zza("measurement.upload.retry_count", localObject3, localObject3, zzbk.zza);
    localObject3 = Long.valueOf(2419200000L);
    zzC = zza("measurement.upload.max_queue_time", localObject3, localObject3, zzbl.zza);
    localObject3 = Integer.valueOf(4);
    zzD = zza("measurement.lifetimevalue.max_currency_tracked", localObject3, localObject3, zzbm.zza);
    localObject3 = Integer.valueOf(200);
    zzE = zza("measurement.audience.filter_result_max_count", localObject3, localObject3, zzbo.zza);
    localObject3 = Integer.valueOf(25);
    zzF = zza("measurement.upload.max_public_user_properties", localObject3, localObject3, null);
    localObject4 = Integer.valueOf(500);
    zzG = zza("measurement.upload.max_event_name_cardinality", localObject4, localObject4, null);
    zzH = zza("measurement.upload.max_public_event_params", localObject3, localObject3, null);
    localObject3 = Long.valueOf(5000L);
    zzI = zza("measurement.service_client.idle_disconnect_millis", localObject3, localObject3, zzbp.zza);
    localObject3 = Boolean.FALSE;
    zzJ = zza("measurement.test.boolean_flag", localObject3, localObject3, zzbq.zza);
    zzK = zza("measurement.test.string_flag", "---", "---", zzbr.zza);
    localObject4 = Long.valueOf(-1L);
    zzL = zza("measurement.test.long_flag", localObject4, localObject4, zzbs.zza);
    localObject4 = Integer.valueOf(-2);
    zzM = zza("measurement.test.int_flag", localObject4, localObject4, zzbt.zza);
    localObject4 = Double.valueOf(-3.0D);
    zzN = zza("measurement.test.double_flag", localObject4, localObject4, zzbv.zza);
    localObject4 = Integer.valueOf(50);
    zzO = zza("measurement.experiment.max_ids", localObject4, localObject4, zzbw.zza);
    zzP = zza("measurement.max_bundles_per_iteration", localObject1, localObject1, zzbx.zza);
    zzQ = zza("measurement.sdk.attribution.cache.ttl", localObject2, localObject2, zzby.zza);
    localObject1 = Long.valueOf(7200000L);
    zzR = zza("measurement.redaction.app_instance_id.ttl", localObject1, localObject1, zzca.zza);
    localObject1 = Boolean.TRUE;
    zzS = zza("measurement.collection.log_event_and_bundle_v2", localObject1, localObject1, zzcb.zza);
    zzT = zza("measurement.quality.checksum", localObject3, localObject3, null);
    zzU = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", localObject3, localObject3, zzcc.zza);
    zzV = zza("measurement.audience.refresh_event_count_filters_timestamp", localObject3, localObject3, zzcd.zza);
    zzW = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", localObject3, localObject3, zzce.zza);
    zzX = zza("measurement.sdk.collection.retrieve_deeplink_from_bow_2", localObject1, localObject1, zzcg.zza);
    zzY = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", localObject3, localObject3, zzch.zza);
    zzZ = zza("measurement.lifecycle.app_in_background_parameter", localObject3, localObject3, zzci.zza);
    zzaa = zza("measurement.integration.disable_firebase_instance_id", localObject3, localObject3, zzcj.zza);
    zzab = zza("measurement.collection.service.update_with_analytics_fix", localObject3, localObject3, zzck.zza);
    zzac = zza("measurement.client.firebase_feature_rollout.v1.enable", localObject1, localObject1, zzcm.zza);
    zzad = zza("measurement.client.sessions.check_on_reset_and_enable2", localObject1, localObject1, zzcn.zza);
    zzae = zza("measurement.collection.synthetic_data_mitigation", localObject3, localObject3, zzco.zza);
    localObject2 = Integer.valueOf(203600);
    zzaf = zza("measurement.service.storage_consent_support_version", localObject2, localObject2, zzcp.zza);
    zzag = zza("measurement.client.click_identifier_control.dev", localObject3, localObject3, zzcr.zza);
    zzah = zza("measurement.service.click_identifier_control", localObject3, localObject3, zzcs.zza);
    zzai = zza("measurement.service.store_null_safelist", localObject1, localObject1, zzct.zza);
    zzaj = zza("measurement.service.store_safelist", localObject1, localObject1, zzcu.zza);
    zzak = zza("measurement.redaction.no_aiid_in_config_request", localObject1, localObject1, zzcv.zza);
    zzal = zza("measurement.redaction.config_redacted_fields", localObject1, localObject1, zzcw.zza);
    zzam = zza("measurement.redaction.upload_redacted_fields", localObject1, localObject1, zzcy.zza);
    zzan = zza("measurement.redaction.upload_subdomain_override", localObject1, localObject1, zzcz.zza);
    zzao = zza("measurement.redaction.device_info", localObject1, localObject1, zzda.zza);
    zzap = zza("measurement.redaction.user_id", localObject1, localObject1, zzdc.zza);
    zzaq = zza("measurement.redaction.google_signals", localObject1, localObject1, zzdd.zza);
    zzar = zza("measurement.collection.enable_session_stitching_token.service", localObject3, localObject3, zzde.zza);
    zzas = zza("measurement.collection.enable_session_stitching_token.client.dev", localObject3, localObject3, zzdf.zza);
    zzat = zza("measurement.redaction.app_instance_id", localObject1, localObject1, zzdg.zza);
    zzau = zza("measurement.redaction.populate_ephemeral_app_instance_id", localObject1, localObject1, zzdh.zza);
    zzav = zza("measurement.redaction.enhanced_uid", localObject1, localObject1, zzdi.zza);
    zzaw = zza("measurement.redaction.e_tag", localObject1, localObject1, zzdk.zza);
    zzax = zza("measurement.redaction.client_ephemeral_aiid_generation", localObject1, localObject1, zzdl.zza);
    zzay = zza("measurement.redaction.retain_major_os_version", localObject1, localObject1, zzdn.zza);
    zzaz = zza("measurement.redaction.scion_payload_generator", localObject1, localObject1, zzdo.zza);
    zzaA = zza("measurement.audience.dynamic_filters.oob_fix", localObject1, localObject1, zzdp.zza);
    zzaB = zza("measurement.service.clear_global_params_on_uninstall", localObject1, localObject1, zzdq.zza);
  }
  
  @VisibleForTesting
  static zzea zza(String paramString, Object paramObject1, Object paramObject2, zzdx paramZzdx)
  {
    paramString = new zzea(paramString, paramObject1, paramObject2, paramZzdx, null);
    zzaC.add(paramString);
    return paramString;
  }
  
  public static Map zzc(Context paramContext)
  {
    paramContext = zzhe.zza(paramContext.getContentResolver(), zzhp.zza("com.google.android.gms.measurement"), zzay.zza);
    if (paramContext == null) {
      return Collections.emptyMap();
    }
    return paramContext.zzc();
  }
}
