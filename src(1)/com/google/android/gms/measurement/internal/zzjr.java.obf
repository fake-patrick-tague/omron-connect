package com.google.android.gms.measurement.internal;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Looper;
import android.os.RemoteException;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.internal.BaseGmsClient;
import com.google.android.gms.common.internal.BaseGmsClient.BaseConnectionCallbacks;
import com.google.android.gms.common.internal.BaseGmsClient.BaseOnConnectionFailedListener;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.VisibleForTesting;

@VisibleForTesting
public final class zzjr
  implements ServiceConnection, BaseGmsClient.BaseConnectionCallbacks, BaseGmsClient.BaseOnConnectionFailedListener
{
  private volatile boolean zzb;
  private volatile zzek zzc;
  
  protected zzjr(zzjs paramZzjs) {}
  
  public final void onConnected(Bundle paramBundle)
  {
    Preconditions.checkMainThread("MeasurementServiceConnection.onConnected");
    try
    {
      try
      {
        Preconditions.checkNotNull(zzc);
        paramBundle = (zzee)zzc.getService();
        zza.zzs.zzaz().zzp(new zzjo(this, paramBundle));
      }
      finally
      {
        break label68;
      }
    }
    catch (DeadObjectException|IllegalStateException paramBundle)
    {
      for (;;) {}
    }
    zzc = null;
    zzb = false;
    return;
    label68:
    throw paramBundle;
  }
  
  public final void onConnectionFailed(ConnectionResult paramConnectionResult)
  {
    Preconditions.checkMainThread("MeasurementServiceConnection.onConnectionFailed");
    zzeo localZzeo = zza.zzs.zzl();
    if (localZzeo != null) {
      localZzeo.zzk().zzb("Service connection failed", paramConnectionResult);
    }
    try
    {
      zzb = false;
      zzc = null;
      zza.zzs.zzaz().zzp(new zzjq(this));
      return;
    }
    finally {}
  }
  
  public final void onConnectionSuspended(int paramInt)
  {
    Preconditions.checkMainThread("MeasurementServiceConnection.onConnectionSuspended");
    zza.zzs.zzay().zzc().zza("Service connection suspended");
    zza.zzs.zzaz().zzp(new zzjp(this));
  }
  
  public final void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
  {
    Preconditions.checkMainThread("MeasurementServiceConnection.onServiceConnected");
    if (paramIBinder == null) {}
    try
    {
      zzb = false;
      zza.zzs.zzay().zzd().zza("Service connected with null binder");
      return;
    }
    finally
    {
      Object localObject;
      IInterface localIInterface;
      break label246;
    }
    localObject = null;
    localIInterface = null;
    paramComponentName = localObject;
    try
    {
      str = paramIBinder.getInterfaceDescriptor();
      paramComponentName = localObject;
      if (!"com.google.android.gms.measurement.internal.IMeasurementService".equals(str)) {
        break label136;
      }
      paramComponentName = localObject;
      localIInterface = paramIBinder.queryLocalInterface("com.google.android.gms.measurement.internal.IMeasurementService");
      paramComponentName = localObject;
      if ((localIInterface instanceof zzee))
      {
        paramComponentName = localObject;
        paramIBinder = (zzee)localIInterface;
      }
      else
      {
        paramComponentName = localObject;
        paramIBinder = new zzec(paramIBinder);
      }
    }
    catch (RemoteException paramIBinder)
    {
      for (;;)
      {
        String str;
      }
    }
    paramComponentName = paramIBinder;
    zza.zzs.zzay().zzj().zza("Bound to IMeasurementService interface");
    paramComponentName = paramIBinder;
    break label186;
    label136:
    paramComponentName = localObject;
    zza.zzs.zzay().zzd().zzb("Got binder with a wrong descriptor", str);
    paramComponentName = localIInterface;
    break label186;
    zza.zzs.zzay().zzd().zza("Service connect failed to get IMeasurementService");
    label186:
    if (paramComponentName == null) {
      zzb = false;
    }
    try
    {
      ConnectionTracker.getInstance().unbindService(zza.zzs.zzau(), zzjs.zzi(zza));
    }
    catch (IllegalArgumentException paramComponentName)
    {
      for (;;) {}
    }
    zza.zzs.zzaz().zzp(new zzjm(this, paramComponentName));
    return;
    label246:
    throw paramComponentName;
  }
  
  public final void onServiceDisconnected(ComponentName paramComponentName)
  {
    Preconditions.checkMainThread("MeasurementServiceConnection.onServiceDisconnected");
    zza.zzs.zzay().zzc().zza("Service disconnected");
    zza.zzs.zzaz().zzp(new zzjn(this, paramComponentName));
  }
  
  public final void zzb(Intent paramIntent)
  {
    zza.zzg();
    Context localContext = zza.zzs.zzau();
    ConnectionTracker localConnectionTracker = ConnectionTracker.getInstance();
    try
    {
      if (zzb)
      {
        zza.zzs.zzay().zzj().zza("Connection attempt already in progress");
        return;
      }
      zza.zzs.zzay().zzj().zza("Using local app measurement service");
      zzb = true;
      localConnectionTracker.bindService(localContext, paramIntent, zzjs.zzi(zza), 129);
      return;
    }
    finally {}
  }
  
  public final void zzc()
  {
    zza.zzg();
    Context localContext = zza.zzs.zzau();
    try
    {
      if (zzb)
      {
        zza.zzs.zzay().zzj().zza("Connection attempt already in progress");
        return;
      }
      if ((zzc != null) && ((zzc.isConnecting()) || (zzc.isConnected())))
      {
        zza.zzs.zzay().zzj().zza("Already awaiting connection attempt");
        return;
      }
      zzc = new zzek(localContext, Looper.getMainLooper(), this, this);
      zza.zzs.zzay().zzj().zza("Connecting to remote service");
      zzb = true;
      Preconditions.checkNotNull(zzc);
      zzc.checkAvailabilityAndConnect();
      return;
    }
    finally {}
  }
  
  public final void zzd()
  {
    if ((zzc != null) && ((zzc.isConnected()) || (zzc.isConnecting()))) {
      zzc.disconnect();
    }
    zzc = null;
  }
}
