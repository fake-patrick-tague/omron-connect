package com.google.android.gms.measurement.internal;

import android.os.Bundle;
import android.os.Parcelable;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.internal.measurement.zzaa;
import com.google.android.gms.internal.measurement.zzel;
import com.google.android.gms.internal.measurement.zzeq;
import com.google.android.gms.internal.measurement.zzes;
import com.google.android.gms.internal.measurement.zzex;
import com.google.android.gms.internal.measurement.zzfo;
import com.google.android.gms.internal.measurement.zzfq;
import com.google.android.gms.internal.measurement.zzfr;
import com.google.android.gms.internal.measurement.zzfs;
import com.google.android.gms.internal.measurement.zzfv;
import com.google.android.gms.internal.measurement.zzfw;
import com.google.android.gms.internal.measurement.zzga;
import com.google.android.gms.internal.measurement.zzgb;
import com.google.android.gms.internal.measurement.zzgc;
import com.google.android.gms.internal.measurement.zzgh;
import com.google.android.gms.internal.measurement.zzgj;
import com.google.android.gms.internal.measurement.zzgk;
import com.google.android.gms.internal.measurement.zzgl;
import com.google.android.gms.internal.measurement.zzjq;
import com.google.android.gms.internal.measurement.zzka;
import com.google.android.gms.internal.measurement.zzko;
import com.google.android.gms.internal.measurement.zzlk;
import com.google.android.gms.internal.measurement.zzoz;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.zip.GZIPOutputStream;

public final class zzlb
  extends zzkn
{
  zzlb(zzkz paramZzkz)
  {
    super(paramZzkz);
  }
  
  static final boolean zzA(zzaw paramZzaw, zzq paramZzq)
  {
    Preconditions.checkNotNull(paramZzaw);
    Preconditions.checkNotNull(paramZzq);
    return (!TextUtils.isEmpty(zzb)) || (!TextUtils.isEmpty(zzq));
  }
  
  static final zzfw zzB(zzfs paramZzfs, String paramString)
  {
    paramZzfs = paramZzfs.zzi().iterator();
    while (paramZzfs.hasNext())
    {
      zzfw localZzfw = (zzfw)paramZzfs.next();
      if (localZzfw.zzg().equals(paramString)) {
        return localZzfw;
      }
    }
    return null;
  }
  
  static final Object zzC(zzfs paramZzfs, String paramString)
  {
    paramZzfs = zzB(paramZzfs, paramString);
    if (paramZzfs != null)
    {
      if (paramZzfs.zzy()) {
        return paramZzfs.zzh();
      }
      if (paramZzfs.zzw()) {
        return Long.valueOf(paramZzfs.zzd());
      }
      if (paramZzfs.zzu()) {
        return Double.valueOf(paramZzfs.zza());
      }
      if (paramZzfs.zzc() > 0)
      {
        paramString = paramZzfs.zzi();
        paramZzfs = new ArrayList();
        paramString = paramString.iterator();
        while (paramString.hasNext())
        {
          Object localObject = (zzfw)paramString.next();
          if (localObject != null)
          {
            Bundle localBundle = new Bundle();
            localObject = ((zzfw)localObject).zzi().iterator();
            while (((Iterator)localObject).hasNext())
            {
              zzfw localZzfw = (zzfw)((Iterator)localObject).next();
              if (localZzfw.zzy()) {
                localBundle.putString(localZzfw.zzg(), localZzfw.zzh());
              } else if (localZzfw.zzw()) {
                localBundle.putLong(localZzfw.zzg(), localZzfw.zzd());
              } else if (localZzfw.zzu()) {
                localBundle.putDouble(localZzfw.zzg(), localZzfw.zza());
              }
            }
            if (!localBundle.isEmpty()) {
              paramZzfs.add(localBundle);
            }
          }
        }
        return (Bundle[])paramZzfs.toArray(new Bundle[paramZzfs.size()]);
      }
    }
    return null;
  }
  
  private final void zzD(StringBuilder paramStringBuilder, int paramInt, List paramList)
  {
    if (paramList == null) {
      return;
    }
    paramInt += 1;
    Iterator localIterator = paramList.iterator();
    while (localIterator.hasNext())
    {
      zzfw localZzfw = (zzfw)localIterator.next();
      if (localZzfw != null)
      {
        zzF(paramStringBuilder, paramInt);
        paramStringBuilder.append("param {\n");
        boolean bool = localZzfw.zzx();
        Object localObject = null;
        if (bool) {
          paramList = zzs.zzj().zze(localZzfw.zzg());
        } else {
          paramList = null;
        }
        zzI(paramStringBuilder, paramInt, "name", paramList);
        if (localZzfw.zzy()) {
          paramList = localZzfw.zzh();
        } else {
          paramList = null;
        }
        zzI(paramStringBuilder, paramInt, "string_value", paramList);
        if (localZzfw.zzw()) {
          paramList = Long.valueOf(localZzfw.zzd());
        } else {
          paramList = null;
        }
        zzI(paramStringBuilder, paramInt, "int_value", paramList);
        paramList = localObject;
        if (localZzfw.zzu()) {
          paramList = Double.valueOf(localZzfw.zza());
        }
        zzI(paramStringBuilder, paramInt, "double_value", paramList);
        if (localZzfw.zzc() > 0) {
          zzD(paramStringBuilder, paramInt, localZzfw.zzi());
        }
        zzF(paramStringBuilder, paramInt);
        paramStringBuilder.append("}\n");
      }
    }
  }
  
  private final void zzE(StringBuilder paramStringBuilder, int paramInt, zzel paramZzel)
  {
    if (paramZzel == null) {
      return;
    }
    zzF(paramStringBuilder, paramInt);
    paramStringBuilder.append("filter {\n");
    if (paramZzel.zzh()) {
      zzI(paramStringBuilder, paramInt, "complement", Boolean.valueOf(paramZzel.zzg()));
    }
    if (paramZzel.zzj()) {
      zzI(paramStringBuilder, paramInt, "param_name", zzs.zzj().zze(paramZzel.zze()));
    }
    if (paramZzel.zzk())
    {
      int i = paramInt + 1;
      Object localObject2 = paramZzel.zzd();
      if (localObject2 != null)
      {
        zzF(paramStringBuilder, i);
        paramStringBuilder.append("string_filter {\n");
        Object localObject1;
        if (((zzex)localObject2).zzi())
        {
          switch (((zzex)localObject2).zzj())
          {
          default: 
            localObject1 = "IN_LIST";
            break;
          case 6: 
            localObject1 = "EXACT";
            break;
          case 5: 
            localObject1 = "PARTIAL";
            break;
          case 4: 
            localObject1 = "ENDS_WITH";
            break;
          case 3: 
            localObject1 = "BEGINS_WITH";
            break;
          case 2: 
            localObject1 = "REGEXP";
            break;
          case 1: 
            localObject1 = "UNKNOWN_MATCH_TYPE";
          }
          zzI(paramStringBuilder, i, "match_type", localObject1);
        }
        if (((zzex)localObject2).zzh()) {
          zzI(paramStringBuilder, i, "expression", ((zzex)localObject2).zzd());
        }
        if (((zzex)localObject2).zzg()) {
          zzI(paramStringBuilder, i, "case_sensitive", Boolean.valueOf(((zzex)localObject2).zzf()));
        }
        if (((zzex)localObject2).zza() > 0)
        {
          zzF(paramStringBuilder, i + 1);
          paramStringBuilder.append("expression_list {\n");
          localObject1 = ((zzex)localObject2).zze().iterator();
          while (((Iterator)localObject1).hasNext())
          {
            localObject2 = (String)((Iterator)localObject1).next();
            zzF(paramStringBuilder, i + 2);
            paramStringBuilder.append((String)localObject2);
            paramStringBuilder.append("\n");
          }
          paramStringBuilder.append("}\n");
        }
        zzF(paramStringBuilder, i);
        paramStringBuilder.append("}\n");
      }
    }
    if (paramZzel.zzi()) {
      zzJ(paramStringBuilder, paramInt + 1, "number_filter", paramZzel.zzc());
    }
    zzF(paramStringBuilder, paramInt);
    paramStringBuilder.append("}\n");
  }
  
  private static final void zzF(StringBuilder paramStringBuilder, int paramInt)
  {
    int i = 0;
    while (i < paramInt)
    {
      paramStringBuilder.append("  ");
      i += 1;
    }
  }
  
  private static final String zzG(boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    if (paramBoolean1) {
      localStringBuilder.append("Dynamic ");
    }
    if (paramBoolean2) {
      localStringBuilder.append("Sequence ");
    }
    if (paramBoolean3) {
      localStringBuilder.append("Session-Scoped ");
    }
    return localStringBuilder.toString();
  }
  
  private static final void zzH(StringBuilder paramStringBuilder, int paramInt, String paramString, zzgh paramZzgh)
  {
    if (paramZzgh == null) {
      return;
    }
    zzF(paramStringBuilder, 3);
    paramStringBuilder.append(paramString);
    paramStringBuilder.append(" {\n");
    Object localObject;
    if (paramZzgh.zzb() != 0)
    {
      zzF(paramStringBuilder, 4);
      paramStringBuilder.append("results: ");
      paramString = paramZzgh.zzk().iterator();
      paramInt = 0;
      while (paramString.hasNext())
      {
        localObject = (Long)paramString.next();
        if (paramInt != 0) {
          paramStringBuilder.append(", ");
        }
        paramStringBuilder.append(localObject);
        paramInt += 1;
      }
      paramStringBuilder.append('\n');
    }
    if (paramZzgh.zzd() != 0)
    {
      zzF(paramStringBuilder, 4);
      paramStringBuilder.append("status: ");
      paramString = paramZzgh.zzn().iterator();
      paramInt = 0;
      while (paramString.hasNext())
      {
        localObject = (Long)paramString.next();
        if (paramInt != 0) {
          paramStringBuilder.append(", ");
        }
        paramStringBuilder.append(localObject);
        paramInt += 1;
      }
      paramStringBuilder.append('\n');
    }
    if (paramZzgh.zza() != 0)
    {
      zzF(paramStringBuilder, 4);
      paramStringBuilder.append("dynamic_filter_timestamps: {");
      localObject = paramZzgh.zzj().iterator();
      paramInt = 0;
      while (((Iterator)localObject).hasNext())
      {
        zzfq localZzfq = (zzfq)((Iterator)localObject).next();
        if (paramInt != 0) {
          paramStringBuilder.append(", ");
        }
        if (localZzfq.zzh()) {
          paramString = Integer.valueOf(localZzfq.zza());
        } else {
          paramString = null;
        }
        paramStringBuilder.append(paramString);
        paramStringBuilder.append(":");
        if (localZzfq.zzg()) {
          paramString = Long.valueOf(localZzfq.zzb());
        } else {
          paramString = null;
        }
        paramStringBuilder.append(paramString);
        paramInt += 1;
      }
      paramStringBuilder.append("}\n");
    }
    if (paramZzgh.zzc() != 0)
    {
      zzF(paramStringBuilder, 4);
      paramStringBuilder.append("sequence_filter_timestamps: {");
      paramZzgh = paramZzgh.zzm().iterator();
      paramInt = 0;
      while (paramZzgh.hasNext())
      {
        localObject = (zzgj)paramZzgh.next();
        if (paramInt != 0) {
          paramStringBuilder.append(", ");
        }
        if (((zzgj)localObject).zzi()) {
          paramString = Integer.valueOf(((zzgj)localObject).zzb());
        } else {
          paramString = null;
        }
        paramStringBuilder.append(paramString);
        paramStringBuilder.append(": [");
        paramString = ((zzgj)localObject).zzf().iterator();
        int i = 0;
        while (paramString.hasNext())
        {
          long l = ((Long)paramString.next()).longValue();
          if (i != 0) {
            paramStringBuilder.append(", ");
          }
          paramStringBuilder.append(l);
          i += 1;
        }
        paramStringBuilder.append("]");
        paramInt += 1;
      }
      paramStringBuilder.append("}\n");
    }
    zzF(paramStringBuilder, 3);
    paramStringBuilder.append("}\n");
  }
  
  private static final void zzI(StringBuilder paramStringBuilder, int paramInt, String paramString, Object paramObject)
  {
    if (paramObject == null) {
      return;
    }
    zzF(paramStringBuilder, paramInt + 1);
    paramStringBuilder.append(paramString);
    paramStringBuilder.append(": ");
    paramStringBuilder.append(paramObject);
    paramStringBuilder.append('\n');
  }
  
  private static final void zzJ(StringBuilder paramStringBuilder, int paramInt, String paramString, zzeq paramZzeq)
  {
    if (paramZzeq == null) {
      return;
    }
    zzF(paramStringBuilder, paramInt);
    paramStringBuilder.append(paramString);
    paramStringBuilder.append(" {\n");
    if (paramZzeq.zzg())
    {
      int i = paramZzeq.zzm();
      if (i != 1)
      {
        if (i != 2)
        {
          if (i != 3)
          {
            if (i != 4) {
              paramString = "BETWEEN";
            } else {
              paramString = "EQUAL";
            }
          }
          else {
            paramString = "GREATER_THAN";
          }
        }
        else {
          paramString = "LESS_THAN";
        }
      }
      else {
        paramString = "UNKNOWN_COMPARISON_TYPE";
      }
      zzI(paramStringBuilder, paramInt, "comparison_type", paramString);
    }
    if (paramZzeq.zzi()) {
      zzI(paramStringBuilder, paramInt, "match_as_float", Boolean.valueOf(paramZzeq.zzf()));
    }
    if (paramZzeq.zzh()) {
      zzI(paramStringBuilder, paramInt, "comparison_value", paramZzeq.zzc());
    }
    if (paramZzeq.zzk()) {
      zzI(paramStringBuilder, paramInt, "min_comparison_value", paramZzeq.zze());
    }
    if (paramZzeq.zzj()) {
      zzI(paramStringBuilder, paramInt, "max_comparison_value", paramZzeq.zzd());
    }
    zzF(paramStringBuilder, paramInt);
    paramStringBuilder.append("}\n");
  }
  
  static int zza(zzgb paramZzgb, String paramString)
  {
    if (paramZzgb != null)
    {
      int i = 0;
      while (i < paramZzgb.zzb())
      {
        if (paramString.equals(paramZzgb.zzao(i).zzf())) {
          return i;
        }
        i += 1;
      }
    }
    return -1;
  }
  
  static zzlk zzl(zzlk paramZzlk, byte[] paramArrayOfByte)
    throws zzko
  {
    zzjq localZzjq = zzjq.zza();
    if (localZzjq != null) {
      return paramZzlk.zzaA(paramArrayOfByte, localZzjq);
    }
    return paramZzlk.zzaz(paramArrayOfByte);
  }
  
  static List zzr(BitSet paramBitSet)
  {
    int k = (paramBitSet.length() + 63) / 64;
    ArrayList localArrayList = new ArrayList(k);
    int i = 0;
    while (i < k)
    {
      long l1 = 0L;
      int j = 0;
      while (j < 64)
      {
        int m = i * 64 + j;
        if (m >= paramBitSet.length()) {
          break;
        }
        long l2 = l1;
        if (paramBitSet.get(m)) {
          l2 = l1 | 1L << j;
        }
        j += 1;
        l1 = l2;
      }
      localArrayList.add(Long.valueOf(l1));
      i += 1;
    }
    return localArrayList;
  }
  
  static boolean zzv(List paramList, int paramInt)
  {
    return (paramInt < paramList.size() * 64) && ((1L << paramInt % 64 & ((Long)paramList.get(paramInt / 64)).longValue()) != 0L);
  }
  
  static boolean zzx(String paramString)
  {
    return (paramString != null) && (paramString.matches("([+-])?([0-9]+\\.?[0-9]*|[0-9]*\\.?[0-9]+)")) && (paramString.length() <= 310);
  }
  
  static final void zzz(zzfr paramZzfr, String paramString, Object paramObject)
  {
    Object localObject = paramZzfr.zzp();
    int i = 0;
    while (i < ((List)localObject).size())
    {
      if (paramString.equals(((zzfw)((List)localObject).get(i)).zzg())) {
        break label52;
      }
      i += 1;
    }
    i = -1;
    label52:
    localObject = zzfw.zze();
    ((zzfv)localObject).zzj(paramString);
    if ((paramObject instanceof Long)) {
      ((zzfv)localObject).zzi(((Long)paramObject).longValue());
    }
    if (i >= 0)
    {
      paramZzfr.zzj(i, (zzfv)localObject);
      return;
    }
    paramZzfr.zze((zzfv)localObject);
  }
  
  protected final boolean zzb()
  {
    return false;
  }
  
  final long zzd(byte[] paramArrayOfByte)
  {
    Preconditions.checkNotNull(paramArrayOfByte);
    zzs.zzv().zzg();
    MessageDigest localMessageDigest = zzlh.zzF();
    if (localMessageDigest == null)
    {
      zzs.zzay().zzd().zza("Failed to get MD5");
      return 0L;
    }
    return zzlh.zzp(localMessageDigest.digest(paramArrayOfByte));
  }
  
  final Bundle zzf(Map paramMap, boolean paramBoolean)
  {
    Bundle localBundle = new Bundle();
    Iterator localIterator = paramMap.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      Object localObject = paramMap.get(str);
      if (localObject == null) {
        localBundle.putString(str, null);
      } else if ((localObject instanceof Long)) {
        localBundle.putLong(str, ((Long)localObject).longValue());
      } else if ((localObject instanceof Double)) {
        localBundle.putDouble(str, ((Double)localObject).doubleValue());
      } else if ((localObject instanceof ArrayList))
      {
        if (paramBoolean)
        {
          localObject = (ArrayList)localObject;
          ArrayList localArrayList = new ArrayList();
          int j = ((List)localObject).size();
          int i = 0;
          while (i < j)
          {
            localArrayList.add(zzf((Map)((List)localObject).get(i), false));
            i += 1;
          }
          localBundle.putParcelableArray(str, (Parcelable[])localArrayList.toArray(new Parcelable[0]));
        }
      }
      else {
        localBundle.putString(str, localObject.toString());
      }
    }
    return localBundle;
  }
  
  /* Error */
  final Parcelable zzh(byte[] paramArrayOfByte, android.os.Parcelable.Creator paramCreator)
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnonnull +5 -> 6
    //   4: aconst_null
    //   5: areturn
    //   6: invokestatic 549	android/os/Parcel:obtain	()Landroid/os/Parcel;
    //   9: astore_3
    //   10: aload_3
    //   11: aload_1
    //   12: iconst_0
    //   13: aload_1
    //   14: arraylength
    //   15: invokevirtual 553	android/os/Parcel:unmarshall	([BII)V
    //   18: aload_3
    //   19: iconst_0
    //   20: invokevirtual 556	android/os/Parcel:setDataPosition	(I)V
    //   23: aload_2
    //   24: aload_3
    //   25: invokeinterface 562 2 0
    //   30: checkcast 530	android/os/Parcelable
    //   33: astore_1
    //   34: aload_3
    //   35: invokevirtual 565	android/os/Parcel:recycle	()V
    //   38: aload_1
    //   39: areturn
    //   40: astore_1
    //   41: goto +25 -> 66
    //   44: aload_0
    //   45: getfield 165	com/google/android/gms/measurement/internal/zzgr:zzs	Lcom/google/android/gms/measurement/internal/zzfy;
    //   48: invokevirtual 491	com/google/android/gms/measurement/internal/zzfy:zzay	()Lcom/google/android/gms/measurement/internal/zzeo;
    //   51: invokevirtual 496	com/google/android/gms/measurement/internal/zzeo:zzd	()Lcom/google/android/gms/measurement/internal/zzem;
    //   54: ldc_w 567
    //   57: invokevirtual 503	com/google/android/gms/measurement/internal/zzem:zza	(Ljava/lang/String;)V
    //   60: aload_3
    //   61: invokevirtual 565	android/os/Parcel:recycle	()V
    //   64: aconst_null
    //   65: areturn
    //   66: aload_3
    //   67: invokevirtual 565	android/os/Parcel:recycle	()V
    //   70: aload_1
    //   71: athrow
    //   72: astore_1
    //   73: goto -29 -> 44
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	76	0	this	zzlb
    //   0	76	1	paramArrayOfByte	byte[]
    //   0	76	2	paramCreator	android.os.Parcelable.Creator
    //   9	58	3	localParcel	android.os.Parcel
    // Exception table:
    //   from	to	target	type
    //   10	34	40	finally
    //   44	60	40	finally
    //   10	34	72	com/google/android/gms/common/internal/safeparcel/SafeParcelReader$ParseException
  }
  
  final zzaw zzi(zzaa paramZzaa)
  {
    Bundle localBundle = zzf(paramZzaa.zze(), true);
    if (localBundle.containsKey("_o"))
    {
      localObject = localBundle.get("_o");
      if (localObject != null)
      {
        localObject = localObject.toString();
        break label47;
      }
    }
    Object localObject = "app";
    label47:
    String str2 = zzgv.zzb(paramZzaa.zzd());
    String str1 = str2;
    if (str2 == null) {
      str1 = paramZzaa.zzd();
    }
    return new zzaw(str1, new zzau(localBundle), (String)localObject, paramZzaa.zza());
  }
  
  final zzfs zzj(zzar paramZzar)
  {
    zzfr localZzfr = zzfs.zze();
    localZzfr.zzl(zze);
    zzat localZzat = new zzat(zzf);
    while (localZzat.hasNext())
    {
      Object localObject = localZzat.zza();
      zzfv localZzfv = zzfw.zze();
      localZzfv.zzj((String)localObject);
      localObject = zzf.zzf((String)localObject);
      Preconditions.checkNotNull(localObject);
      zzt(localZzfv, localObject);
      localZzfr.zze(localZzfv);
    }
    return (zzfs)localZzfr.zzaE();
  }
  
  final String zzm(zzga paramZzga)
  {
    if (paramZzga == null) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("\nbatch {\n");
    Iterator localIterator = paramZzga.zzd().iterator();
    while (localIterator.hasNext())
    {
      Object localObject1 = (zzgc)localIterator.next();
      if (localObject1 != null)
      {
        zzF(localStringBuilder, 1);
        localStringBuilder.append("bundle {\n");
        if (((zzgc)localObject1).zzbj()) {
          zzI(localStringBuilder, 1, "protocol_version", Integer.valueOf(((zzgc)localObject1).zzd()));
        }
        zzoz.zzc();
        if ((zzs.zzf().zzs(null, zzeb.zzar)) && (((zzgc)localObject1).zzbm())) {
          zzI(localStringBuilder, 1, "session_stitching_token", ((zzgc)localObject1).zzK());
        }
        zzI(localStringBuilder, 1, "platform", ((zzgc)localObject1).zzI());
        if (((zzgc)localObject1).zzbf()) {
          zzI(localStringBuilder, 1, "gmp_version", Long.valueOf(((zzgc)localObject1).zzm()));
        }
        if (((zzgc)localObject1).zzbq()) {
          zzI(localStringBuilder, 1, "uploading_gmp_version", Long.valueOf(((zzgc)localObject1).zzr()));
        }
        if (((zzgc)localObject1).zzbd()) {
          zzI(localStringBuilder, 1, "dynamite_version", Long.valueOf(((zzgc)localObject1).zzj()));
        }
        if (((zzgc)localObject1).zzba()) {
          zzI(localStringBuilder, 1, "config_version", Long.valueOf(((zzgc)localObject1).zzh()));
        }
        zzI(localStringBuilder, 1, "gmp_app_id", ((zzgc)localObject1).zzF());
        zzI(localStringBuilder, 1, "admob_app_id", ((zzgc)localObject1).zzw());
        zzI(localStringBuilder, 1, "app_id", ((zzgc)localObject1).zzx());
        zzI(localStringBuilder, 1, "app_version", ((zzgc)localObject1).zzA());
        if (((zzgc)localObject1).zzaY()) {
          zzI(localStringBuilder, 1, "app_version_major", Integer.valueOf(((zzgc)localObject1).zza()));
        }
        zzI(localStringBuilder, 1, "firebase_instance_id", ((zzgc)localObject1).zzE());
        if (((zzgc)localObject1).zzbc()) {
          zzI(localStringBuilder, 1, "dev_cert_hash", Long.valueOf(((zzgc)localObject1).zzi()));
        }
        zzI(localStringBuilder, 1, "app_store", ((zzgc)localObject1).zzz());
        if (((zzgc)localObject1).zzbp()) {
          zzI(localStringBuilder, 1, "upload_timestamp_millis", Long.valueOf(((zzgc)localObject1).zzq()));
        }
        if (((zzgc)localObject1).zzbn()) {
          zzI(localStringBuilder, 1, "start_timestamp_millis", Long.valueOf(((zzgc)localObject1).zzp()));
        }
        if (((zzgc)localObject1).zzbe()) {
          zzI(localStringBuilder, 1, "end_timestamp_millis", Long.valueOf(((zzgc)localObject1).zzk()));
        }
        if (((zzgc)localObject1).zzbi()) {
          zzI(localStringBuilder, 1, "previous_bundle_start_timestamp_millis", Long.valueOf(((zzgc)localObject1).zzo()));
        }
        if (((zzgc)localObject1).zzbh()) {
          zzI(localStringBuilder, 1, "previous_bundle_end_timestamp_millis", Long.valueOf(((zzgc)localObject1).zzn()));
        }
        zzI(localStringBuilder, 1, "app_instance_id", ((zzgc)localObject1).zzy());
        zzI(localStringBuilder, 1, "resettable_device_id", ((zzgc)localObject1).zzJ());
        zzI(localStringBuilder, 1, "ds_id", ((zzgc)localObject1).zzD());
        if (((zzgc)localObject1).zzbg()) {
          zzI(localStringBuilder, 1, "limited_ad_tracking", Boolean.valueOf(((zzgc)localObject1).zzaW()));
        }
        zzI(localStringBuilder, 1, "os_version", ((zzgc)localObject1).zzH());
        zzI(localStringBuilder, 1, "device_model", ((zzgc)localObject1).zzC());
        zzI(localStringBuilder, 1, "user_default_language", ((zzgc)localObject1).zzL());
        if (((zzgc)localObject1).zzbo()) {
          zzI(localStringBuilder, 1, "time_zone_offset_minutes", Integer.valueOf(((zzgc)localObject1).zzf()));
        }
        if (((zzgc)localObject1).zzaZ()) {
          zzI(localStringBuilder, 1, "bundle_sequential_index", Integer.valueOf(((zzgc)localObject1).zzb()));
        }
        if (((zzgc)localObject1).zzbl()) {
          zzI(localStringBuilder, 1, "service_upload", Boolean.valueOf(((zzgc)localObject1).zzaX()));
        }
        zzI(localStringBuilder, 1, "health_monitor", ((zzgc)localObject1).zzG());
        if (((zzgc)localObject1).zzbk()) {
          zzI(localStringBuilder, 1, "retry_counter", Integer.valueOf(((zzgc)localObject1).zze()));
        }
        if (((zzgc)localObject1).zzbb()) {
          zzI(localStringBuilder, 1, "consent_signals", ((zzgc)localObject1).zzB());
        }
        paramZzga = ((zzgc)localObject1).zzO();
        Object localObject2;
        if (paramZzga != null)
        {
          localObject2 = paramZzga.iterator();
          while (((Iterator)localObject2).hasNext())
          {
            zzgl localZzgl = (zzgl)((Iterator)localObject2).next();
            if (localZzgl != null)
            {
              zzF(localStringBuilder, 2);
              localStringBuilder.append("user_property {\n");
              if (localZzgl.zzs()) {
                paramZzga = Long.valueOf(localZzgl.zzc());
              } else {
                paramZzga = null;
              }
              zzI(localStringBuilder, 2, "set_timestamp_millis", paramZzga);
              zzI(localStringBuilder, 2, "name", zzs.zzj().zzf(localZzgl.zzf()));
              zzI(localStringBuilder, 2, "string_value", localZzgl.zzg());
              if (localZzgl.zzr()) {
                paramZzga = Long.valueOf(localZzgl.zzb());
              } else {
                paramZzga = null;
              }
              zzI(localStringBuilder, 2, "int_value", paramZzga);
              if (localZzgl.zzq()) {
                paramZzga = Double.valueOf(localZzgl.zza());
              } else {
                paramZzga = null;
              }
              zzI(localStringBuilder, 2, "double_value", paramZzga);
              zzF(localStringBuilder, 2);
              localStringBuilder.append("}\n");
            }
          }
        }
        paramZzga = ((zzgc)localObject1).zzM();
        if (paramZzga != null)
        {
          paramZzga = paramZzga.iterator();
          while (paramZzga.hasNext())
          {
            localObject2 = (zzfo)paramZzga.next();
            if (localObject2 != null)
            {
              zzF(localStringBuilder, 2);
              localStringBuilder.append("audience_membership {\n");
              if (((zzfo)localObject2).zzk()) {
                zzI(localStringBuilder, 2, "audience_id", Integer.valueOf(((zzfo)localObject2).zza()));
              }
              if (((zzfo)localObject2).zzm()) {
                zzI(localStringBuilder, 2, "new_audience", Boolean.valueOf(((zzfo)localObject2).zzj()));
              }
              zzH(localStringBuilder, 2, "current_data", ((zzfo)localObject2).zzd());
              if (((zzfo)localObject2).zzn()) {
                zzH(localStringBuilder, 2, "previous_data", ((zzfo)localObject2).zze());
              }
              zzF(localStringBuilder, 2);
              localStringBuilder.append("}\n");
            }
          }
        }
        paramZzga = ((zzgc)localObject1).zzN();
        if (paramZzga != null)
        {
          paramZzga = paramZzga.iterator();
          while (paramZzga.hasNext())
          {
            localObject1 = (zzfs)paramZzga.next();
            if (localObject1 != null)
            {
              zzF(localStringBuilder, 2);
              localStringBuilder.append("event {\n");
              zzI(localStringBuilder, 2, "name", zzs.zzj().zzd(((zzfs)localObject1).zzh()));
              if (((zzfs)localObject1).zzu()) {
                zzI(localStringBuilder, 2, "timestamp_millis", Long.valueOf(((zzfs)localObject1).zzd()));
              }
              if (((zzfs)localObject1).zzt()) {
                zzI(localStringBuilder, 2, "previous_timestamp_millis", Long.valueOf(((zzfs)localObject1).zzc()));
              }
              if (((zzfs)localObject1).zzs()) {
                zzI(localStringBuilder, 2, "count", Integer.valueOf(((zzfs)localObject1).zza()));
              }
              if (((zzfs)localObject1).zzb() != 0) {
                zzD(localStringBuilder, 2, ((zzfs)localObject1).zzi());
              }
              zzF(localStringBuilder, 2);
              localStringBuilder.append("}\n");
            }
          }
        }
        zzF(localStringBuilder, 1);
        localStringBuilder.append("}\n");
      }
    }
    localStringBuilder.append("}\n");
    return localStringBuilder.toString();
  }
  
  final String zzo(com.google.android.gms.internal.measurement.zzej paramZzej)
  {
    if (paramZzej == null) {
      return "null";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("\nevent_filter {\n");
    if (paramZzej.zzp()) {
      zzI(localStringBuilder, 0, "filter_id", Integer.valueOf(paramZzej.zzb()));
    }
    zzI(localStringBuilder, 0, "event_name", zzs.zzj().zzd(paramZzej.zzg()));
    String str = zzG(paramZzej.zzk(), paramZzej.zzm(), paramZzej.zzn());
    if (!str.isEmpty()) {
      zzI(localStringBuilder, 0, "filter_type", str);
    }
    if (paramZzej.zzo()) {
      zzJ(localStringBuilder, 1, "event_count_filter", paramZzej.zzf());
    }
    if (paramZzej.zza() > 0)
    {
      localStringBuilder.append("  filters {\n");
      paramZzej = paramZzej.zzh().iterator();
      while (paramZzej.hasNext()) {
        zzE(localStringBuilder, 2, (zzel)paramZzej.next());
      }
    }
    zzF(localStringBuilder, 1);
    localStringBuilder.append("}\n}\n");
    return localStringBuilder.toString();
  }
  
  final String zzp(zzes paramZzes)
  {
    if (paramZzes == null) {
      return "null";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("\nproperty_filter {\n");
    if (paramZzes.zzj()) {
      zzI(localStringBuilder, 0, "filter_id", Integer.valueOf(paramZzes.zza()));
    }
    zzI(localStringBuilder, 0, "property_name", zzs.zzj().zzf(paramZzes.zze()));
    String str = zzG(paramZzes.zzg(), paramZzes.zzh(), paramZzes.zzi());
    if (!str.isEmpty()) {
      zzI(localStringBuilder, 0, "filter_type", str);
    }
    zzE(localStringBuilder, 1, paramZzes.zzb());
    localStringBuilder.append("}\n");
    return localStringBuilder.toString();
  }
  
  final List zzq(List paramList1, List paramList2)
  {
    paramList1 = new ArrayList(paramList1);
    paramList2 = paramList2.iterator();
    while (paramList2.hasNext())
    {
      Integer localInteger = (Integer)paramList2.next();
      if (localInteger.intValue() < 0)
      {
        zzs.zzay().zzk().zzb("Ignoring negative bit index to be cleared", localInteger);
      }
      else
      {
        i = localInteger.intValue() / 64;
        if (i >= paramList1.size()) {
          zzs.zzay().zzk().zzc("Ignoring bit index greater than bitSet size", localInteger, Integer.valueOf(paramList1.size()));
        } else {
          paramList1.set(i, Long.valueOf(((Long)paramList1.get(i)).longValue() & 1L << localInteger.intValue() % 64));
        }
      }
    }
    int j = paramList1.size();
    int k;
    for (int i = paramList1.size() - 1; (i >= 0) && (((Long)paramList1.get(i)).longValue() == 0L); i = k)
    {
      k = i - 1;
      j = i;
    }
    return paramList1.subList(0, j);
  }
  
  final Map zzs(Bundle paramBundle, boolean paramBoolean)
  {
    HashMap localHashMap = new HashMap();
    Iterator localIterator = paramBundle.keySet().iterator();
    while (localIterator.hasNext())
    {
      String str = (String)localIterator.next();
      Object localObject1 = paramBundle.get(str);
      boolean bool = localObject1 instanceof Parcelable[];
      if ((!bool) && (!(localObject1 instanceof ArrayList)) && (!(localObject1 instanceof Bundle)))
      {
        if (localObject1 != null) {
          localHashMap.put(str, localObject1);
        }
      }
      else if (paramBoolean)
      {
        ArrayList localArrayList = new ArrayList();
        int j;
        int i;
        Object localObject2;
        if (bool)
        {
          localObject1 = (Parcelable[])localObject1;
          j = localObject1.length;
          i = 0;
          while (i < j)
          {
            localObject2 = localObject1[i];
            if ((localObject2 instanceof Bundle)) {
              localArrayList.add(zzs((Bundle)localObject2, false));
            }
            i += 1;
          }
        }
        if ((localObject1 instanceof ArrayList))
        {
          localObject1 = (ArrayList)localObject1;
          j = ((List)localObject1).size();
          i = 0;
          while (i < j)
          {
            localObject2 = ((List)localObject1).get(i);
            if ((localObject2 instanceof Bundle)) {
              localArrayList.add(zzs((Bundle)localObject2, false));
            }
            i += 1;
          }
        }
        if ((localObject1 instanceof Bundle)) {
          localArrayList.add(zzs((Bundle)localObject1, false));
        }
        localHashMap.put(str, localArrayList);
      }
    }
    return localHashMap;
  }
  
  final void zzt(zzfv paramZzfv, Object paramObject)
  {
    Preconditions.checkNotNull(paramObject);
    paramZzfv.zzg();
    paramZzfv.zze();
    paramZzfv.zzd();
    paramZzfv.zzf();
    if ((paramObject instanceof String))
    {
      paramZzfv.zzk((String)paramObject);
      return;
    }
    if ((paramObject instanceof Long))
    {
      paramZzfv.zzi(((Long)paramObject).longValue());
      return;
    }
    if ((paramObject instanceof Double))
    {
      paramZzfv.zzh(((Double)paramObject).doubleValue());
      return;
    }
    if ((paramObject instanceof Bundle[]))
    {
      paramObject = (Bundle[])paramObject;
      ArrayList localArrayList = new ArrayList();
      int j = paramObject.length;
      int i = 0;
      while (i < j)
      {
        Object localObject1 = paramObject[i];
        if (localObject1 != null)
        {
          zzfv localZzfv1 = zzfw.zze();
          Iterator localIterator = localObject1.keySet().iterator();
          while (localIterator.hasNext())
          {
            Object localObject2 = (String)localIterator.next();
            zzfv localZzfv2 = zzfw.zze();
            localZzfv2.zzj((String)localObject2);
            localObject2 = localObject1.get((String)localObject2);
            if ((localObject2 instanceof Long))
            {
              localZzfv2.zzi(((Long)localObject2).longValue());
            }
            else if ((localObject2 instanceof String))
            {
              localZzfv2.zzk((String)localObject2);
            }
            else
            {
              if (!(localObject2 instanceof Double)) {
                continue;
              }
              localZzfv2.zzh(((Double)localObject2).doubleValue());
            }
            localZzfv1.zzc(localZzfv2);
          }
          if (localZzfv1.zza() > 0) {
            localArrayList.add((zzfw)localZzfv1.zzaE());
          }
        }
        i += 1;
      }
      paramZzfv.zzb(localArrayList);
      return;
    }
    zzs.zzay().zzd().zzb("Ignoring invalid (type) event param value", paramObject);
  }
  
  final void zzu(zzgk paramZzgk, Object paramObject)
  {
    Preconditions.checkNotNull(paramObject);
    paramZzgk.zzc();
    paramZzgk.zzb();
    paramZzgk.zza();
    if ((paramObject instanceof String))
    {
      paramZzgk.zzh((String)paramObject);
      return;
    }
    if ((paramObject instanceof Long))
    {
      paramZzgk.zze(((Long)paramObject).longValue());
      return;
    }
    if ((paramObject instanceof Double))
    {
      paramZzgk.zzd(((Double)paramObject).doubleValue());
      return;
    }
    zzs.zzay().zzd().zzb("Ignoring invalid (type) user attribute value", paramObject);
  }
  
  final boolean zzw(long paramLong1, long paramLong2)
  {
    return (paramLong1 == 0L) || (paramLong2 <= 0L) || (Math.abs(zzs.zzav().currentTimeMillis() - paramLong1) > paramLong2);
  }
  
  final byte[] zzy(byte[] paramArrayOfByte)
    throws IOException
  {
    try
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
      GZIPOutputStream localGZIPOutputStream = new GZIPOutputStream(localByteArrayOutputStream);
      localGZIPOutputStream.write(paramArrayOfByte);
      localGZIPOutputStream.close();
      localByteArrayOutputStream.close();
      paramArrayOfByte = localByteArrayOutputStream.toByteArray();
      return paramArrayOfByte;
    }
    catch (IOException paramArrayOfByte)
    {
      zzs.zzay().zzd().zzb("Failed to gzip content", paramArrayOfByte);
      throw paramArrayOfByte;
    }
  }
}
