package com.google.android.gms.fitness;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import androidx.annotation.RecentlyNonNull;
import com.google.android.gms.common.api.Api.ApiOptions.HasGoogleSignInAccountOptions;
import com.google.android.gms.common.api.GoogleApi;
import com.google.android.gms.common.api.GoogleApi.Settings;
import com.google.android.gms.common.api.internal.ListenerHolders;
import com.google.android.gms.common.api.internal.RegistrationMethods;
import com.google.android.gms.common.api.internal.RegistrationMethods.Builder;
import com.google.android.gms.common.internal.PendingResultUtil;
import com.google.android.gms.common.internal.ShowFirstParty;
import com.google.android.gms.fitness.data.DataSource;
import com.google.android.gms.fitness.request.DataSourcesRequest;
import com.google.android.gms.fitness.request.OnDataPointListener;
import com.google.android.gms.fitness.request.SensorRequest;
import com.google.android.gms.internal.fitness.zzap;
import com.google.android.gms.internal.fitness.zzdx;
import com.google.android.gms.tasks.Task;
import java.util.List;

public class SensorsClient
  extends GoogleApi<Api.ApiOptions.HasGoogleSignInAccountOptions>
{
  private static final SensorsApi zzkw = new zzdx();
  
  SensorsClient(Activity paramActivity, Api.ApiOptions.HasGoogleSignInAccountOptions paramHasGoogleSignInAccountOptions)
  {
    super(paramActivity, zzap.zzoz, paramHasGoogleSignInAccountOptions, GoogleApi.Settings.DEFAULT_SETTINGS);
  }
  
  @ShowFirstParty
  protected SensorsClient(@RecentlyNonNull Context paramContext, @RecentlyNonNull Api.ApiOptions.HasGoogleSignInAccountOptions paramHasGoogleSignInAccountOptions)
  {
    super(paramContext, zzap.zzoz, paramHasGoogleSignInAccountOptions, GoogleApi.Settings.DEFAULT_SETTINGS);
  }
  
  @RecentlyNonNull
  public Task<Void> add(@RecentlyNonNull SensorRequest paramSensorRequest, @RecentlyNonNull PendingIntent paramPendingIntent)
  {
    return PendingResultUtil.toVoidTask(zzkw.add(asGoogleApiClient(), paramSensorRequest, paramPendingIntent));
  }
  
  @RecentlyNonNull
  public Task<Void> add(@RecentlyNonNull SensorRequest paramSensorRequest, @RecentlyNonNull OnDataPointListener paramOnDataPointListener)
  {
    paramOnDataPointListener = registerListener(paramOnDataPointListener, OnDataPointListener.class.getSimpleName());
    return doRegisterEventListener(RegistrationMethods.builder().withHolder(paramOnDataPointListener).register(new zzn(this, paramOnDataPointListener, paramSensorRequest)).unregister(new zzo(this, paramOnDataPointListener)).build());
  }
  
  @RecentlyNonNull
  public Task<List<DataSource>> findDataSources(@RecentlyNonNull DataSourcesRequest paramDataSourcesRequest)
  {
    return PendingResultUtil.toTask(zzkw.findDataSources(asGoogleApiClient(), paramDataSourcesRequest), zzm.zzjz);
  }
  
  @RecentlyNonNull
  public Task<Void> remove(@RecentlyNonNull PendingIntent paramPendingIntent)
  {
    return PendingResultUtil.toVoidTask(zzkw.remove(asGoogleApiClient(), paramPendingIntent));
  }
  
  @RecentlyNonNull
  public Task<Boolean> remove(@RecentlyNonNull OnDataPointListener paramOnDataPointListener)
  {
    return doUnregisterEventListener(ListenerHolders.createListenerKey(paramOnDataPointListener, OnDataPointListener.class.getSimpleName()));
  }
}
