package com.google.android.gms.auth.api.signin.internal;

import android.accounts.Account;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResults;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.GoogleApiManager;
import com.google.android.gms.common.api.internal.OptionalPendingResultImpl;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.logging.Logger;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public final class zbm
{
  private static final Logger zba = new Logger("GoogleSignInCommon", new String[0]);
  
  public static Intent zba(Context paramContext, GoogleSignInOptions paramGoogleSignInOptions)
  {
    zba.d("getFallbackSignInIntent()", new Object[0]);
    paramContext = zbc(paramContext, paramGoogleSignInOptions);
    paramContext.setAction("com.google.android.gms.auth.APPAUTH_SIGN_IN");
    return paramContext;
  }
  
  public static Intent zbb(Context paramContext, GoogleSignInOptions paramGoogleSignInOptions)
  {
    zba.d("getNoImplementationSignInIntent()", new Object[0]);
    paramContext = zbc(paramContext, paramGoogleSignInOptions);
    paramContext.setAction("com.google.android.gms.auth.NO_IMPL");
    return paramContext;
  }
  
  public static Intent zbc(Context paramContext, GoogleSignInOptions paramGoogleSignInOptions)
  {
    zba.d("getSignInIntent()", new Object[0]);
    paramGoogleSignInOptions = new SignInConfiguration(paramContext.getPackageName(), paramGoogleSignInOptions);
    Intent localIntent = new Intent("com.google.android.gms.auth.GOOGLE_SIGN_IN");
    localIntent.setPackage(paramContext.getPackageName());
    localIntent.setClass(paramContext, SignInHubActivity.class);
    paramContext = new Bundle();
    paramContext.putParcelable("config", paramGoogleSignInOptions);
    localIntent.putExtra("config", paramContext);
    return localIntent;
  }
  
  public static GoogleSignInResult zbd(Intent paramIntent)
  {
    if (paramIntent == null) {
      return new GoogleSignInResult(null, Status.RESULT_INTERNAL_ERROR);
    }
    Status localStatus = (Status)paramIntent.getParcelableExtra("googleSignInStatus");
    paramIntent = (GoogleSignInAccount)paramIntent.getParcelableExtra("googleSignInAccount");
    if (paramIntent == null)
    {
      paramIntent = localStatus;
      if (localStatus == null) {
        paramIntent = Status.RESULT_INTERNAL_ERROR;
      }
      return new GoogleSignInResult(null, paramIntent);
    }
    return new GoogleSignInResult(paramIntent, Status.RESULT_SUCCESS);
  }
  
  public static OptionalPendingResult<GoogleSignInResult> zbe(GoogleApiClient paramGoogleApiClient, Context paramContext, GoogleSignInOptions paramGoogleSignInOptions, boolean paramBoolean)
  {
    Logger localLogger = zba;
    localLogger.d("silentSignIn()", new Object[0]);
    localLogger.d("getEligibleSavedSignInResult()", new Object[0]);
    Preconditions.checkNotNull(paramGoogleSignInOptions);
    Object localObject = zbn.zbc(paramContext).zbb();
    if (localObject == null) {}
    do
    {
      Account localAccount1;
      Account localAccount2;
      do
      {
        localObject = null;
        break;
        localAccount1 = ((GoogleSignInOptions)localObject).getAccount();
        localAccount2 = paramGoogleSignInOptions.getAccount();
      } while ((localAccount1 == null ? localAccount2 != null : !localAccount1.equals(localAccount2)) || (paramGoogleSignInOptions.isServerAuthCodeRequested()) || ((paramGoogleSignInOptions.isIdTokenRequested()) && ((!((GoogleSignInOptions)localObject).isIdTokenRequested()) || (!Objects.equal(paramGoogleSignInOptions.getServerClientId(), ((GoogleSignInOptions)localObject).getServerClientId())))) || (!new HashSet(((GoogleSignInOptions)localObject).getScopes()).containsAll(new HashSet(paramGoogleSignInOptions.getScopes()))));
      localObject = zbn.zbc(paramContext).zba();
    } while ((localObject == null) || (((GoogleSignInAccount)localObject).isExpired()));
    localObject = new GoogleSignInResult((GoogleSignInAccount)localObject, Status.RESULT_SUCCESS);
    if (localObject != null)
    {
      localLogger.d("Eligible saved sign in result found", new Object[0]);
      return PendingResults.immediatePendingResult((Result)localObject, paramGoogleApiClient);
    }
    if (paramBoolean) {
      return PendingResults.immediatePendingResult(new GoogleSignInResult(null, new Status(4)), paramGoogleApiClient);
    }
    localLogger.d("trySilentSignIn()", new Object[0]);
    return new OptionalPendingResultImpl(paramGoogleApiClient.enqueue(new zbg(paramGoogleApiClient, paramContext, paramGoogleSignInOptions)));
  }
  
  public static PendingResult<Status> zbf(GoogleApiClient paramGoogleApiClient, Context paramContext, boolean paramBoolean)
  {
    zba.d("Revoking access", new Object[0]);
    String str = Storage.getInstance(paramContext).getSavedRefreshToken();
    zbh(paramContext);
    if (paramBoolean) {
      return zbb.zba(str);
    }
    return paramGoogleApiClient.execute(new zbk(paramGoogleApiClient));
  }
  
  public static PendingResult<Status> zbg(GoogleApiClient paramGoogleApiClient, Context paramContext, boolean paramBoolean)
  {
    zba.d("Signing out", new Object[0]);
    zbh(paramContext);
    if (paramBoolean) {
      return PendingResults.immediatePendingResult(Status.RESULT_SUCCESS, paramGoogleApiClient);
    }
    return paramGoogleApiClient.execute(new zbi(paramGoogleApiClient));
  }
  
  private static void zbh(Context paramContext)
  {
    zbn.zbc(paramContext).zbd();
    paramContext = GoogleApiClient.getAllClients().iterator();
    while (paramContext.hasNext()) {
      ((GoogleApiClient)paramContext.next()).maybeSignOut();
    }
    GoogleApiManager.reportSignOut();
  }
}
