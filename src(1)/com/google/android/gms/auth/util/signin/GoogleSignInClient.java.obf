package com.google.android.gms.auth.api.signin;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import androidx.annotation.RecentlyNonNull;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.internal.zbm;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.GoogleApi;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.internal.ApiExceptionMapper;
import com.google.android.gms.common.internal.PendingResultUtil;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.dynamite.DynamiteModule;
import com.google.android.gms.tasks.Task;

public class GoogleSignInClient
  extends GoogleApi<GoogleSignInOptions>
{
  @VisibleForTesting
  static int zba = 1;
  private static final zbb zbb = new zbb(null);
  
  GoogleSignInClient(Activity paramActivity, GoogleSignInOptions paramGoogleSignInOptions)
  {
    super(paramActivity, Auth.GOOGLE_SIGN_IN_API, paramGoogleSignInOptions, new ApiExceptionMapper());
  }
  
  GoogleSignInClient(Context paramContext, GoogleSignInOptions paramGoogleSignInOptions)
  {
    super(paramContext, Auth.GOOGLE_SIGN_IN_API, paramGoogleSignInOptions, new ApiExceptionMapper());
  }
  
  private final int zba()
  {
    try
    {
      if (zba == 1)
      {
        Context localContext = getApplicationContext();
        GoogleApiAvailability localGoogleApiAvailability = GoogleApiAvailability.getInstance();
        i = localGoogleApiAvailability.isGooglePlayServicesAvailable(localContext, 12451000);
        if (i == 0) {
          zba = 4;
        } else if ((localGoogleApiAvailability.getErrorResolutionIntent(localContext, i, null) == null) && (DynamiteModule.getLocalVersion(localContext, "com.google.android.gms.auth.api.fallback") != 0)) {
          zba = 3;
        } else {
          zba = 2;
        }
      }
      int i = zba;
      return i;
    }
    finally {}
  }
  
  public Intent getSignInIntent()
  {
    Context localContext = getApplicationContext();
    int i = zba();
    int j = i - 1;
    if (i != 0)
    {
      if (j != 2)
      {
        if (j != 3) {
          return zbm.zbb(localContext, (GoogleSignInOptions)getApiOptions());
        }
        return zbm.zbc(localContext, (GoogleSignInOptions)getApiOptions());
      }
      return zbm.zba(localContext, (GoogleSignInOptions)getApiOptions());
    }
    throw null;
  }
  
  @RecentlyNonNull
  public Task<Void> revokeAccess()
  {
    GoogleApiClient localGoogleApiClient = asGoogleApiClient();
    Context localContext = getApplicationContext();
    boolean bool;
    if (zba() == 3) {
      bool = true;
    } else {
      bool = false;
    }
    return PendingResultUtil.toVoidTask(zbm.zbf(localGoogleApiClient, localContext, bool));
  }
  
  @RecentlyNonNull
  public Task<Void> signOut()
  {
    GoogleApiClient localGoogleApiClient = asGoogleApiClient();
    Context localContext = getApplicationContext();
    boolean bool;
    if (zba() == 3) {
      bool = true;
    } else {
      bool = false;
    }
    return PendingResultUtil.toVoidTask(zbm.zbg(localGoogleApiClient, localContext, bool));
  }
  
  @RecentlyNonNull
  public Task<GoogleSignInAccount> silentSignIn()
  {
    GoogleApiClient localGoogleApiClient = asGoogleApiClient();
    Context localContext = getApplicationContext();
    GoogleSignInOptions localGoogleSignInOptions = (GoogleSignInOptions)getApiOptions();
    boolean bool;
    if (zba() == 3) {
      bool = true;
    } else {
      bool = false;
    }
    return PendingResultUtil.toTask(zbm.zbe(localGoogleApiClient, localContext, localGoogleSignInOptions, bool), zbb);
  }
}
