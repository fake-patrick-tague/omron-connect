package com.google.android.gms.auth.api.credentials;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import androidx.annotation.RecentlyNonNull;
import androidx.annotation.RecentlyNullable;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ReflectedParcelable;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;

@SafeParcelable.Class(creator="HintRequestCreator")
public final class HintRequest
  extends AbstractSafeParcelable
  implements ReflectedParcelable
{
  @RecentlyNonNull
  public static final Parcelable.Creator<HintRequest> CREATOR = new zbe();
  @SafeParcelable.Field(id=1000)
  final int zba;
  @SafeParcelable.Field(getter="getHintPickerConfig", id=1)
  private final CredentialPickerConfig zbb;
  @SafeParcelable.Field(getter="isEmailAddressIdentifierSupported", id=2)
  private final boolean zbc;
  @SafeParcelable.Field(getter="isPhoneNumberIdentifierSupported", id=3)
  private final boolean zbd;
  @SafeParcelable.Field(getter="getAccountTypes", id=4)
  private final String[] zbe;
  @SafeParcelable.Field(getter="isIdTokenRequested", id=5)
  private final boolean zbf;
  @SafeParcelable.Field(getter="getServerClientId", id=6)
  private final String zbg;
  @SafeParcelable.Field(getter="getIdTokenNonce", id=7)
  private final String zbh;
  
  @SafeParcelable.Constructor
  HintRequest(@SafeParcelable.Param(id=1000) int paramInt, @SafeParcelable.Param(id=1) CredentialPickerConfig paramCredentialPickerConfig, @SafeParcelable.Param(id=2) boolean paramBoolean1, @SafeParcelable.Param(id=3) boolean paramBoolean2, @SafeParcelable.Param(id=4) String[] paramArrayOfString, @SafeParcelable.Param(id=5) boolean paramBoolean3, @SafeParcelable.Param(id=6) String paramString1, @SafeParcelable.Param(id=7) String paramString2)
  {
    zba = paramInt;
    zbb = ((CredentialPickerConfig)Preconditions.checkNotNull(paramCredentialPickerConfig));
    zbc = paramBoolean1;
    zbd = paramBoolean2;
    zbe = ((String[])Preconditions.checkNotNull(paramArrayOfString));
    if (paramInt < 2)
    {
      zbf = true;
      zbg = null;
      zbh = null;
      return;
    }
    zbf = paramBoolean3;
    zbg = paramString1;
    zbh = paramString2;
  }
  
  public String[] getAccountTypes()
  {
    return zbe;
  }
  
  public CredentialPickerConfig getHintPickerConfig()
  {
    return zbb;
  }
  
  @RecentlyNullable
  public String getIdTokenNonce()
  {
    return zbh;
  }
  
  @RecentlyNullable
  public String getServerClientId()
  {
    return zbg;
  }
  
  public boolean isEmailAddressIdentifierSupported()
  {
    return zbc;
  }
  
  public boolean isIdTokenRequested()
  {
    return zbf;
  }
  
  public void writeToParcel(@RecentlyNonNull Parcel paramParcel, int paramInt)
  {
    int i = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeParcelable(paramParcel, 1, getHintPickerConfig(), paramInt, false);
    SafeParcelWriter.writeBoolean(paramParcel, 2, isEmailAddressIdentifierSupported());
    SafeParcelWriter.writeBoolean(paramParcel, 3, zbd);
    SafeParcelWriter.writeStringArray(paramParcel, 4, getAccountTypes(), false);
    SafeParcelWriter.writeBoolean(paramParcel, 5, isIdTokenRequested());
    SafeParcelWriter.writeString(paramParcel, 6, getServerClientId(), false);
    SafeParcelWriter.writeString(paramParcel, 7, getIdTokenNonce(), false);
    SafeParcelWriter.writeInt(paramParcel, 1000, zba);
    SafeParcelWriter.finishObjectHeader(paramParcel, i);
  }
  
  public static final class Builder
  {
    private boolean zba;
    private boolean zbb;
    private String[] zbc;
    private CredentialPickerConfig zbd = new CredentialPickerConfig.Builder().build();
    private boolean zbe = false;
    private String zbf;
    private String zbg;
    
    public Builder() {}
    
    @RecentlyNonNull
    public HintRequest build()
    {
      if (zbc == null) {
        zbc = new String[0];
      }
      boolean bool = zba;
      if ((!bool) && (!zbb) && (zbc.length == 0)) {
        throw new IllegalStateException("At least one authentication method must be specified");
      }
      return new HintRequest(2, zbd, bool, zbb, zbc, zbe, zbf, zbg);
    }
    
    @RecentlyNonNull
    public Builder setAccountTypes(@RecentlyNonNull String... paramVarArgs)
    {
      String[] arrayOfString = paramVarArgs;
      if (paramVarArgs == null) {
        arrayOfString = new String[0];
      }
      zbc = arrayOfString;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setEmailAddressIdentifierSupported(boolean paramBoolean)
    {
      zba = paramBoolean;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setHintPickerConfig(@RecentlyNonNull CredentialPickerConfig paramCredentialPickerConfig)
    {
      zbd = ((CredentialPickerConfig)Preconditions.checkNotNull(paramCredentialPickerConfig));
      return this;
    }
    
    @RecentlyNonNull
    public Builder setIdTokenNonce(String paramString)
    {
      zbg = paramString;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setIdTokenRequested(boolean paramBoolean)
    {
      zbe = paramBoolean;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setPhoneNumberIdentifierSupported(boolean paramBoolean)
    {
      zbb = paramBoolean;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setServerClientId(String paramString)
    {
      zbf = paramString;
      return this;
    }
  }
}
