package com.google.android.gms.auth.api.credentials;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import androidx.annotation.RecentlyNonNull;
import androidx.annotation.RecentlyNullable;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

@SafeParcelable.Class(creator="CredentialRequestCreator")
public final class CredentialRequest
  extends AbstractSafeParcelable
{
  @RecentlyNonNull
  public static final Parcelable.Creator<CredentialRequest> CREATOR = new zbc();
  @SafeParcelable.Field(id=1000)
  final int zba;
  @SafeParcelable.Field(getter="isPasswordLoginSupported", id=1)
  private final boolean zbb;
  @SafeParcelable.Field(getter="getAccountTypes", id=2)
  private final String[] zbc;
  @SafeParcelable.Field(getter="getCredentialPickerConfig", id=3)
  private final CredentialPickerConfig zbd;
  @SafeParcelable.Field(getter="getCredentialHintPickerConfig", id=4)
  private final CredentialPickerConfig zbe;
  @SafeParcelable.Field(getter="isIdTokenRequested", id=5)
  private final boolean zbf;
  @SafeParcelable.Field(getter="getServerClientId", id=6)
  private final String zbg;
  @SafeParcelable.Field(getter="getIdTokenNonce", id=7)
  private final String zbh;
  @SafeParcelable.Field(getter="getRequireUserMediation", id=8)
  private final boolean zbi;
  
  @SafeParcelable.Constructor
  CredentialRequest(@SafeParcelable.Param(id=1000) int paramInt, @SafeParcelable.Param(id=1) boolean paramBoolean1, @SafeParcelable.Param(id=2) String[] paramArrayOfString, @SafeParcelable.Param(id=3) CredentialPickerConfig paramCredentialPickerConfig1, @SafeParcelable.Param(id=4) CredentialPickerConfig paramCredentialPickerConfig2, @SafeParcelable.Param(id=5) boolean paramBoolean2, @SafeParcelable.Param(id=6) String paramString1, @SafeParcelable.Param(id=7) String paramString2, @SafeParcelable.Param(id=8) boolean paramBoolean3)
  {
    zba = paramInt;
    zbb = paramBoolean1;
    zbc = ((String[])Preconditions.checkNotNull(paramArrayOfString));
    paramArrayOfString = paramCredentialPickerConfig1;
    if (paramCredentialPickerConfig1 == null) {
      paramArrayOfString = new CredentialPickerConfig.Builder().build();
    }
    zbd = paramArrayOfString;
    paramArrayOfString = paramCredentialPickerConfig2;
    if (paramCredentialPickerConfig2 == null) {
      paramArrayOfString = new CredentialPickerConfig.Builder().build();
    }
    zbe = paramArrayOfString;
    if (paramInt < 3)
    {
      zbf = true;
      zbg = null;
      zbh = null;
    }
    else
    {
      zbf = paramBoolean2;
      zbg = paramString1;
      zbh = paramString2;
    }
    zbi = paramBoolean3;
  }
  
  public String[] getAccountTypes()
  {
    return zbc;
  }
  
  public Set<String> getAccountTypesSet()
  {
    return new HashSet(Arrays.asList(zbc));
  }
  
  public CredentialPickerConfig getCredentialHintPickerConfig()
  {
    return zbe;
  }
  
  public CredentialPickerConfig getCredentialPickerConfig()
  {
    return zbd;
  }
  
  @RecentlyNullable
  public String getIdTokenNonce()
  {
    return zbh;
  }
  
  @RecentlyNullable
  public String getServerClientId()
  {
    return zbg;
  }
  
  @Deprecated
  public boolean getSupportsPasswordLogin()
  {
    return isPasswordLoginSupported();
  }
  
  public boolean isIdTokenRequested()
  {
    return zbf;
  }
  
  public boolean isPasswordLoginSupported()
  {
    return zbb;
  }
  
  public void writeToParcel(@RecentlyNonNull Parcel paramParcel, int paramInt)
  {
    int i = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeBoolean(paramParcel, 1, isPasswordLoginSupported());
    SafeParcelWriter.writeStringArray(paramParcel, 2, getAccountTypes(), false);
    SafeParcelWriter.writeParcelable(paramParcel, 3, getCredentialPickerConfig(), paramInt, false);
    SafeParcelWriter.writeParcelable(paramParcel, 4, getCredentialHintPickerConfig(), paramInt, false);
    SafeParcelWriter.writeBoolean(paramParcel, 5, isIdTokenRequested());
    SafeParcelWriter.writeString(paramParcel, 6, getServerClientId(), false);
    SafeParcelWriter.writeString(paramParcel, 7, getIdTokenNonce(), false);
    SafeParcelWriter.writeBoolean(paramParcel, 8, zbi);
    SafeParcelWriter.writeInt(paramParcel, 1000, zba);
    SafeParcelWriter.finishObjectHeader(paramParcel, i);
  }
  
  public static final class Builder
  {
    private boolean zba;
    private String[] zbb;
    private CredentialPickerConfig zbc;
    private CredentialPickerConfig zbd;
    private boolean zbe = false;
    private String zbf = null;
    private String zbg;
    
    public Builder() {}
    
    @RecentlyNonNull
    public CredentialRequest build()
    {
      if (zbb == null) {
        zbb = new String[0];
      }
      boolean bool = zba;
      if ((!bool) && (zbb.length == 0)) {
        throw new IllegalStateException("At least one authentication method must be specified");
      }
      return new CredentialRequest(4, bool, zbb, zbc, zbd, zbe, zbf, zbg, false);
    }
    
    @RecentlyNonNull
    public Builder setAccountTypes(@RecentlyNonNull String... paramVarArgs)
    {
      String[] arrayOfString = paramVarArgs;
      if (paramVarArgs == null) {
        arrayOfString = new String[0];
      }
      zbb = arrayOfString;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setCredentialHintPickerConfig(@RecentlyNonNull CredentialPickerConfig paramCredentialPickerConfig)
    {
      zbd = paramCredentialPickerConfig;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setCredentialPickerConfig(@RecentlyNonNull CredentialPickerConfig paramCredentialPickerConfig)
    {
      zbc = paramCredentialPickerConfig;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setIdTokenNonce(String paramString)
    {
      zbg = paramString;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setIdTokenRequested(boolean paramBoolean)
    {
      zbe = paramBoolean;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setPasswordLoginSupported(boolean paramBoolean)
    {
      zba = paramBoolean;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setServerClientId(String paramString)
    {
      zbf = paramString;
      return this;
    }
    
    @Deprecated
    @RecentlyNonNull
    public Builder setSupportsPasswordLogin(boolean paramBoolean)
    {
      setPasswordLoginSupported(paramBoolean);
      return this;
    }
  }
}
