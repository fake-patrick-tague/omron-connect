package com.google.android.gms.auth.api.identity;

import android.os.Parcel;
import android.os.Parcelable.Creator;
import androidx.annotation.RecentlyNonNull;
import androidx.annotation.RecentlyNullable;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;

@SafeParcelable.Class(creator="GetSignInIntentRequestCreator")
public class GetSignInIntentRequest
  extends AbstractSafeParcelable
{
  @RecentlyNonNull
  public static final Parcelable.Creator<GetSignInIntentRequest> CREATOR = new zbd();
  @SafeParcelable.Field(getter="getServerClientId", id=1)
  private final String zba;
  @SafeParcelable.Field(getter="getHostedDomainFilter", id=2)
  private final String zbb;
  @SafeParcelable.Field(getter="getSessionId", id=3)
  private String zbc;
  @SafeParcelable.Field(getter="getNonce", id=4)
  private final String zbd;
  
  @SafeParcelable.Constructor
  GetSignInIntentRequest(@SafeParcelable.Param(id=1) String paramString1, @SafeParcelable.Param(id=2) String paramString2, @SafeParcelable.Param(id=3) String paramString3, @SafeParcelable.Param(id=4) String paramString4)
  {
    Preconditions.checkNotNull(paramString1);
    zba = paramString1;
    zbb = paramString2;
    zbc = paramString3;
    zbd = paramString4;
  }
  
  @RecentlyNonNull
  public static Builder builder()
  {
    return new Builder();
  }
  
  @RecentlyNonNull
  public static Builder zba(@RecentlyNonNull GetSignInIntentRequest paramGetSignInIntentRequest)
  {
    Preconditions.checkNotNull(paramGetSignInIntentRequest);
    Builder localBuilder = builder();
    localBuilder.setServerClientId(paramGetSignInIntentRequest.getServerClientId());
    localBuilder.setNonce(paramGetSignInIntentRequest.getNonce());
    localBuilder.filterByHostedDomain(paramGetSignInIntentRequest.getHostedDomainFilter());
    paramGetSignInIntentRequest = zbc;
    if (paramGetSignInIntentRequest != null) {
      localBuilder.zba(paramGetSignInIntentRequest);
    }
    return localBuilder;
  }
  
  public boolean equals(Object paramObject)
  {
    if (!(paramObject instanceof GetSignInIntentRequest)) {
      return false;
    }
    paramObject = (GetSignInIntentRequest)paramObject;
    return (Objects.equal(zba, zba)) && (Objects.equal(zbd, zbd)) && (Objects.equal(zbb, zbb));
  }
  
  @RecentlyNullable
  public String getHostedDomainFilter()
  {
    return zbb;
  }
  
  @RecentlyNullable
  public String getNonce()
  {
    return zbd;
  }
  
  @RecentlyNonNull
  public String getServerClientId()
  {
    return zba;
  }
  
  public int hashCode()
  {
    return Objects.hashCode(new Object[] { zba, zbb });
  }
  
  public void writeToParcel(@RecentlyNonNull Parcel paramParcel, int paramInt)
  {
    paramInt = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeString(paramParcel, 1, getServerClientId(), false);
    SafeParcelWriter.writeString(paramParcel, 2, getHostedDomainFilter(), false);
    SafeParcelWriter.writeString(paramParcel, 3, zbc, false);
    SafeParcelWriter.writeString(paramParcel, 4, getNonce(), false);
    SafeParcelWriter.finishObjectHeader(paramParcel, paramInt);
  }
  
  public static final class Builder
  {
    private String zba;
    private String zbb;
    private String zbc;
    private String zbd;
    
    public Builder() {}
    
    @RecentlyNonNull
    public GetSignInIntentRequest build()
    {
      return new GetSignInIntentRequest(zba, zbb, zbc, zbd);
    }
    
    @RecentlyNonNull
    public Builder filterByHostedDomain(String paramString)
    {
      zbb = paramString;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setNonce(String paramString)
    {
      zbd = paramString;
      return this;
    }
    
    @RecentlyNonNull
    public Builder setServerClientId(@RecentlyNonNull String paramString)
    {
      Preconditions.checkNotNull(paramString);
      zba = paramString;
      return this;
    }
    
    @RecentlyNonNull
    public final Builder zba(String paramString)
    {
      zbc = paramString;
      return this;
    }
  }
}
