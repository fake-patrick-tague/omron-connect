package com.google.android.gms.common.data;

import android.content.ContentValues;
import android.database.CharArrayBuffer;
import android.database.Cursor;
import android.database.CursorIndexOutOfBoundsException;
import android.database.CursorWindow;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable.Creator;
import android.util.Log;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.annotation.KeepName;
import com.google.android.gms.common.internal.Asserts;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.VersionField;
import com.google.android.gms.common.sqlite.CursorWrapper;
import java.io.Closeable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

@KeepForSdk
@KeepName
@SafeParcelable.Class(creator="DataHolderCreator", validate=true)
public final class DataHolder
  extends AbstractSafeParcelable
  implements Closeable
{
  @KeepForSdk
  public static final Parcelable.Creator<DataHolder> CREATOR = new zaf();
  private static final Builder zaf = new zab(new String[0], null);
  @SafeParcelable.VersionField(id=1000)
  final int zaa;
  Bundle zab;
  int[] zac;
  int zad;
  boolean zae = false;
  @SafeParcelable.Field(getter="getColumns", id=1)
  private final String[] zag;
  @SafeParcelable.Field(getter="getWindows", id=2)
  private final CursorWindow[] zah;
  @SafeParcelable.Field(getter="getStatusCode", id=3)
  private final int zai;
  @SafeParcelable.Field(getter="getMetadata", id=4)
  private final Bundle zaj;
  private boolean zak = true;
  
  @SafeParcelable.Constructor
  DataHolder(@SafeParcelable.Param(id=1000) int paramInt1, @SafeParcelable.Param(id=1) String[] paramArrayOfString, @SafeParcelable.Param(id=2) CursorWindow[] paramArrayOfCursorWindow, @SafeParcelable.Param(id=3) int paramInt2, @SafeParcelable.Param(id=4) Bundle paramBundle)
  {
    zaa = paramInt1;
    zag = paramArrayOfString;
    zah = paramArrayOfCursorWindow;
    zai = paramInt2;
    zaj = paramBundle;
  }
  
  @KeepForSdk
  public DataHolder(Cursor paramCursor, int paramInt, Bundle paramBundle) {}
  
  private DataHolder(Builder paramBuilder, int paramInt, Bundle paramBundle)
  {
    this(Builder.zac(paramBuilder), zaf(paramBuilder, -1), paramInt, null);
  }
  
  @KeepForSdk
  public DataHolder(String[] paramArrayOfString, CursorWindow[] paramArrayOfCursorWindow, int paramInt, Bundle paramBundle)
  {
    zaa = 1;
    zag = ((String[])Preconditions.checkNotNull(paramArrayOfString));
    zah = ((CursorWindow[])Preconditions.checkNotNull(paramArrayOfCursorWindow));
    zai = paramInt;
    zaj = paramBundle;
    zad();
  }
  
  @KeepForSdk
  public static Builder builder(String[] paramArrayOfString)
  {
    return new Builder(paramArrayOfString, null, null);
  }
  
  @KeepForSdk
  public static DataHolder empty(int paramInt)
  {
    return new DataHolder(zaf, paramInt, null);
  }
  
  private final void zae(String paramString, int paramInt)
  {
    Bundle localBundle = zab;
    if ((localBundle != null) && (localBundle.containsKey(paramString)))
    {
      if (!isClosed())
      {
        if ((paramInt >= 0) && (paramInt < zad)) {
          return;
        }
        throw new CursorIndexOutOfBoundsException(paramInt, zad);
      }
      throw new IllegalArgumentException("Buffer is closed.");
    }
    paramString = String.valueOf(paramString);
    if (paramString.length() != 0) {
      paramString = "No such column: ".concat(paramString);
    } else {
      paramString = new String("No such column: ");
    }
    throw new IllegalArgumentException(paramString);
  }
  
  private static CursorWindow[] zaf(Builder paramBuilder, int paramInt)
  {
    paramInt = Builder.zac(paramBuilder).length;
    int k = 0;
    if (paramInt == 0) {
      return new CursorWindow[0];
    }
    ArrayList localArrayList2 = Builder.zab(paramBuilder);
    int m = localArrayList2.size();
    Object localObject1 = new CursorWindow(false);
    ArrayList localArrayList1 = new ArrayList();
    localArrayList1.add(localObject1);
    ((CursorWindow)localObject1).setNumColumns(Builder.zac(paramBuilder).length);
    paramInt = 0;
    int i = paramInt;
    for (;;)
    {
      if (paramInt < m) {}
      boolean bool;
      label736:
      label742:
      do
      {
        for (;;)
        {
          int j;
          try
          {
            bool = ((CursorWindow)localObject1).allocRow();
            Object localObject2;
            if (!bool)
            {
              localObject1 = new StringBuilder(72);
              ((StringBuilder)localObject1).append("Allocating additional cursor window for large data set (row ");
              ((StringBuilder)localObject1).append(paramInt);
              ((StringBuilder)localObject1).append(")");
              Log.d("DataHolder", ((StringBuilder)localObject1).toString());
              localObject2 = new CursorWindow(false);
              ((CursorWindow)localObject2).setStartPosition(paramInt);
              ((CursorWindow)localObject2).setNumColumns(Builder.zac(paramBuilder).length);
              localArrayList1.add(localObject2);
              localObject1 = localObject2;
              if (!((CursorWindow)localObject2).allocRow())
              {
                Log.e("DataHolder", "Unable to allocate row to hold data.");
                localArrayList1.remove(localObject2);
                return (CursorWindow[])localArrayList1.toArray(new CursorWindow[localArrayList1.size()]);
              }
            }
            Map localMap = (Map)localArrayList2.get(paramInt);
            j = 0;
            bool = true;
            if (j >= Builder.zac(paramBuilder).length) {
              break;
            }
            if (bool)
            {
              localObject2 = Builder.zac(paramBuilder)[j];
              Object localObject3 = localMap.get(localObject2);
              if (localObject3 == null)
              {
                bool = ((CursorWindow)localObject1).putNull(paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof String))
              {
                bool = ((CursorWindow)localObject1).putString((String)localObject3, paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof Long))
              {
                bool = ((CursorWindow)localObject1).putLong(((Long)localObject3).longValue(), paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof Integer))
              {
                bool = ((CursorWindow)localObject1).putLong(((Integer)localObject3).intValue(), paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof Boolean))
              {
                if (true == ((Boolean)localObject3).booleanValue()) {
                  break label736;
                }
                l = 0L;
                bool = ((CursorWindow)localObject1).putLong(l, paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof byte[]))
              {
                bool = ((CursorWindow)localObject1).putBlob((byte[])localObject3, paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof Double))
              {
                bool = ((CursorWindow)localObject1).putDouble(((Double)localObject3).doubleValue(), paramInt, j);
                break label742;
              }
              if ((localObject3 instanceof Float))
              {
                bool = ((CursorWindow)localObject1).putDouble(((Float)localObject3).floatValue(), paramInt, j);
                break label742;
              }
              paramBuilder = localObject3.toString();
              localObject1 = new StringBuilder(String.valueOf(localObject2).length() + 32 + paramBuilder.length());
              ((StringBuilder)localObject1).append("Unsupported object for column ");
              ((StringBuilder)localObject1).append((String)localObject2);
              ((StringBuilder)localObject1).append(": ");
              ((StringBuilder)localObject1).append(paramBuilder);
              throw new IllegalArgumentException(((StringBuilder)localObject1).toString());
            }
            if (i == 0)
            {
              localObject2 = new StringBuilder(74);
              ((StringBuilder)localObject2).append("Couldn't populate window data for row ");
              ((StringBuilder)localObject2).append(paramInt);
              ((StringBuilder)localObject2).append(" - allocating new window.");
              Log.d("DataHolder", ((StringBuilder)localObject2).toString());
              ((CursorWindow)localObject1).freeLastRow();
              localObject1 = new CursorWindow(false);
              ((CursorWindow)localObject1).setStartPosition(paramInt);
              ((CursorWindow)localObject1).setNumColumns(Builder.zac(paramBuilder).length);
              localArrayList1.add(localObject1);
              paramInt -= 1;
              i = 1;
              break label756;
            }
            throw new zad("Could not add the value to a new CursorWindow. The size of value may be larger than what a CursorWindow can handle.");
          }
          catch (RuntimeException paramBuilder)
          {
            i = localArrayList1.size();
            paramInt = k;
            if (paramInt < i)
            {
              ((CursorWindow)localArrayList1.get(paramInt)).close();
              paramInt += 1;
              continue;
            }
            throw paramBuilder;
          }
          return (CursorWindow[])localArrayList1.toArray(new CursorWindow[localArrayList1.size()]);
          long l = 1L;
          continue;
          j += 1;
        }
      } while (!bool);
      i = 0;
      label756:
      paramInt += 1;
    }
  }
  
  @KeepForSdk
  public void close()
  {
    try
    {
      if (!zae)
      {
        zae = true;
        int i = 0;
        for (;;)
        {
          CursorWindow[] arrayOfCursorWindow = zah;
          if (i >= arrayOfCursorWindow.length) {
            break;
          }
          arrayOfCursorWindow[i].close();
          i += 1;
        }
      }
      return;
    }
    finally {}
  }
  
  protected final void finalize()
    throws Throwable
  {
    try
    {
      if ((zak) && (zah.length > 0) && (!isClosed()))
      {
        close();
        String str = toString();
        StringBuilder localStringBuilder = new StringBuilder(String.valueOf(str).length() + 178);
        localStringBuilder.append("Internal data leak within a DataBuffer object detected!  Be sure to explicitly call release() on all DataBuffer extending objects when you are done with them. (internal object: ");
        localStringBuilder.append(str);
        localStringBuilder.append(")");
        Log.e("DataBuffer", localStringBuilder.toString());
      }
      return;
    }
    finally
    {
      super.finalize();
    }
  }
  
  @KeepForSdk
  public boolean getBoolean(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return Long.valueOf(zah[paramInt2].getLong(paramInt1, zab.getInt(paramString))).longValue() == 1L;
  }
  
  @KeepForSdk
  public byte[] getByteArray(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].getBlob(paramInt1, zab.getInt(paramString));
  }
  
  @KeepForSdk
  public int getCount()
  {
    return zad;
  }
  
  @KeepForSdk
  public int getInteger(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].getInt(paramInt1, zab.getInt(paramString));
  }
  
  @KeepForSdk
  public long getLong(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].getLong(paramInt1, zab.getInt(paramString));
  }
  
  @KeepForSdk
  public Bundle getMetadata()
  {
    return zaj;
  }
  
  @KeepForSdk
  public int getStatusCode()
  {
    return zai;
  }
  
  @KeepForSdk
  public String getString(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].getString(paramInt1, zab.getInt(paramString));
  }
  
  @KeepForSdk
  public int getWindowIndex(int paramInt)
  {
    int j = 0;
    boolean bool;
    if ((paramInt >= 0) && (paramInt < zad)) {
      bool = true;
    } else {
      bool = false;
    }
    Preconditions.checkState(bool);
    int k;
    int i;
    for (;;)
    {
      int[] arrayOfInt = zac;
      k = arrayOfInt.length;
      i = j;
      if (j >= k) {
        break;
      }
      if (paramInt < arrayOfInt[j])
      {
        i = j - 1;
        break;
      }
      j += 1;
    }
    paramInt = i;
    if (i == k) {
      paramInt = i - 1;
    }
    return paramInt;
  }
  
  @KeepForSdk
  public boolean hasColumn(String paramString)
  {
    return zab.containsKey(paramString);
  }
  
  @KeepForSdk
  public boolean hasNull(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].isNull(paramInt1, zab.getInt(paramString));
  }
  
  @KeepForSdk
  public boolean isClosed()
  {
    try
    {
      boolean bool = zae;
      return bool;
    }
    finally {}
  }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt)
  {
    int i = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeStringArray(paramParcel, 1, zag, false);
    SafeParcelWriter.writeTypedArray(paramParcel, 2, zah, paramInt, false);
    SafeParcelWriter.writeInt(paramParcel, 3, getStatusCode());
    SafeParcelWriter.writeBundle(paramParcel, 4, getMetadata(), false);
    SafeParcelWriter.writeInt(paramParcel, 1000, zaa);
    SafeParcelWriter.finishObjectHeader(paramParcel, i);
    if ((paramInt & 0x1) != 0) {
      close();
    }
  }
  
  public final double zaa(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].getDouble(paramInt1, zab.getInt(paramString));
  }
  
  public final float zab(String paramString, int paramInt1, int paramInt2)
  {
    zae(paramString, paramInt1);
    return zah[paramInt2].getFloat(paramInt1, zab.getInt(paramString));
  }
  
  public final void zac(String paramString, int paramInt1, int paramInt2, CharArrayBuffer paramCharArrayBuffer)
  {
    zae(paramString, paramInt1);
    zah[paramInt2].copyStringToBuffer(paramInt1, zab.getInt(paramString), paramCharArrayBuffer);
  }
  
  public final void zad()
  {
    zab = new Bundle();
    int k = 0;
    int i = 0;
    Object localObject;
    for (;;)
    {
      localObject = zag;
      if (i >= localObject.length) {
        break;
      }
      zab.putInt(localObject[i], i);
      i += 1;
    }
    zac = new int[zah.length];
    int j = 0;
    i = k;
    for (;;)
    {
      localObject = zah;
      if (i >= localObject.length) {
        break;
      }
      zac[i] = j;
      k = localObject[i].getStartPosition();
      j += zah[i].getNumRows() - (j - k);
      i += 1;
    }
    zad = j;
  }
  
  @KeepForSdk
  public static class Builder
  {
    private final String[] zaa;
    private final ArrayList<HashMap<String, Object>> zab;
    private final HashMap<Object, Integer> zac;
    
    @KeepForSdk
    public DataHolder build(int paramInt)
    {
      return new DataHolder(this, paramInt, null, null);
    }
    
    @KeepForSdk
    public DataHolder build(int paramInt, Bundle paramBundle)
    {
      return new DataHolder(this, paramInt, paramBundle, -1, null);
    }
    
    @KeepForSdk
    public Builder withRow(ContentValues paramContentValues)
    {
      Asserts.checkNotNull(paramContentValues);
      HashMap localHashMap = new HashMap(paramContentValues.size());
      paramContentValues = paramContentValues.valueSet().iterator();
      while (paramContentValues.hasNext())
      {
        Map.Entry localEntry = (Map.Entry)paramContentValues.next();
        localHashMap.put((String)localEntry.getKey(), localEntry.getValue());
      }
      return zaa(localHashMap);
    }
    
    public Builder zaa(HashMap<String, Object> paramHashMap)
    {
      Asserts.checkNotNull(paramHashMap);
      zab.add(paramHashMap);
      return this;
    }
  }
}
