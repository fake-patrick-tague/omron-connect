package c.j.a;

import android.content.Context;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.Interpolator;
import android.widget.OverScroller;
import c.h.q.f0;
import java.util.Arrays;

public class c
{
  private static final Interpolator a = new a();
  private int b;
  private int c;
  private int d = -1;
  private float[] e;
  private float[] f;
  private float[] g;
  private float[] h;
  private int[] i;
  private int[] j;
  private int[] k;
  private int l;
  private VelocityTracker m;
  private float n;
  private float o;
  private int p;
  private int q;
  private OverScroller r;
  private final c s;
  private View t;
  private boolean u;
  private final ViewGroup v;
  private final Runnable w = new b();
  
  private c(Context paramContext, ViewGroup paramViewGroup, c paramC)
  {
    if (paramViewGroup != null)
    {
      if (paramC != null)
      {
        v = paramViewGroup;
        s = paramC;
        paramViewGroup = ViewConfiguration.get(paramContext);
        p = ((int)(getResourcesgetDisplayMetricsdensity * 20.0F + 0.5F));
        c = paramViewGroup.getScaledTouchSlop();
        n = paramViewGroup.getScaledMaximumFlingVelocity();
        o = paramViewGroup.getScaledMinimumFlingVelocity();
        r = new OverScroller(paramContext, a);
        return;
      }
      throw new IllegalArgumentException("Callback may not be null");
    }
    throw new IllegalArgumentException("Parent view may not be null");
  }
  
  private void A()
  {
    m.computeCurrentVelocity(1000, n);
    n(e(m.getXVelocity(d), o, n), e(m.getYVelocity(d), o, n));
  }
  
  private void B(float paramFloat1, float paramFloat2, int paramInt)
  {
    int i2 = 1;
    if (!c(paramFloat1, paramFloat2, paramInt, 1)) {
      i2 = 0;
    }
    int i1 = i2;
    if (c(paramFloat2, paramFloat1, paramInt, 4)) {
      i1 = i2 | 0x4;
    }
    i2 = i1;
    if (c(paramFloat1, paramFloat2, paramInt, 2)) {
      i2 = i1 | 0x2;
    }
    i1 = i2;
    if (c(paramFloat2, paramFloat1, paramInt, 8)) {
      i1 = i2 | 0x8;
    }
    if (i1 != 0)
    {
      int[] arrayOfInt = j;
      arrayOfInt[paramInt] |= i1;
      s.f(i1, paramInt);
    }
  }
  
  private void C(float paramFloat1, float paramFloat2, int paramInt)
  {
    q(paramInt);
    float[] arrayOfFloat = e;
    g[paramInt] = paramFloat1;
    arrayOfFloat[paramInt] = paramFloat1;
    arrayOfFloat = f;
    h[paramInt] = paramFloat2;
    arrayOfFloat[paramInt] = paramFloat2;
    i[paramInt] = t((int)paramFloat1, (int)paramFloat2);
    l |= 1 << paramInt;
  }
  
  private void D(MotionEvent paramMotionEvent)
  {
    int i2 = paramMotionEvent.getPointerCount();
    int i1 = 0;
    while (i1 < i2)
    {
      int i3 = paramMotionEvent.getPointerId(i1);
      if (x(i3))
      {
        float f1 = paramMotionEvent.getX(i1);
        float f2 = paramMotionEvent.getY(i1);
        g[i3] = f1;
        h[i3] = f2;
      }
      i1 += 1;
    }
  }
  
  private boolean c(float paramFloat1, float paramFloat2, int paramInt1, int paramInt2)
  {
    paramFloat1 = Math.abs(paramFloat1);
    paramFloat2 = Math.abs(paramFloat2);
    int i1 = i[paramInt1];
    boolean bool2 = false;
    boolean bool1 = bool2;
    if ((i1 & paramInt2) == paramInt2)
    {
      bool1 = bool2;
      if ((q & paramInt2) != 0)
      {
        bool1 = bool2;
        if ((k[paramInt1] & paramInt2) != paramInt2)
        {
          bool1 = bool2;
          if ((j[paramInt1] & paramInt2) != paramInt2)
          {
            i1 = c;
            if ((paramFloat1 <= i1) && (paramFloat2 <= i1)) {
              return false;
            }
            if ((paramFloat1 < paramFloat2 * 0.5F) && (s.g(paramInt2)))
            {
              int[] arrayOfInt = k;
              arrayOfInt[paramInt1] |= paramInt2;
              return false;
            }
            bool1 = bool2;
            if ((j[paramInt1] & paramInt2) == 0)
            {
              bool1 = bool2;
              if (paramFloat1 > c) {
                bool1 = true;
              }
            }
          }
        }
      }
    }
    return bool1;
  }
  
  private boolean d(View paramView, float paramFloat1, float paramFloat2)
  {
    boolean bool3 = false;
    boolean bool2 = false;
    boolean bool1 = false;
    if (paramView == null) {
      return false;
    }
    int i1;
    if (s.d(paramView) > 0) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if (s.e(paramView) > 0) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    if ((i1 != 0) && (i2 != 0))
    {
      i1 = c;
      if (paramFloat1 * paramFloat1 + paramFloat2 * paramFloat2 > i1 * i1) {
        bool1 = true;
      }
      return bool1;
    }
    if (i1 != 0)
    {
      bool1 = bool3;
      if (Math.abs(paramFloat1) > c) {
        bool1 = true;
      }
      return bool1;
    }
    bool1 = bool2;
    if (i2 != 0)
    {
      bool1 = bool2;
      if (Math.abs(paramFloat2) > c) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  private float e(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    float f1 = Math.abs(paramFloat1);
    if (f1 < paramFloat2) {
      return 0.0F;
    }
    if (f1 > paramFloat3)
    {
      if (paramFloat1 > 0.0F) {
        return paramFloat3;
      }
      return -paramFloat3;
    }
    return paramFloat1;
  }
  
  private int f(int paramInt1, int paramInt2, int paramInt3)
  {
    int i1 = Math.abs(paramInt1);
    if (i1 < paramInt2) {
      return 0;
    }
    if (i1 > paramInt3)
    {
      if (paramInt1 > 0) {
        return paramInt3;
      }
      return -paramInt3;
    }
    return paramInt1;
  }
  
  private void g()
  {
    float[] arrayOfFloat = e;
    if (arrayOfFloat == null) {
      return;
    }
    Arrays.fill(arrayOfFloat, 0.0F);
    Arrays.fill(f, 0.0F);
    Arrays.fill(g, 0.0F);
    Arrays.fill(h, 0.0F);
    Arrays.fill(i, 0);
    Arrays.fill(j, 0);
    Arrays.fill(k, 0);
    l = 0;
  }
  
  private void h(int paramInt)
  {
    if (e != null)
    {
      if (!w(paramInt)) {
        return;
      }
      e[paramInt] = 0.0F;
      f[paramInt] = 0.0F;
      g[paramInt] = 0.0F;
      h[paramInt] = 0.0F;
      i[paramInt] = 0;
      j[paramInt] = 0;
      k[paramInt] = 0;
      l = (1 << paramInt & l);
    }
  }
  
  private int i(int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt1 == 0) {
      return 0;
    }
    int i1 = v.getWidth();
    int i2 = i1 / 2;
    float f2 = Math.min(1.0F, Math.abs(paramInt1) / i1);
    float f1 = i2;
    f2 = o(f2);
    paramInt2 = Math.abs(paramInt2);
    if (paramInt2 > 0) {
      paramInt1 = Math.round(Math.abs((f1 + f2 * f1) / paramInt2) * 1000.0F) * 4;
    } else {
      paramInt1 = (int)((Math.abs(paramInt1) / paramInt3 + 1.0F) * 256.0F);
    }
    return Math.min(paramInt1, 600);
  }
  
  private int j(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramInt3 = f(paramInt3, (int)o, (int)n);
    paramInt4 = f(paramInt4, (int)o, (int)n);
    int i1 = Math.abs(paramInt1);
    int i2 = Math.abs(paramInt2);
    int i3 = Math.abs(paramInt3);
    int i4 = Math.abs(paramInt4);
    int i5 = i3 + i4;
    int i6 = i1 + i2;
    float f1;
    float f2;
    if (paramInt3 != 0)
    {
      f1 = i3;
      f2 = i5;
    }
    else
    {
      f1 = i1;
      f2 = i6;
    }
    float f3 = f1 / f2;
    if (paramInt4 != 0)
    {
      f1 = i4;
      f2 = i5;
    }
    else
    {
      f1 = i2;
      f2 = i6;
    }
    f1 /= f2;
    paramInt1 = i(paramInt1, paramInt3, s.d(paramView));
    paramInt2 = i(paramInt2, paramInt4, s.e(paramView));
    return (int)(paramInt1 * f3 + paramInt2 * f1);
  }
  
  public static c l(ViewGroup paramViewGroup, float paramFloat, c paramC)
  {
    paramViewGroup = m(paramViewGroup, paramC);
    c = ((int)(c * (1.0F / paramFloat)));
    return paramViewGroup;
  }
  
  public static c m(ViewGroup paramViewGroup, c paramC)
  {
    return new c(paramViewGroup.getContext(), paramViewGroup, paramC);
  }
  
  private void n(float paramFloat1, float paramFloat2)
  {
    u = true;
    s.l(t, paramFloat1, paramFloat2);
    u = false;
    if (b == 1) {
      E(0);
    }
  }
  
  private float o(float paramFloat)
  {
    return (float)Math.sin((paramFloat - 0.5F) * 0.47123894F);
  }
  
  private void p(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i2 = t.getLeft();
    int i3 = t.getTop();
    int i1 = paramInt1;
    if (paramInt3 != 0)
    {
      i1 = s.a(t, paramInt1, paramInt3);
      f0.Z(t, i1 - i2);
    }
    paramInt1 = paramInt2;
    if (paramInt4 != 0)
    {
      paramInt1 = s.b(t, paramInt2, paramInt4);
      f0.a0(t, paramInt1 - i3);
    }
    if ((paramInt3 != 0) || (paramInt4 != 0)) {
      s.k(t, i1, paramInt1, i1 - i2, paramInt1 - i3);
    }
  }
  
  private void q(int paramInt)
  {
    Object localObject = e;
    if ((localObject == null) || (localObject.length <= paramInt))
    {
      paramInt += 1;
      float[] arrayOfFloat1 = new float[paramInt];
      float[] arrayOfFloat2 = new float[paramInt];
      float[] arrayOfFloat3 = new float[paramInt];
      float[] arrayOfFloat4 = new float[paramInt];
      int[] arrayOfInt1 = new int[paramInt];
      int[] arrayOfInt2 = new int[paramInt];
      int[] arrayOfInt3 = new int[paramInt];
      if (localObject != null)
      {
        System.arraycopy(localObject, 0, arrayOfFloat1, 0, localObject.length);
        localObject = f;
        System.arraycopy(localObject, 0, arrayOfFloat2, 0, localObject.length);
        localObject = g;
        System.arraycopy(localObject, 0, arrayOfFloat3, 0, localObject.length);
        localObject = h;
        System.arraycopy(localObject, 0, arrayOfFloat4, 0, localObject.length);
        localObject = i;
        System.arraycopy(localObject, 0, arrayOfInt1, 0, localObject.length);
        localObject = j;
        System.arraycopy(localObject, 0, arrayOfInt2, 0, localObject.length);
        localObject = k;
        System.arraycopy(localObject, 0, arrayOfInt3, 0, localObject.length);
      }
      e = arrayOfFloat1;
      f = arrayOfFloat2;
      g = arrayOfFloat3;
      h = arrayOfFloat4;
      i = arrayOfInt1;
      j = arrayOfInt2;
      k = arrayOfInt3;
    }
  }
  
  private boolean s(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i1 = t.getLeft();
    int i2 = t.getTop();
    paramInt1 -= i1;
    paramInt2 -= i2;
    if ((paramInt1 == 0) && (paramInt2 == 0))
    {
      r.abortAnimation();
      E(0);
      return false;
    }
    paramInt3 = j(t, paramInt1, paramInt2, paramInt3, paramInt4);
    r.startScroll(i1, i2, paramInt1, paramInt2, paramInt3);
    E(2);
    return true;
  }
  
  private int t(int paramInt1, int paramInt2)
  {
    if (paramInt1 < v.getLeft() + p) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    int i1 = i2;
    if (paramInt2 < v.getTop() + p) {
      i1 = i2 | 0x4;
    }
    int i2 = i1;
    if (paramInt1 > v.getRight() - p) {
      i2 = i1 | 0x2;
    }
    paramInt1 = i2;
    if (paramInt2 > v.getBottom() - p) {
      paramInt1 = i2 | 0x8;
    }
    return paramInt1;
  }
  
  private boolean x(int paramInt)
  {
    if (!w(paramInt))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Ignoring pointerId=");
      localStringBuilder.append(paramInt);
      localStringBuilder.append(" because ACTION_DOWN was not received ");
      localStringBuilder.append("for this pointer before ACTION_MOVE. It likely happened because ");
      localStringBuilder.append(" ViewDragHelper did not receive all the events in the event stream.");
      Log.e("ViewDragHelper", localStringBuilder.toString());
      return false;
    }
    return true;
  }
  
  void E(int paramInt)
  {
    v.removeCallbacks(w);
    if (b != paramInt)
    {
      b = paramInt;
      s.j(paramInt);
      if (b == 0) {
        t = null;
      }
    }
  }
  
  public boolean F(int paramInt1, int paramInt2)
  {
    if (u) {
      return s(paramInt1, paramInt2, (int)m.getXVelocity(d), (int)m.getYVelocity(d));
    }
    throw new IllegalStateException("Cannot settleCapturedViewAt outside of a call to Callback#onViewReleased");
  }
  
  public boolean G(MotionEvent paramMotionEvent)
  {
    int i1 = paramMotionEvent.getActionMasked();
    int i2 = paramMotionEvent.getActionIndex();
    if (i1 == 0) {
      a();
    }
    if (m == null) {
      m = VelocityTracker.obtain();
    }
    m.addMovement(paramMotionEvent);
    float f1;
    float f2;
    int i3;
    if (i1 != 0)
    {
      if (i1 != 1) {
        if (i1 != 2)
        {
          if (i1 == 3) {
            break label517;
          }
          if (i1 != 5) {
            if (i1 != 6) {
              break label619;
            }
          }
        }
      }
      for (;;)
      {
        h(paramMotionEvent.getPointerId(i2));
        continue;
        i1 = paramMotionEvent.getPointerId(i2);
        f1 = paramMotionEvent.getX(i2);
        f2 = paramMotionEvent.getY(i2);
        C(f1, f2, i1);
        i2 = b;
        if (i2 == 0)
        {
          i2 = i[i1];
          i3 = q;
          if ((i2 & i3) != 0) {
            s.h(i2 & i3, i1);
          }
        }
        else if (i2 == 2)
        {
          paramMotionEvent = r((int)f1, (int)f2);
          if (paramMotionEvent == t)
          {
            I(paramMotionEvent, i1);
            continue;
            if ((e != null) && (f != null))
            {
              i3 = paramMotionEvent.getPointerCount();
              i1 = 0;
              while (i1 < i3)
              {
                int i4 = paramMotionEvent.getPointerId(i1);
                if (x(i4))
                {
                  f1 = paramMotionEvent.getX(i1);
                  f2 = paramMotionEvent.getY(i1);
                  float f3 = f1 - e[i4];
                  float f4 = f2 - f[i4];
                  View localView = r((int)f1, (int)f2);
                  if ((localView != null) && (d(localView, f3, f4))) {
                    i2 = 1;
                  } else {
                    i2 = 0;
                  }
                  if (i2 != 0)
                  {
                    int i5 = localView.getLeft();
                    int i6 = (int)f3;
                    i6 = s.a(localView, i5 + i6, i6);
                    int i7 = localView.getTop();
                    int i8 = (int)f4;
                    i8 = s.b(localView, i7 + i8, i8);
                    int i9 = s.d(localView);
                    int i10 = s.e(localView);
                    if (((i9 == 0) || ((i9 > 0) && (i6 == i5))) && ((i10 == 0) || ((i10 > 0) && (i8 == i7)))) {
                      break;
                    }
                  }
                  else
                  {
                    B(f3, f4, i4);
                    if ((b == 1) || ((i2 != 0) && (I(localView, i4)))) {
                      break;
                    }
                  }
                }
                i1 += 1;
              }
              D(paramMotionEvent);
              continue;
              label517:
              a();
            }
          }
        }
      }
    }
    else
    {
      f1 = paramMotionEvent.getX();
      f2 = paramMotionEvent.getY();
      i1 = paramMotionEvent.getPointerId(0);
      C(f1, f2, i1);
      paramMotionEvent = r((int)f1, (int)f2);
      if ((paramMotionEvent == t) && (b == 2)) {
        I(paramMotionEvent, i1);
      }
      i2 = i[i1];
      i3 = q;
      if ((i2 & i3) != 0) {
        s.h(i2 & i3, i1);
      }
    }
    label619:
    boolean bool = false;
    if (b == 1) {
      bool = true;
    }
    return bool;
  }
  
  public boolean H(View paramView, int paramInt1, int paramInt2)
  {
    t = paramView;
    d = -1;
    boolean bool = s(paramInt1, paramInt2, 0, 0);
    if ((!bool) && (b == 0) && (t != null)) {
      t = null;
    }
    return bool;
  }
  
  boolean I(View paramView, int paramInt)
  {
    if ((paramView == t) && (d == paramInt)) {
      return true;
    }
    if ((paramView != null) && (s.m(paramView, paramInt)))
    {
      d = paramInt;
      b(paramView, paramInt);
      return true;
    }
    return false;
  }
  
  public void a()
  {
    d = -1;
    g();
    VelocityTracker localVelocityTracker = m;
    if (localVelocityTracker != null)
    {
      localVelocityTracker.recycle();
      m = null;
    }
  }
  
  public void b(View paramView, int paramInt)
  {
    if (paramView.getParent() == v)
    {
      t = paramView;
      d = paramInt;
      s.i(paramView, paramInt);
      E(1);
      return;
    }
    paramView = new StringBuilder();
    paramView.append("captureChildView: parameter must be a descendant of the ViewDragHelper's tracked parent view (");
    paramView.append(v);
    paramView.append(")");
    throw new IllegalArgumentException(paramView.toString());
  }
  
  public boolean k(boolean paramBoolean)
  {
    int i1 = b;
    boolean bool2 = false;
    if (i1 == 2)
    {
      boolean bool3 = r.computeScrollOffset();
      i1 = r.getCurrX();
      int i2 = r.getCurrY();
      int i3 = i1 - t.getLeft();
      int i4 = i2 - t.getTop();
      if (i3 != 0) {
        f0.Z(t, i3);
      }
      if (i4 != 0) {
        f0.a0(t, i4);
      }
      if ((i3 != 0) || (i4 != 0)) {
        s.k(t, i1, i2, i3, i4);
      }
      boolean bool1 = bool3;
      if (bool3)
      {
        bool1 = bool3;
        if (i1 == r.getFinalX())
        {
          bool1 = bool3;
          if (i2 == r.getFinalY())
          {
            r.abortAnimation();
            bool1 = false;
          }
        }
      }
      if (!bool1) {
        if (paramBoolean) {
          v.post(w);
        } else {
          E(0);
        }
      }
    }
    paramBoolean = bool2;
    if (b == 2) {
      paramBoolean = true;
    }
    return paramBoolean;
  }
  
  public View r(int paramInt1, int paramInt2)
  {
    int i1 = v.getChildCount() - 1;
    while (i1 >= 0)
    {
      View localView = v.getChildAt(s.c(i1));
      if ((paramInt1 >= localView.getLeft()) && (paramInt1 < localView.getRight()) && (paramInt2 >= localView.getTop()) && (paramInt2 < localView.getBottom())) {
        return localView;
      }
      i1 -= 1;
    }
    return null;
  }
  
  public int u()
  {
    return c;
  }
  
  public boolean v(int paramInt1, int paramInt2)
  {
    return y(t, paramInt1, paramInt2);
  }
  
  public boolean w(int paramInt)
  {
    return (1 << paramInt & l) != 0;
  }
  
  public boolean y(View paramView, int paramInt1, int paramInt2)
  {
    boolean bool2 = false;
    if (paramView == null) {
      return false;
    }
    boolean bool1 = bool2;
    if (paramInt1 >= paramView.getLeft())
    {
      bool1 = bool2;
      if (paramInt1 < paramView.getRight())
      {
        bool1 = bool2;
        if (paramInt2 >= paramView.getTop())
        {
          bool1 = bool2;
          if (paramInt2 < paramView.getBottom()) {
            bool1 = true;
          }
        }
      }
    }
    return bool1;
  }
  
  public void z(MotionEvent paramMotionEvent)
  {
    int i4 = paramMotionEvent.getActionMasked();
    int i3 = paramMotionEvent.getActionIndex();
    if (i4 == 0) {
      a();
    }
    if (m == null) {
      m = VelocityTracker.obtain();
    }
    m.addMovement(paramMotionEvent);
    int i2 = 0;
    int i1 = 0;
    float f1;
    float f2;
    if (i4 != 0)
    {
      if (i4 != 1)
      {
        Object localObject;
        if (i4 != 2)
        {
          if (i4 != 3)
          {
            if (i4 != 5)
            {
              if (i4 != 6) {
                return;
              }
              i2 = paramMotionEvent.getPointerId(i3);
              if ((b == 1) && (i2 == d))
              {
                i3 = paramMotionEvent.getPointerCount();
                while (i1 < i3)
                {
                  i4 = paramMotionEvent.getPointerId(i1);
                  if (i4 != d)
                  {
                    f1 = paramMotionEvent.getX(i1);
                    f2 = paramMotionEvent.getY(i1);
                    localObject = r((int)f1, (int)f2);
                    View localView = t;
                    if ((localObject == localView) && (I(localView, i4)))
                    {
                      i1 = d;
                      break label213;
                    }
                  }
                  i1 += 1;
                }
                i1 = -1;
                label213:
                if (i1 == -1) {
                  A();
                }
              }
              h(i2);
              return;
            }
            i1 = paramMotionEvent.getPointerId(i3);
            f1 = paramMotionEvent.getX(i3);
            f2 = paramMotionEvent.getY(i3);
            C(f1, f2, i1);
            if (b == 0)
            {
              I(r((int)f1, (int)f2), i1);
              i2 = i[i1];
              i3 = q;
              if ((i2 & i3) != 0) {
                s.h(i2 & i3, i1);
              }
            }
            else if (v((int)f1, (int)f2))
            {
              I(t, i1);
            }
          }
          else
          {
            if (b == 1) {
              n(0.0F, 0.0F);
            }
            a();
          }
        }
        else
        {
          if (b == 1)
          {
            if (!x(d)) {
              return;
            }
            i1 = paramMotionEvent.findPointerIndex(d);
            f1 = paramMotionEvent.getX(i1);
            f2 = paramMotionEvent.getY(i1);
            localObject = g;
            i2 = d;
            i1 = (int)(f1 - localObject[i2]);
            i2 = (int)(f2 - h[i2]);
            p(t.getLeft() + i1, t.getTop() + i2, i1, i2);
            D(paramMotionEvent);
            return;
          }
          i3 = paramMotionEvent.getPointerCount();
          i1 = i2;
          while (i1 < i3)
          {
            i2 = paramMotionEvent.getPointerId(i1);
            if (x(i2))
            {
              f1 = paramMotionEvent.getX(i1);
              f2 = paramMotionEvent.getY(i1);
              float f3 = f1 - e[i2];
              float f4 = f2 - f[i2];
              B(f3, f4, i2);
              if (b == 1) {
                break;
              }
              localObject = r((int)f1, (int)f2);
              if ((d((View)localObject, f3, f4)) && (I((View)localObject, i2))) {
                break;
              }
            }
            i1 += 1;
          }
          D(paramMotionEvent);
        }
      }
      else
      {
        if (b == 1) {
          A();
        }
        a();
      }
    }
    else
    {
      f1 = paramMotionEvent.getX();
      f2 = paramMotionEvent.getY();
      i1 = paramMotionEvent.getPointerId(0);
      paramMotionEvent = r((int)f1, (int)f2);
      C(f1, f2, i1);
      I(paramMotionEvent, i1);
      i2 = i[i1];
      i3 = q;
      if ((i2 & i3) != 0) {
        s.h(i2 & i3, i1);
      }
    }
  }
  
  static final class a
    implements Interpolator
  {
    a() {}
    
    public float getInterpolation(float paramFloat)
    {
      paramFloat -= 1.0F;
      return paramFloat * paramFloat * paramFloat * paramFloat * paramFloat + 1.0F;
    }
  }
  
  class b
    implements Runnable
  {
    b() {}
    
    public void run()
    {
      E(0);
    }
  }
  
  public static abstract class c
  {
    public c() {}
    
    public abstract int a(View paramView, int paramInt1, int paramInt2);
    
    public abstract int b(View paramView, int paramInt1, int paramInt2);
    
    public int c(int paramInt)
    {
      return paramInt;
    }
    
    public int d(View paramView)
    {
      return 0;
    }
    
    public int e(View paramView)
    {
      return 0;
    }
    
    public void f(int paramInt1, int paramInt2) {}
    
    public boolean g(int paramInt)
    {
      return false;
    }
    
    public void h(int paramInt1, int paramInt2) {}
    
    public void i(View paramView, int paramInt) {}
    
    public abstract void j(int paramInt);
    
    public abstract void k(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4);
    
    public abstract void l(View paramView, float paramFloat1, float paramFloat2);
    
    public abstract boolean m(View paramView, int paramInt);
  }
}
