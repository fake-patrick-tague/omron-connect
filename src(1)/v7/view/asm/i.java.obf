package c.j.a;

import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import c.e.h;
import c.h.q.f;
import c.h.q.f0;
import c.h.q.i0;
import c.h.q.p0.c;
import c.h.q.p0.d;
import c.h.q.p0.e;
import java.util.ArrayList;
import java.util.List;

public abstract class a
  extends f
{
  private static final Rect d = new Rect(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
  private static final b.a<c> e = new a();
  private static final b.b<h<c>, c> f = new b();
  private final Rect g = new Rect();
  private final Rect h = new Rect();
  private final Rect i = new Rect();
  private final int[] j = new int[2];
  private final AccessibilityManager k;
  private final View l;
  private c m;
  int n = Integer.MIN_VALUE;
  int o = Integer.MIN_VALUE;
  private int p = Integer.MIN_VALUE;
  
  public a(View paramView)
  {
    if (paramView != null)
    {
      l = paramView;
      k = ((AccessibilityManager)paramView.getContext().getSystemService("accessibility"));
      paramView.setFocusable(true);
      if (f0.B(paramView) == 0) {
        f0.A0(paramView, 1);
      }
      return;
    }
    throw new IllegalArgumentException("View may not be null");
  }
  
  private static Rect D(View paramView, int paramInt, Rect paramRect)
  {
    int i1 = paramView.getWidth();
    int i2 = paramView.getHeight();
    if (paramInt != 17)
    {
      if (paramInt != 33)
      {
        if (paramInt != 66)
        {
          if (paramInt == 130)
          {
            paramRect.set(0, -1, i1, -1);
            return paramRect;
          }
          throw new IllegalArgumentException("direction must be one of {FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
        }
        paramRect.set(-1, 0, -1, i2);
        return paramRect;
      }
      paramRect.set(0, i2, i1, i2);
      return paramRect;
    }
    paramRect.set(i1, 0, i1, i2);
    return paramRect;
  }
  
  private boolean E(Rect paramRect)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramRect != null)
    {
      if (paramRect.isEmpty()) {
        return false;
      }
      if (l.getWindowVisibility() != 0) {
        return false;
      }
      paramRect = l.getParent();
      while ((paramRect instanceof View))
      {
        paramRect = (View)paramRect;
        if (paramRect.getAlpha() > 0.0F)
        {
          if (paramRect.getVisibility() != 0) {
            return false;
          }
          paramRect = paramRect.getParent();
        }
        else
        {
          return false;
        }
      }
      bool1 = bool2;
      if (paramRect != null) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  private static int F(int paramInt)
  {
    if (paramInt != 19)
    {
      if (paramInt != 21)
      {
        if (paramInt != 22) {
          return 130;
        }
        return 66;
      }
      return 17;
    }
    return 33;
  }
  
  private boolean G(int paramInt, Rect paramRect)
  {
    h localH = y();
    int i2 = o;
    int i1 = Integer.MIN_VALUE;
    c localC;
    if (i2 == Integer.MIN_VALUE) {
      localC = null;
    } else {
      localC = (c)localH.f(i2);
    }
    if ((paramInt != 1) && (paramInt != 2))
    {
      if ((paramInt != 17) && (paramInt != 33) && (paramInt != 66) && (paramInt != 130)) {
        throw new IllegalArgumentException("direction must be one of {FOCUS_FORWARD, FOCUS_BACKWARD, FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");
      }
      Rect localRect = new Rect();
      i2 = o;
      if (i2 != Integer.MIN_VALUE) {
        z(i2, localRect);
      } else if (paramRect != null) {
        localRect.set(paramRect);
      } else {
        D(l, paramInt, localRect);
      }
      paramRect = (c)b.c(localH, f, e, localC, localRect, paramInt);
    }
    else
    {
      boolean bool;
      if (f0.D(l) == 1) {
        bool = true;
      } else {
        bool = false;
      }
      paramRect = (c)b.d(localH, f, e, localC, paramInt, bool, false);
    }
    if (paramRect == null) {
      paramInt = i1;
    } else {
      paramInt = localH.j(localH.i(paramRect));
    }
    return T(paramInt);
  }
  
  private boolean Q(int paramInt1, int paramInt2, Bundle paramBundle)
  {
    if (paramInt2 != 1)
    {
      if (paramInt2 != 2)
      {
        if (paramInt2 != 64)
        {
          if (paramInt2 != 128) {
            return J(paramInt1, paramInt2, paramBundle);
          }
          return n(paramInt1);
        }
        return S(paramInt1);
      }
      return o(paramInt1);
    }
    return T(paramInt1);
  }
  
  private boolean R(int paramInt, Bundle paramBundle)
  {
    return f0.e0(l, paramInt, paramBundle);
  }
  
  private boolean S(int paramInt)
  {
    if (k.isEnabled())
    {
      if (!k.isTouchExplorationEnabled()) {
        return false;
      }
      int i1 = n;
      if (i1 != paramInt)
      {
        if (i1 != Integer.MIN_VALUE) {
          n(i1);
        }
        n = paramInt;
        l.invalidate();
        U(paramInt, 32768);
        return true;
      }
    }
    return false;
  }
  
  private void V(int paramInt)
  {
    int i1 = p;
    if (i1 == paramInt) {
      return;
    }
    p = paramInt;
    U(paramInt, 128);
    U(i1, 256);
  }
  
  private boolean n(int paramInt)
  {
    if (n == paramInt)
    {
      n = Integer.MIN_VALUE;
      l.invalidate();
      U(paramInt, 65536);
      return true;
    }
    return false;
  }
  
  private boolean p()
  {
    int i1 = o;
    return (i1 != Integer.MIN_VALUE) && (J(i1, 16, null));
  }
  
  private AccessibilityEvent q(int paramInt1, int paramInt2)
  {
    if (paramInt1 != -1) {
      return r(paramInt1, paramInt2);
    }
    return s(paramInt2);
  }
  
  private AccessibilityEvent r(int paramInt1, int paramInt2)
  {
    AccessibilityEvent localAccessibilityEvent = AccessibilityEvent.obtain(paramInt2);
    c localC = H(paramInt1);
    localAccessibilityEvent.getText().add(localC.v());
    localAccessibilityEvent.setContentDescription(localC.q());
    localAccessibilityEvent.setScrollable(localC.I());
    localAccessibilityEvent.setPassword(localC.H());
    localAccessibilityEvent.setEnabled(localC.D());
    localAccessibilityEvent.setChecked(localC.B());
    L(paramInt1, localAccessibilityEvent);
    if ((localAccessibilityEvent.getText().isEmpty()) && (localAccessibilityEvent.getContentDescription() == null)) {
      throw new RuntimeException("Callbacks must add text or a content description in populateEventForVirtualViewId()");
    }
    localAccessibilityEvent.setClassName(localC.o());
    e.c(localAccessibilityEvent, l, paramInt1);
    localAccessibilityEvent.setPackageName(l.getContext().getPackageName());
    return localAccessibilityEvent;
  }
  
  private AccessibilityEvent s(int paramInt)
  {
    AccessibilityEvent localAccessibilityEvent = AccessibilityEvent.obtain(paramInt);
    l.onInitializeAccessibilityEvent(localAccessibilityEvent);
    return localAccessibilityEvent;
  }
  
  private c t(int paramInt)
  {
    c localC = c.L();
    localC.d0(true);
    localC.f0(true);
    localC.Y("android.view.View");
    Object localObject = d;
    localC.U((Rect)localObject);
    localC.V((Rect)localObject);
    localC.m0(l);
    N(paramInt, localC);
    if ((localC.v() == null) && (localC.q() == null)) {
      throw new RuntimeException("Callbacks must add text or a content description in populateNodeForVirtualViewId()");
    }
    localC.l(h);
    if (!h.equals(localObject))
    {
      int i1 = localC.j();
      if ((i1 & 0x40) == 0)
      {
        if ((i1 & 0x80) == 0)
        {
          localC.k0(l.getContext().getPackageName());
          localC.s0(l, paramInt);
          if (n == paramInt)
          {
            localC.S(true);
            localC.a(128);
          }
          else
          {
            localC.S(false);
            localC.a(64);
          }
          boolean bool;
          if (o == paramInt) {
            bool = true;
          } else {
            bool = false;
          }
          if (bool) {
            localC.a(2);
          } else if (localC.E()) {
            localC.a(1);
          }
          localC.g0(bool);
          l.getLocationOnScreen(j);
          localC.m(g);
          if (g.equals(localObject))
          {
            localC.l(g);
            if (c != -1)
            {
              localObject = c.L();
              for (paramInt = c; paramInt != -1; paramInt = c)
              {
                ((c)localObject).n0(l, -1);
                ((c)localObject).U(d);
                N(paramInt, (c)localObject);
                ((c)localObject).l(h);
                Rect localRect1 = g;
                Rect localRect2 = h;
                localRect1.offset(left, top);
              }
              ((c)localObject).P();
            }
            g.offset(j[0] - l.getScrollX(), j[1] - l.getScrollY());
          }
          if (l.getLocalVisibleRect(i))
          {
            i.offset(j[0] - l.getScrollX(), j[1] - l.getScrollY());
            if (g.intersect(i))
            {
              localC.V(g);
              if (E(g)) {
                localC.w0(true);
              }
            }
          }
          return localC;
        }
        throw new RuntimeException("Callbacks must not add ACTION_CLEAR_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
      }
      throw new RuntimeException("Callbacks must not add ACTION_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");
    }
    throw new RuntimeException("Callbacks must set parent bounds in populateNodeForVirtualViewId()");
  }
  
  private c u()
  {
    c localC = c.M(l);
    f0.c0(l, localC);
    ArrayList localArrayList = new ArrayList();
    C(localArrayList);
    if ((localC.n() > 0) && (localArrayList.size() > 0)) {
      throw new RuntimeException("Views cannot have both real and virtual children");
    }
    int i1 = 0;
    int i2 = localArrayList.size();
    while (i1 < i2)
    {
      localC.c(l, ((Integer)localArrayList.get(i1)).intValue());
      i1 += 1;
    }
    return localC;
  }
  
  private h<c> y()
  {
    ArrayList localArrayList = new ArrayList();
    C(localArrayList);
    h localH = new h();
    int i1 = 0;
    while (i1 < localArrayList.size())
    {
      localH.k(i1, t(i1));
      i1 += 1;
    }
    return localH;
  }
  
  private void z(int paramInt, Rect paramRect)
  {
    H(paramInt).l(paramRect);
  }
  
  public final int A()
  {
    return o;
  }
  
  protected abstract int B(float paramFloat1, float paramFloat2);
  
  protected abstract void C(List<Integer> paramList);
  
  c H(int paramInt)
  {
    if (paramInt == -1) {
      return u();
    }
    return t(paramInt);
  }
  
  public final void I(boolean paramBoolean, int paramInt, Rect paramRect)
  {
    int i1 = o;
    if (i1 != Integer.MIN_VALUE) {
      o(i1);
    }
    if (paramBoolean) {
      G(paramInt, paramRect);
    }
  }
  
  protected abstract boolean J(int paramInt1, int paramInt2, Bundle paramBundle);
  
  protected void K(AccessibilityEvent paramAccessibilityEvent) {}
  
  protected void L(int paramInt, AccessibilityEvent paramAccessibilityEvent) {}
  
  protected void M(c paramC) {}
  
  protected abstract void N(int paramInt, c paramC);
  
  protected void O(int paramInt, boolean paramBoolean) {}
  
  boolean P(int paramInt1, int paramInt2, Bundle paramBundle)
  {
    if (paramInt1 != -1) {
      return Q(paramInt1, paramInt2, paramBundle);
    }
    return R(paramInt2, paramBundle);
  }
  
  public final boolean T(int paramInt)
  {
    if ((!l.isFocused()) && (!l.requestFocus())) {
      return false;
    }
    int i1 = o;
    if (i1 == paramInt) {
      return false;
    }
    if (i1 != Integer.MIN_VALUE) {
      o(i1);
    }
    o = paramInt;
    O(paramInt, true);
    U(paramInt, 8);
    return true;
  }
  
  public final boolean U(int paramInt1, int paramInt2)
  {
    if (paramInt1 != Integer.MIN_VALUE)
    {
      if (!k.isEnabled()) {
        return false;
      }
      ViewParent localViewParent = l.getParent();
      if (localViewParent == null) {
        return false;
      }
      AccessibilityEvent localAccessibilityEvent = q(paramInt1, paramInt2);
      return i0.h(localViewParent, l, localAccessibilityEvent);
    }
    return false;
  }
  
  public d b(View paramView)
  {
    if (m == null) {
      m = new c();
    }
    return m;
  }
  
  public void f(View paramView, AccessibilityEvent paramAccessibilityEvent)
  {
    super.f(paramView, paramAccessibilityEvent);
    K(paramAccessibilityEvent);
  }
  
  public void g(View paramView, c paramC)
  {
    super.g(paramView, paramC);
    M(paramC);
  }
  
  public final boolean o(int paramInt)
  {
    if (o != paramInt) {
      return false;
    }
    o = Integer.MIN_VALUE;
    O(paramInt, false);
    U(paramInt, 8);
    return true;
  }
  
  public final boolean v(MotionEvent paramMotionEvent)
  {
    boolean bool3 = k.isEnabled();
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (bool3)
    {
      if (!k.isTouchExplorationEnabled()) {
        return false;
      }
      int i1 = paramMotionEvent.getAction();
      if ((i1 != 7) && (i1 != 9))
      {
        if (i1 != 10) {
          return false;
        }
        if (p != Integer.MIN_VALUE)
        {
          V(Integer.MIN_VALUE);
          return true;
        }
        return false;
      }
      i1 = B(paramMotionEvent.getX(), paramMotionEvent.getY());
      V(i1);
      bool1 = bool2;
      if (i1 != Integer.MIN_VALUE) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public final boolean w(KeyEvent paramKeyEvent)
  {
    int i2 = paramKeyEvent.getAction();
    boolean bool2 = false;
    int i1 = 0;
    boolean bool1 = bool2;
    if (i2 != 1)
    {
      i2 = paramKeyEvent.getKeyCode();
      if (i2 != 61)
      {
        if (i2 != 66)
        {
          switch (i2)
          {
          default: 
            return false;
          case 19: 
          case 20: 
          case 21: 
          case 22: 
            bool1 = bool2;
            if (!paramKeyEvent.hasNoModifiers()) {
              break;
            }
            i2 = F(i2);
            int i3 = paramKeyEvent.getRepeatCount();
            for (bool1 = false; (i1 < i3 + 1) && (G(i2, null)); bool1 = true) {
              i1 += 1;
            }
            return bool1;
          }
        }
        else
        {
          bool1 = bool2;
          if (paramKeyEvent.hasNoModifiers())
          {
            bool1 = bool2;
            if (paramKeyEvent.getRepeatCount() == 0)
            {
              p();
              return true;
            }
          }
        }
      }
      else
      {
        if (paramKeyEvent.hasNoModifiers()) {
          return G(2, null);
        }
        bool1 = bool2;
        if (paramKeyEvent.hasModifiers(1)) {
          bool1 = G(1, null);
        }
      }
    }
    return bool1;
  }
  
  public final int x()
  {
    return n;
  }
  
  static final class a
    implements b.a<c>
  {
    a() {}
    
    public void b(c paramC, Rect paramRect)
    {
      paramC.l(paramRect);
    }
  }
  
  static final class b
    implements b.b<h<c>, c>
  {
    b() {}
    
    public c c(h<c> paramH, int paramInt)
    {
      return (c)paramH.n(paramInt);
    }
    
    public int d(h<c> paramH)
    {
      return paramH.m();
    }
  }
  
  private class c
    extends d
  {
    c() {}
    
    public c b(int paramInt)
    {
      return c.N(H(paramInt));
    }
    
    public c d(int paramInt)
    {
      if (paramInt == 2) {
        paramInt = n;
      } else {
        paramInt = o;
      }
      if (paramInt == Integer.MIN_VALUE) {
        return null;
      }
      return b(paramInt);
    }
    
    public boolean f(int paramInt1, int paramInt2, Bundle paramBundle)
    {
      return P(paramInt1, paramInt2, paramBundle);
    }
  }
}
