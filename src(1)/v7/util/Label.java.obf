package c.e;

public class h<E>
  implements Cloneable
{
  private static final Object b = new Object();
  private boolean c = false;
  private int[] d;
  private Object[] e;
  private int f;
  
  public h()
  {
    this(10);
  }
  
  public h(int paramInt)
  {
    if (paramInt == 0)
    {
      d = c.a;
      e = c.c;
      return;
    }
    paramInt = c.e(paramInt);
    d = new int[paramInt];
    e = new Object[paramInt];
  }
  
  private void e()
  {
    int m = f;
    int[] arrayOfInt = d;
    Object[] arrayOfObject = e;
    int i = 0;
    int k;
    for (int j = i; i < m; j = k)
    {
      Object localObject = arrayOfObject[i];
      k = j;
      if (localObject != b)
      {
        if (i != j)
        {
          arrayOfInt[j] = arrayOfInt[i];
          arrayOfObject[j] = localObject;
          arrayOfObject[i] = null;
        }
        k = j + 1;
      }
      i += 1;
    }
    c = false;
    f = j;
  }
  
  public void b(int paramInt, E paramE)
  {
    int i = f;
    if ((i != 0) && (paramInt <= d[(i - 1)]))
    {
      k(paramInt, paramE);
      return;
    }
    if ((c) && (i >= d.length)) {
      e();
    }
    i = f;
    if (i >= d.length)
    {
      int j = c.e(i + 1);
      int[] arrayOfInt = new int[j];
      Object[] arrayOfObject = new Object[j];
      Object localObject = d;
      System.arraycopy(localObject, 0, arrayOfInt, 0, localObject.length);
      localObject = e;
      System.arraycopy(localObject, 0, arrayOfObject, 0, localObject.length);
      d = arrayOfInt;
      e = arrayOfObject;
    }
    d[i] = paramInt;
    e[i] = paramE;
    f = (i + 1);
  }
  
  public void c()
  {
    int j = f;
    Object[] arrayOfObject = e;
    int i = 0;
    while (i < j)
    {
      arrayOfObject[i] = null;
      i += 1;
    }
    f = 0;
    c = false;
  }
  
  public h<E> d()
  {
    try
    {
      h localH = (h)super.clone();
      d = ((int[])d.clone());
      e = ((Object[])e.clone());
      return localH;
    }
    catch (CloneNotSupportedException localCloneNotSupportedException)
    {
      throw new AssertionError(localCloneNotSupportedException);
    }
  }
  
  public E f(int paramInt)
  {
    return g(paramInt, null);
  }
  
  public E g(int paramInt, E paramE)
  {
    paramInt = c.a(d, f, paramInt);
    if (paramInt >= 0)
    {
      Object[] arrayOfObject = e;
      if (arrayOfObject[paramInt] == b) {
        return paramE;
      }
      return arrayOfObject[paramInt];
    }
    return paramE;
  }
  
  public int i(E paramE)
  {
    if (c) {
      e();
    }
    int i = 0;
    while (i < f)
    {
      if (e[i] == paramE) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public int j(int paramInt)
  {
    if (c) {
      e();
    }
    return d[paramInt];
  }
  
  public void k(int paramInt, E paramE)
  {
    int i = c.a(d, f, paramInt);
    if (i >= 0)
    {
      e[i] = paramE;
      return;
    }
    int j = i;
    int k = f;
    Object localObject1;
    if (j < k)
    {
      localObject1 = e;
      if (localObject1[j] == b)
      {
        d[j] = paramInt;
        localObject1[j] = paramE;
        return;
      }
    }
    i = j;
    if (c)
    {
      i = j;
      if (k >= d.length)
      {
        e();
        i = c.a(d, f, paramInt);
      }
    }
    j = f;
    if (j >= d.length)
    {
      j = c.e(j + 1);
      localObject1 = new int[j];
      Object[] arrayOfObject = new Object[j];
      Object localObject2 = d;
      System.arraycopy(localObject2, 0, localObject1, 0, localObject2.length);
      localObject2 = e;
      System.arraycopy(localObject2, 0, arrayOfObject, 0, localObject2.length);
      d = ((int[])localObject1);
      e = arrayOfObject;
    }
    j = f;
    if (j - i != 0)
    {
      localObject1 = d;
      k = i + 1;
      System.arraycopy(localObject1, i, localObject1, k, j - i);
      localObject1 = e;
      System.arraycopy(localObject1, i, localObject1, k, f - i);
    }
    d[i] = paramInt;
    e[i] = paramE;
    f += 1;
  }
  
  public void l(int paramInt)
  {
    paramInt = c.a(d, f, paramInt);
    if (paramInt >= 0)
    {
      Object[] arrayOfObject = e;
      Object localObject1 = arrayOfObject[paramInt];
      Object localObject2 = b;
      if (localObject1 != localObject2)
      {
        arrayOfObject[paramInt] = localObject2;
        c = true;
      }
    }
  }
  
  public int m()
  {
    if (c) {
      e();
    }
    return f;
  }
  
  public E n(int paramInt)
  {
    if (c) {
      e();
    }
    return e[paramInt];
  }
  
  public String toString()
  {
    if (m() <= 0) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder(f * 28);
    localStringBuilder.append('{');
    int i = 0;
    while (i < f)
    {
      if (i > 0) {
        localStringBuilder.append(", ");
      }
      localStringBuilder.append(j(i));
      localStringBuilder.append('=');
      Object localObject = n(i);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Map)");
      }
      i += 1;
    }
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
}
