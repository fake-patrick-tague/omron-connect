package c.e;

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public final class b<E>
  implements Collection<E>, Set<E>
{
  private static final int[] b = new int[0];
  private static final Object[] c = new Object[0];
  private static Object[] d;
  private static int e;
  private static Object[] f;
  private static int g;
  private int[] h;
  Object[] i;
  int j;
  private f<E, E> k;
  
  public b()
  {
    this(0);
  }
  
  public b(int paramInt)
  {
    if (paramInt == 0)
    {
      h = b;
      i = c;
    }
    else
    {
      a(paramInt);
    }
    j = 0;
  }
  
  private void a(int paramInt)
  {
    if (paramInt == 8) {
      try
      {
        Object[] arrayOfObject1 = f;
        if (arrayOfObject1 != null)
        {
          i = arrayOfObject1;
          f = (Object[])arrayOfObject1[0];
          h = ((int[])arrayOfObject1[1]);
          arrayOfObject1[1] = null;
          arrayOfObject1[0] = null;
          g -= 1;
          return;
        }
      }
      finally {}
    }
    if (paramInt == 4) {
      try
      {
        Object[] arrayOfObject2 = d;
        if (arrayOfObject2 != null)
        {
          i = arrayOfObject2;
          d = (Object[])arrayOfObject2[0];
          h = ((int[])arrayOfObject2[1]);
          arrayOfObject2[1] = null;
          arrayOfObject2[0] = null;
          e -= 1;
          return;
        }
      }
      finally {}
    }
    h = new int[paramInt];
    i = new Object[paramInt];
  }
  
  private static void c(int[] paramArrayOfInt, Object[] paramArrayOfObject, int paramInt)
  {
    if (paramArrayOfInt.length == 8) {
      try
      {
        if (g < 10)
        {
          paramArrayOfObject[0] = f;
          paramArrayOfObject[1] = paramArrayOfInt;
          paramInt -= 1;
          break label114;
          f = paramArrayOfObject;
          g += 1;
        }
        return;
      }
      finally {}
    }
    if (paramArrayOfInt.length == 4) {}
    for (;;)
    {
      try
      {
        if (e < 10)
        {
          paramArrayOfObject[0] = d;
          paramArrayOfObject[1] = paramArrayOfInt;
          paramInt -= 1;
          break label130;
          d = paramArrayOfObject;
          e += 1;
        }
        return;
      }
      finally {}
      return;
      label114:
      while (paramInt >= 2)
      {
        paramArrayOfObject[paramInt] = null;
        paramInt -= 1;
      }
      break;
      label130:
      while (paramInt >= 2)
      {
        paramArrayOfObject[paramInt] = null;
        paramInt -= 1;
      }
    }
  }
  
  private f<E, E> d()
  {
    if (k == null) {
      k = new a();
    }
    return k;
  }
  
  private int e(Object paramObject, int paramInt)
  {
    int n = j;
    if (n == 0) {
      return -1;
    }
    int i1 = c.a(h, n, paramInt);
    if (i1 < 0) {
      return i1;
    }
    if (paramObject.equals(i[i1])) {
      return i1;
    }
    int m = i1 + 1;
    while ((m < n) && (h[m] == paramInt))
    {
      if (paramObject.equals(i[m])) {
        return m;
      }
      m += 1;
    }
    n = i1 - 1;
    while ((n >= 0) && (h[n] == paramInt))
    {
      if (paramObject.equals(i[n])) {
        return n;
      }
      n -= 1;
    }
    return m;
  }
  
  private int f()
  {
    int n = j;
    if (n == 0) {
      return -1;
    }
    int i1 = c.a(h, n, 0);
    if (i1 < 0) {
      return i1;
    }
    if (i[i1] == null) {
      return i1;
    }
    int m = i1 + 1;
    while ((m < n) && (h[m] == 0))
    {
      if (i[m] == null) {
        return m;
      }
      m += 1;
    }
    n = i1 - 1;
    while ((n >= 0) && (h[n] == 0))
    {
      if (i[n] == null) {
        return n;
      }
      n -= 1;
    }
    return m;
  }
  
  public boolean add(E paramE)
  {
    int n;
    if (paramE == null)
    {
      m = f();
      n = 0;
    }
    else
    {
      n = paramE.hashCode();
      m = e(paramE, n);
    }
    if (m >= 0) {
      return false;
    }
    int i1 = m;
    int i2 = j;
    Object localObject = h;
    if (i2 >= localObject.length)
    {
      m = 4;
      if (i2 >= 8) {
        m = (i2 >> 1) + i2;
      } else if (i2 >= 4) {
        m = 8;
      }
      Object[] arrayOfObject = i;
      a(m);
      int[] arrayOfInt = h;
      if (arrayOfInt.length > 0)
      {
        System.arraycopy(localObject, 0, arrayOfInt, 0, localObject.length);
        System.arraycopy(arrayOfObject, 0, i, 0, arrayOfObject.length);
      }
      c((int[])localObject, arrayOfObject, j);
    }
    int m = j;
    if (i1 < m)
    {
      localObject = h;
      i2 = i1 + 1;
      System.arraycopy(localObject, i1, localObject, i2, m - i1);
      localObject = i;
      System.arraycopy(localObject, i1, localObject, i2, j - i1);
    }
    h[i1] = n;
    i[i1] = paramE;
    j += 1;
    return true;
  }
  
  public boolean addAll(Collection<? extends E> paramCollection)
  {
    b(j + paramCollection.size());
    paramCollection = paramCollection.iterator();
    boolean bool = false;
    while (paramCollection.hasNext()) {
      bool |= add(paramCollection.next());
    }
    return bool;
  }
  
  public void b(int paramInt)
  {
    int[] arrayOfInt = h;
    if (arrayOfInt.length < paramInt)
    {
      Object[] arrayOfObject = i;
      a(paramInt);
      paramInt = j;
      if (paramInt > 0)
      {
        System.arraycopy(arrayOfInt, 0, h, 0, paramInt);
        System.arraycopy(arrayOfObject, 0, i, 0, j);
      }
      c(arrayOfInt, arrayOfObject, j);
    }
  }
  
  public void clear()
  {
    int m = j;
    if (m != 0)
    {
      c(h, i, m);
      h = b;
      i = c;
      j = 0;
    }
  }
  
  public boolean contains(Object paramObject)
  {
    return indexOf(paramObject) >= 0;
  }
  
  public boolean containsAll(Collection<?> paramCollection)
  {
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext()) {
      if (!contains(paramCollection.next())) {
        return false;
      }
    }
    return true;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    int m;
    if ((paramObject instanceof Set))
    {
      paramObject = (Set)paramObject;
      if (size() != paramObject.size()) {
        return false;
      }
      m = 0;
    }
    try
    {
      while (m < j)
      {
        boolean bool = paramObject.contains(h(m));
        if (!bool) {
          return false;
        }
        m += 1;
      }
      return true;
    }
    catch (NullPointerException|ClassCastException paramObject) {}
    return false;
    return false;
  }
  
  public E g(int paramInt)
  {
    Object[] arrayOfObject = i;
    Object localObject = arrayOfObject[paramInt];
    int n = j;
    if (n <= 1)
    {
      c(h, arrayOfObject, n);
      h = b;
      i = c;
      j = 0;
      return localObject;
    }
    int[] arrayOfInt = h;
    int i1 = arrayOfInt.length;
    int m = 8;
    if ((i1 > 8) && (n < arrayOfInt.length / 3))
    {
      if (n > 8) {
        m = n + (n >> 1);
      }
      a(m);
      j -= 1;
      if (paramInt > 0)
      {
        System.arraycopy(arrayOfInt, 0, h, 0, paramInt);
        System.arraycopy(arrayOfObject, 0, i, 0, paramInt);
      }
      m = j;
      if (paramInt < m)
      {
        n = paramInt + 1;
        System.arraycopy(arrayOfInt, n, h, paramInt, m - paramInt);
        System.arraycopy(arrayOfObject, n, i, paramInt, j - paramInt);
        return localObject;
      }
    }
    else
    {
      m = n - 1;
      j = m;
      if (paramInt < m)
      {
        n = paramInt + 1;
        System.arraycopy(arrayOfInt, n, arrayOfInt, paramInt, m - paramInt);
        arrayOfObject = i;
        System.arraycopy(arrayOfObject, n, arrayOfObject, paramInt, j - paramInt);
      }
      i[j] = null;
    }
    return localObject;
  }
  
  public E h(int paramInt)
  {
    return i[paramInt];
  }
  
  public int hashCode()
  {
    int[] arrayOfInt = h;
    int i1 = j;
    int m = 0;
    int n = 0;
    while (m < i1)
    {
      n += arrayOfInt[m];
      m += 1;
    }
    return n;
  }
  
  public int indexOf(Object paramObject)
  {
    if (paramObject == null) {
      return f();
    }
    return e(paramObject, paramObject.hashCode());
  }
  
  public boolean isEmpty()
  {
    return j <= 0;
  }
  
  public Iterator<E> iterator()
  {
    return d().m().iterator();
  }
  
  public boolean remove(Object paramObject)
  {
    int m = indexOf(paramObject);
    if (m >= 0)
    {
      g(m);
      return true;
    }
    return false;
  }
  
  public boolean removeAll(Collection<?> paramCollection)
  {
    paramCollection = paramCollection.iterator();
    boolean bool = false;
    while (paramCollection.hasNext()) {
      bool |= remove(paramCollection.next());
    }
    return bool;
  }
  
  public boolean retainAll(Collection<?> paramCollection)
  {
    int m = j - 1;
    boolean bool = false;
    while (m >= 0)
    {
      if (!paramCollection.contains(i[m]))
      {
        g(m);
        bool = true;
      }
      m -= 1;
    }
    return bool;
  }
  
  public int size()
  {
    return j;
  }
  
  public Object[] toArray()
  {
    int m = j;
    Object[] arrayOfObject = new Object[m];
    System.arraycopy(i, 0, arrayOfObject, 0, m);
    return arrayOfObject;
  }
  
  public <T> T[] toArray(T[] paramArrayOfT)
  {
    Object localObject = paramArrayOfT;
    if (paramArrayOfT.length < j) {
      localObject = (Object[])Array.newInstance(paramArrayOfT.getClass().getComponentType(), j);
    }
    System.arraycopy(i, 0, localObject, 0, j);
    int m = localObject.length;
    int n = j;
    if (m > n) {
      localObject[n] = null;
    }
    return localObject;
  }
  
  public String toString()
  {
    if (isEmpty()) {
      return "{}";
    }
    StringBuilder localStringBuilder = new StringBuilder(j * 14);
    localStringBuilder.append('{');
    int m = 0;
    while (m < j)
    {
      if (m > 0) {
        localStringBuilder.append(", ");
      }
      Object localObject = h(m);
      if (localObject != this) {
        localStringBuilder.append(localObject);
      } else {
        localStringBuilder.append("(this Set)");
      }
      m += 1;
    }
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
  
  class a
    extends f<E, E>
  {
    a() {}
    
    protected void a()
    {
      clear();
    }
    
    protected Object b(int paramInt1, int paramInt2)
    {
      return i[paramInt1];
    }
    
    protected Map<E, E> c()
    {
      throw new UnsupportedOperationException("not a map");
    }
    
    protected int d()
    {
      return j;
    }
    
    protected int e(Object paramObject)
    {
      return indexOf(paramObject);
    }
    
    protected int f(Object paramObject)
    {
      return indexOf(paramObject);
    }
    
    protected void g(E paramE1, E paramE2)
    {
      add(paramE1);
    }
    
    protected void h(int paramInt)
    {
      g(paramInt);
    }
    
    protected E i(int paramInt, E paramE)
    {
      throw new UnsupportedOperationException("not a map");
    }
  }
}
