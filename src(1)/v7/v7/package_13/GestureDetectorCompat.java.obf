package c.h.q;

import android.content.Context;
import android.os.Build.VERSION;
import android.os.Handler;
import android.os.Message;
import android.view.GestureDetector;
import android.view.GestureDetector.OnDoubleTapListener;
import android.view.GestureDetector.OnGestureListener;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.ViewConfiguration;

public final class j
{
  private final a a;
  
  public j(Context paramContext, GestureDetector.OnGestureListener paramOnGestureListener)
  {
    this(paramContext, paramOnGestureListener, null);
  }
  
  public j(Context paramContext, GestureDetector.OnGestureListener paramOnGestureListener, Handler paramHandler)
  {
    if (Build.VERSION.SDK_INT > 17)
    {
      a = new c(paramContext, paramOnGestureListener, paramHandler);
      return;
    }
    a = new b(paramContext, paramOnGestureListener, paramHandler);
  }
  
  public boolean a(MotionEvent paramMotionEvent)
  {
    return a.a(paramMotionEvent);
  }
  
  static abstract interface a
  {
    public abstract boolean a(MotionEvent paramMotionEvent);
  }
  
  static class b
    implements j.a
  {
    private static final int a = ;
    private static final int b = ViewConfiguration.getDoubleTapTimeout();
    private int c;
    private int d;
    private int e;
    private int f;
    private final Handler g;
    final GestureDetector.OnGestureListener h;
    GestureDetector.OnDoubleTapListener i;
    boolean j;
    boolean k;
    private boolean l;
    private boolean m;
    private boolean n;
    MotionEvent o;
    private MotionEvent p;
    private boolean q;
    private float r;
    private float s;
    private float t;
    private float u;
    private boolean v;
    private VelocityTracker w;
    
    b(Context paramContext, GestureDetector.OnGestureListener paramOnGestureListener, Handler paramHandler)
    {
      if (paramHandler != null) {
        g = new a(paramHandler);
      } else {
        g = new a();
      }
      h = paramOnGestureListener;
      if ((paramOnGestureListener instanceof GestureDetector.OnDoubleTapListener)) {
        g((GestureDetector.OnDoubleTapListener)paramOnGestureListener);
      }
      e(paramContext);
    }
    
    private void b()
    {
      g.removeMessages(1);
      g.removeMessages(2);
      g.removeMessages(3);
      w.recycle();
      w = null;
      q = false;
      j = false;
      m = false;
      n = false;
      k = false;
      if (l) {
        l = false;
      }
    }
    
    private void c()
    {
      g.removeMessages(1);
      g.removeMessages(2);
      g.removeMessages(3);
      q = false;
      m = false;
      n = false;
      k = false;
      if (l) {
        l = false;
      }
    }
    
    private void e(Context paramContext)
    {
      if (paramContext != null)
      {
        if (h != null)
        {
          v = true;
          paramContext = ViewConfiguration.get(paramContext);
          int i1 = paramContext.getScaledTouchSlop();
          int i2 = paramContext.getScaledDoubleTapSlop();
          e = paramContext.getScaledMinimumFlingVelocity();
          f = paramContext.getScaledMaximumFlingVelocity();
          c = (i1 * i1);
          d = (i2 * i2);
          return;
        }
        throw new IllegalArgumentException("OnGestureListener must not be null");
      }
      throw new IllegalArgumentException("Context must not be null");
    }
    
    private boolean f(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, MotionEvent paramMotionEvent3)
    {
      boolean bool2 = n;
      boolean bool1 = false;
      if (!bool2) {
        return false;
      }
      if (paramMotionEvent3.getEventTime() - paramMotionEvent2.getEventTime() > b) {
        return false;
      }
      int i1 = (int)paramMotionEvent1.getX() - (int)paramMotionEvent3.getX();
      int i2 = (int)paramMotionEvent1.getY() - (int)paramMotionEvent3.getY();
      if (i1 * i1 + i2 * i2 < d) {
        bool1 = true;
      }
      return bool1;
    }
    
    public boolean a(MotionEvent paramMotionEvent)
    {
      int i1 = paramMotionEvent.getAction();
      if (w == null) {
        w = VelocityTracker.obtain();
      }
      w.addMovement(paramMotionEvent);
      int i5 = i1 & 0xFF;
      boolean bool3 = false;
      if (i5 == 6) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      int i2;
      if (i1 != 0) {
        i2 = paramMotionEvent.getActionIndex();
      } else {
        i2 = -1;
      }
      int i4 = paramMotionEvent.getPointerCount();
      int i3 = 0;
      float f2 = 0.0F;
      float f1 = f2;
      while (i3 < i4)
      {
        if (i2 != i3)
        {
          f2 += paramMotionEvent.getX(i3);
          f1 += paramMotionEvent.getY(i3);
        }
        i3 += 1;
      }
      if (i1 != 0) {
        i1 = i4 - 1;
      } else {
        i1 = i4;
      }
      float f3 = i1;
      f2 /= f3;
      f1 /= f3;
      boolean bool2;
      MotionEvent localMotionEvent;
      Object localObject;
      if (i5 != 0)
      {
        if (i5 != 1)
        {
          if (i5 != 2)
          {
            if (i5 != 3)
            {
              if (i5 != 5)
              {
                if (i5 != 6) {
                  return false;
                }
                r = f2;
                t = f2;
                s = f1;
                u = f1;
                w.computeCurrentVelocity(1000, f);
                i2 = paramMotionEvent.getActionIndex();
                i1 = paramMotionEvent.getPointerId(i2);
                f1 = w.getXVelocity(i1);
                f2 = w.getYVelocity(i1);
                i1 = 0;
                for (;;)
                {
                  bool2 = bool3;
                  if (i1 >= i4) {
                    break;
                  }
                  if (i1 != i2)
                  {
                    i3 = paramMotionEvent.getPointerId(i1);
                    if (w.getXVelocity(i3) * f1 + w.getYVelocity(i3) * f2 < 0.0F)
                    {
                      w.clear();
                      return false;
                    }
                  }
                  i1 += 1;
                }
              }
              r = f2;
              t = f2;
              s = f1;
              u = f1;
              c();
              return false;
            }
            b();
            return false;
          }
          if (l) {
            return false;
          }
          f3 = r - f2;
          float f4 = s - f1;
          if (q) {
            return false | i.onDoubleTapEvent(paramMotionEvent);
          }
          if (m)
          {
            i1 = (int)(f2 - t);
            i2 = (int)(f1 - u);
            i1 = i1 * i1 + i2 * i2;
            if (i1 > c)
            {
              bool2 = h.onScroll(o, paramMotionEvent, f3, f4);
              r = f2;
              s = f1;
              m = false;
              g.removeMessages(3);
              g.removeMessages(1);
              g.removeMessages(2);
            }
            else
            {
              bool2 = false;
            }
            bool3 = bool2;
            if (i1 > c)
            {
              n = false;
              bool3 = bool2;
            }
          }
          else
          {
            if (Math.abs(f3) < 1.0F)
            {
              bool2 = bool3;
              if (Math.abs(f4) < 1.0F) {
                break label1157;
              }
            }
            bool2 = h.onScroll(o, paramMotionEvent, f3, f4);
            r = f2;
            s = f1;
            return bool2;
          }
        }
        else
        {
          j = false;
          localMotionEvent = MotionEvent.obtain(paramMotionEvent);
          if (q)
          {
            bool2 = i.onDoubleTapEvent(paramMotionEvent) | false;
          }
          else
          {
            if (l)
            {
              g.removeMessages(3);
              l = false;
            }
            else
            {
              if (m)
              {
                bool2 = h.onSingleTapUp(paramMotionEvent);
                if (k)
                {
                  localObject = i;
                  if (localObject != null) {
                    ((GestureDetector.OnDoubleTapListener)localObject).onSingleTapConfirmed(paramMotionEvent);
                  }
                }
                break label820;
              }
              localObject = w;
              i1 = paramMotionEvent.getPointerId(0);
              ((VelocityTracker)localObject).computeCurrentVelocity(1000, f);
              f1 = ((VelocityTracker)localObject).getYVelocity(i1);
              f2 = ((VelocityTracker)localObject).getXVelocity(i1);
              if ((Math.abs(f1) > e) || (Math.abs(f2) > e)) {
                break label802;
              }
            }
            bool2 = false;
            break label820;
            label802:
            bool2 = h.onFling(o, paramMotionEvent, f2, f1);
          }
          label820:
          paramMotionEvent = p;
          if (paramMotionEvent != null) {
            paramMotionEvent.recycle();
          }
          p = localMotionEvent;
          paramMotionEvent = w;
          if (paramMotionEvent != null)
          {
            paramMotionEvent.recycle();
            w = null;
          }
          q = false;
          k = false;
          g.removeMessages(1);
          g.removeMessages(2);
          bool3 = bool2;
        }
        return bool3;
      }
      else
      {
        boolean bool1;
        if (i != null)
        {
          bool2 = g.hasMessages(3);
          if (bool2) {
            g.removeMessages(3);
          }
          localMotionEvent = o;
          if (localMotionEvent != null)
          {
            localObject = p;
            if ((localObject != null) && (bool2) && (f(localMotionEvent, (MotionEvent)localObject, paramMotionEvent)))
            {
              q = true;
              bool1 = i.onDoubleTap(o) | false | i.onDoubleTapEvent(paramMotionEvent);
              break label1011;
            }
          }
          g.sendEmptyMessageDelayed(3, b);
        }
        else
        {
          bool1 = false;
        }
        label1011:
        r = f2;
        t = f2;
        s = f1;
        u = f1;
        localMotionEvent = o;
        if (localMotionEvent != null) {
          localMotionEvent.recycle();
        }
        o = MotionEvent.obtain(paramMotionEvent);
        m = true;
        n = true;
        j = true;
        l = false;
        k = false;
        if (v)
        {
          g.removeMessages(2);
          g.sendEmptyMessageAtTime(2, o.getDownTime() + a + ViewConfiguration.getLongPressTimeout());
        }
        g.sendEmptyMessageAtTime(1, o.getDownTime() + a);
        bool2 = bool1 | h.onDown(paramMotionEvent);
      }
      label1157:
      return bool2;
    }
    
    void d()
    {
      g.removeMessages(3);
      k = false;
      l = true;
      h.onLongPress(o);
    }
    
    public void g(GestureDetector.OnDoubleTapListener paramOnDoubleTapListener)
    {
      i = paramOnDoubleTapListener;
    }
    
    private class a
      extends Handler
    {
      a() {}
      
      a(Handler paramHandler)
      {
        super();
      }
      
      public void handleMessage(Message paramMessage)
      {
        int i = what;
        if (i != 1)
        {
          if (i != 2)
          {
            Object localObject;
            if (i == 3)
            {
              paramMessage = j.b.this;
              localObject = i;
              if (localObject != null)
              {
                if (!j)
                {
                  ((GestureDetector.OnDoubleTapListener)localObject).onSingleTapConfirmed(o);
                  return;
                }
                k = true;
              }
            }
            else
            {
              localObject = new StringBuilder();
              ((StringBuilder)localObject).append("Unknown message ");
              ((StringBuilder)localObject).append(paramMessage);
              throw new RuntimeException(((StringBuilder)localObject).toString());
            }
          }
          else
          {
            d();
          }
        }
        else
        {
          paramMessage = j.b.this;
          h.onShowPress(o);
        }
      }
    }
  }
  
  static class c
    implements j.a
  {
    private final GestureDetector a;
    
    c(Context paramContext, GestureDetector.OnGestureListener paramOnGestureListener, Handler paramHandler)
    {
      a = new GestureDetector(paramContext, paramOnGestureListener, paramHandler);
    }
    
    public boolean a(MotionEvent paramMotionEvent)
    {
      return a.onTouchEvent(paramMotionEvent);
    }
  }
}
