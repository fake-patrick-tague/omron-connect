package c.h.q;

import android.animation.ValueAnimator;
import android.content.ClipData;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.TypedArray;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.view.ContentInfo;
import android.view.Display;
import android.view.KeyEvent;
import android.view.OnReceiveContentListener;
import android.view.PointerIcon;
import android.view.View;
import android.view.View.AccessibilityDelegate;
import android.view.View.DragShadowBuilder;
import android.view.View.OnApplyWindowInsetsListener;
import android.view.View.OnAttachStateChangeListener;
import android.view.View.OnUnhandledKeyEventListener;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.WindowInsets;
import android.view.WindowManager;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.AccessibilityNodeProvider;
import c.e.g;
import c.h.q.p0.c.a;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public class f0
{
  private static final AtomicInteger a = new AtomicInteger(1);
  private static Field b;
  private static boolean c;
  private static Field d;
  private static boolean e;
  private static WeakHashMap<View, String> f;
  private static WeakHashMap<View, j0> g = null;
  private static Field h;
  private static boolean i = false;
  private static ThreadLocal<Rect> j;
  private static final int[] k = { c.h.e.b, c.h.e.c, c.h.e.n, c.h.e.y, c.h.e.B, c.h.e.C, c.h.e.D, c.h.e.E, c.h.e.F, c.h.e.G, c.h.e.d, c.h.e.e, c.h.e.f, c.h.e.g, c.h.e.h, c.h.e.i, c.h.e.j, c.h.e.k, c.h.e.l, c.h.e.m, c.h.e.o, c.h.e.p, c.h.e.q, c.h.e.r, c.h.e.s, c.h.e.t, c.h.e.u, c.h.e.v, c.h.e.w, c.h.e.x, c.h.e.z, c.h.e.A };
  private static final b0 l = c.b;
  private static final e m = new e();
  
  public static boolean A(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.b(paramView);
    }
    return false;
  }
  
  public static void A0(View paramView, int paramInt)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 19)
    {
      h.s(paramView, paramInt);
      return;
    }
    if (n >= 16)
    {
      n = paramInt;
      if (paramInt == 4) {
        n = 2;
      }
      h.s(paramView, n);
    }
  }
  
  public static int B(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.c(paramView);
    }
    return 0;
  }
  
  public static void B0(View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      p.l(paramView, paramInt);
    }
  }
  
  public static int C(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 26) {
      return p.b(paramView);
    }
    return 0;
  }
  
  public static void C0(View paramView, z paramZ)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      m.u(paramView, paramZ);
    }
  }
  
  public static int D(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return i.d(paramView);
    }
    return 0;
  }
  
  public static void D0(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (Build.VERSION.SDK_INT >= 17)
    {
      i.k(paramView, paramInt1, paramInt2, paramInt3, paramInt4);
      return;
    }
    paramView.setPadding(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public static int E(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.d(paramView);
    }
    if (!e) {}
    try
    {
      Field localField = View.class.getDeclaredField("mMinHeight");
      d = localField;
      localField.setAccessible(true);
      e = true;
      localField = d;
      if (localField != null) {}
      try
      {
        int n = ((Integer)localField.get(paramView)).intValue();
        return n;
      }
      catch (Exception paramView)
      {
        for (;;) {}
      }
      return 0;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      for (;;) {}
    }
  }
  
  public static void E0(View paramView, d0 paramD0)
  {
    if (Build.VERSION.SDK_INT >= 24)
    {
      if (paramD0 != null) {
        paramD0 = paramD0.a();
      } else {
        paramD0 = null;
      }
      o.d(paramView, (PointerIcon)paramD0);
    }
  }
  
  public static int F(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.e(paramView);
    }
    if (!c) {}
    try
    {
      Field localField = View.class.getDeclaredField("mMinWidth");
      b = localField;
      localField.setAccessible(true);
      c = true;
      localField = b;
      if (localField != null) {}
      try
      {
        int n = ((Integer)localField.get(paramView)).intValue();
        return n;
      }
      catch (Exception paramView)
      {
        for (;;) {}
      }
      return 0;
    }
    catch (NoSuchFieldException localNoSuchFieldException)
    {
      for (;;) {}
    }
  }
  
  public static void F0(View paramView, boolean paramBoolean)
  {
    o0().g(paramView, Boolean.valueOf(paramBoolean));
  }
  
  public static String[] G(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 31) {
      return t.a(paramView);
    }
    return (String[])paramView.getTag(c.h.e.c0);
  }
  
  public static void G0(View paramView, int paramInt1, int paramInt2)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      n.d(paramView, paramInt1, paramInt2);
    }
  }
  
  public static int H(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return i.e(paramView);
    }
    return paramView.getPaddingRight();
  }
  
  public static void H0(View paramView, String paramString)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      m.v(paramView, paramString);
      return;
    }
    if (f == null) {
      f = new WeakHashMap();
    }
    f.put(paramView, paramString);
  }
  
  public static int I(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return i.f(paramView);
    }
    return paramView.getPaddingLeft();
  }
  
  private static void I0(View paramView)
  {
    if (B(paramView) == 0) {
      A0(paramView, 1);
    }
    for (ViewParent localViewParent = paramView.getParent(); (localViewParent instanceof View); localViewParent = localViewParent.getParent()) {
      if (B((View)localViewParent) == 4)
      {
        A0(paramView, 2);
        return;
      }
    }
  }
  
  public static n0 J(View paramView)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 23) {
      return n.a(paramView);
    }
    if (n >= 21) {
      return m.j(paramView);
    }
    return null;
  }
  
  private static f<CharSequence> J0()
  {
    return new c(c.h.e.e0, CharSequence.class, 64, 30);
  }
  
  public static CharSequence K(View paramView)
  {
    return (CharSequence)J0().f(paramView);
  }
  
  public static void K0(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      m.z(paramView);
      return;
    }
    if ((paramView instanceof t)) {
      ((t)paramView).stopNestedScroll();
    }
  }
  
  public static String L(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.k(paramView);
    }
    WeakHashMap localWeakHashMap = f;
    if (localWeakHashMap == null) {
      return null;
    }
    return (String)localWeakHashMap.get(paramView);
  }
  
  private static void L0(View paramView)
  {
    float f1 = paramView.getTranslationY();
    paramView.setTranslationY(1.0F + f1);
    paramView.setTranslationY(f1);
  }
  
  @Deprecated
  public static int M(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.g(paramView);
    }
    return 0;
  }
  
  public static float N(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.m(paramView);
    }
    return 0.0F;
  }
  
  public static boolean O(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 15) {
      return g.a(paramView);
    }
    return false;
  }
  
  public static boolean P(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.h(paramView);
    }
    return true;
  }
  
  public static boolean Q(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.i(paramView);
    }
    return false;
  }
  
  public static boolean R(View paramView)
  {
    paramView = (Boolean)a().f(paramView);
    return (paramView != null) && (paramView.booleanValue());
  }
  
  public static boolean S(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return k.b(paramView);
    }
    return paramView.getWindowToken() != null;
  }
  
  public static boolean T(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return k.c(paramView);
    }
    return (paramView.getWidth() > 0) && (paramView.getHeight() > 0);
  }
  
  public static boolean U(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.p(paramView);
    }
    if ((paramView instanceof t)) {
      return ((t)paramView).isNestedScrollingEnabled();
    }
    return false;
  }
  
  public static boolean V(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return i.g(paramView);
    }
    return false;
  }
  
  public static boolean W(View paramView)
  {
    paramView = (Boolean)o0().f(paramView);
    return (paramView != null) && (paramView.booleanValue());
  }
  
  static void Y(View paramView, int paramInt)
  {
    Object localObject1 = (AccessibilityManager)paramView.getContext().getSystemService("accessibility");
    if (!((AccessibilityManager)localObject1).isEnabled()) {
      return;
    }
    int n;
    if ((q(paramView) != null) && (paramView.isShown()) && (paramView.getWindowVisibility() == 0)) {
      n = 1;
    } else {
      n = 0;
    }
    int i2 = p(paramView);
    int i1 = 32;
    if ((i2 == 0) && (n == 0))
    {
      Object localObject2;
      if (paramInt == 32)
      {
        localObject2 = AccessibilityEvent.obtain();
        paramView.onInitializeAccessibilityEvent((AccessibilityEvent)localObject2);
        ((AccessibilityEvent)localObject2).setEventType(32);
        k.g((AccessibilityEvent)localObject2, paramInt);
        ((AccessibilityEvent)localObject2).setSource(paramView);
        paramView.onPopulateAccessibilityEvent((AccessibilityEvent)localObject2);
        ((AccessibilityEvent)localObject2).getText().add(q(paramView));
        ((AccessibilityManager)localObject1).sendAccessibilityEvent((AccessibilityEvent)localObject2);
        return;
      }
      if (paramView.getParent() == null) {
        return;
      }
      localObject1 = paramView.getParent();
      try
      {
        k.e((ViewParent)localObject1, paramView, paramView, paramInt);
        return;
      }
      catch (AbstractMethodError localAbstractMethodError)
      {
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append(paramView.getParent().getClass().getSimpleName());
        ((StringBuilder)localObject2).append(" does not fully implement ViewParent");
        Log.e("ViewCompat", ((StringBuilder)localObject2).toString(), localAbstractMethodError);
        return;
      }
    }
    AccessibilityEvent localAccessibilityEvent = AccessibilityEvent.obtain();
    if (n == 0) {
      i1 = 2048;
    }
    localAccessibilityEvent.setEventType(i1);
    k.g(localAccessibilityEvent, paramInt);
    if (n != 0)
    {
      localAccessibilityEvent.getText().add(q(paramView));
      I0(paramView);
    }
    paramView.sendAccessibilityEventUnchecked(localAccessibilityEvent);
  }
  
  public static void Z(View paramView, int paramInt)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 23)
    {
      paramView.offsetLeftAndRight(paramInt);
      return;
    }
    if (n >= 21)
    {
      Rect localRect = y();
      n = 0;
      ViewParent localViewParent = paramView.getParent();
      boolean bool;
      if ((localViewParent instanceof View))
      {
        View localView = (View)localViewParent;
        localRect.set(localView.getLeft(), localView.getTop(), localView.getRight(), localView.getBottom());
        bool = localRect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      }
      e(paramView, paramInt);
      if ((bool) && (localRect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()))) {
        ((View)localViewParent).invalidate(localRect);
      }
    }
    else
    {
      e(paramView, paramInt);
    }
  }
  
  private static f<Boolean> a()
  {
    return new d(c.h.e.Y, Boolean.class, 28);
  }
  
  public static void a0(View paramView, int paramInt)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 23)
    {
      paramView.offsetTopAndBottom(paramInt);
      return;
    }
    if (n >= 21)
    {
      Rect localRect = y();
      n = 0;
      ViewParent localViewParent = paramView.getParent();
      boolean bool;
      if ((localViewParent instanceof View))
      {
        View localView = (View)localViewParent;
        localRect.set(localView.getLeft(), localView.getTop(), localView.getRight(), localView.getBottom());
        bool = localRect.intersects(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()) ^ true;
      }
      f(paramView, paramInt);
      if ((bool) && (localRect.intersect(paramView.getLeft(), paramView.getTop(), paramView.getRight(), paramView.getBottom()))) {
        ((View)localViewParent).invalidate(localRect);
      }
    }
    else
    {
      f(paramView, paramInt);
    }
  }
  
  public static int b(View paramView, CharSequence paramCharSequence, c.h.q.p0.f paramF)
  {
    int n = s(paramView, paramCharSequence);
    if (n != -1) {
      c(paramView, new c.a(n, paramCharSequence, paramF));
    }
    return n;
  }
  
  public static n0 b0(View paramView, n0 paramN0)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      WindowInsets localWindowInsets1 = paramN0.u();
      if (localWindowInsets1 != null)
      {
        WindowInsets localWindowInsets2 = l.b(paramView, localWindowInsets1);
        if (!localWindowInsets2.equals(localWindowInsets1)) {
          return n0.w(localWindowInsets2, paramView);
        }
      }
    }
    return paramN0;
  }
  
  private static void c(View paramView, c.a paramA)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      k(paramView);
      k0(paramA.b(), paramView);
      r(paramView).add(paramA);
      Y(paramView, 0);
    }
  }
  
  public static void c0(View paramView, c.h.q.p0.c paramC)
  {
    paramView.onInitializeAccessibilityNodeInfo(paramC.x0());
  }
  
  public static j0 d(View paramView)
  {
    if (g == null) {
      g = new WeakHashMap();
    }
    j0 localJ02 = (j0)g.get(paramView);
    j0 localJ01 = localJ02;
    if (localJ02 == null)
    {
      localJ01 = new j0(paramView);
      g.put(paramView, localJ01);
    }
    return localJ01;
  }
  
  private static f<CharSequence> d0()
  {
    return new b(c.h.e.Z, CharSequence.class, 8, 28);
  }
  
  private static void e(View paramView, int paramInt)
  {
    paramView.offsetLeftAndRight(paramInt);
    if (paramView.getVisibility() == 0)
    {
      L0(paramView);
      paramView = paramView.getParent();
      if ((paramView instanceof View)) {
        L0((View)paramView);
      }
    }
  }
  
  public static boolean e0(View paramView, int paramInt, Bundle paramBundle)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      return h.j(paramView, paramInt, paramBundle);
    }
    return false;
  }
  
  private static void f(View paramView, int paramInt)
  {
    paramView.offsetTopAndBottom(paramInt);
    if (paramView.getVisibility() == 0)
    {
      L0(paramView);
      paramView = paramView.getParent();
      if ((paramView instanceof View)) {
        L0((View)paramView);
      }
    }
  }
  
  public static h f0(View paramView, h paramH)
  {
    if (Log.isLoggable("ViewCompat", 3))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("performReceiveContent: ");
      ((StringBuilder)localObject).append(paramH);
      ((StringBuilder)localObject).append(", view=");
      ((StringBuilder)localObject).append(paramView.getClass().getSimpleName());
      ((StringBuilder)localObject).append("[");
      ((StringBuilder)localObject).append(paramView.getId());
      ((StringBuilder)localObject).append("]");
      Log.d("ViewCompat", ((StringBuilder)localObject).toString());
    }
    if (Build.VERSION.SDK_INT >= 31) {
      return t.b(paramView, paramH);
    }
    Object localObject = (a0)paramView.getTag(c.h.e.b0);
    if (localObject != null)
    {
      paramH = ((a0)localObject).a(paramView, paramH);
      if (paramH == null) {
        return null;
      }
      return z(paramView).a(paramH);
    }
    return z(paramView).a(paramH);
  }
  
  public static n0 g(View paramView, n0 paramN0, Rect paramRect)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.b(paramView, paramN0, paramRect);
    }
    return paramN0;
  }
  
  public static void g0(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      h.k(paramView);
      return;
    }
    paramView.postInvalidate();
  }
  
  public static n0 h(View paramView, n0 paramN0)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      WindowInsets localWindowInsets1 = paramN0.u();
      if (localWindowInsets1 != null)
      {
        WindowInsets localWindowInsets2 = l.a(paramView, localWindowInsets1);
        if (!localWindowInsets2.equals(localWindowInsets1)) {
          return n0.w(localWindowInsets2, paramView);
        }
      }
    }
    return paramN0;
  }
  
  public static void h0(View paramView, Runnable paramRunnable)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      h.m(paramView, paramRunnable);
      return;
    }
    paramView.postDelayed(paramRunnable, ValueAnimator.getFrameDelay());
  }
  
  static boolean i(View paramView, KeyEvent paramKeyEvent)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    return w.a(paramView).b(paramView, paramKeyEvent);
  }
  
  public static void i0(View paramView, Runnable paramRunnable, long paramLong)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      h.n(paramView, paramRunnable, paramLong);
      return;
    }
    paramView.postDelayed(paramRunnable, ValueAnimator.getFrameDelay() + paramLong);
  }
  
  static boolean j(View paramView, KeyEvent paramKeyEvent)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return false;
    }
    return w.a(paramView).f(paramKeyEvent);
  }
  
  public static void j0(View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 21)
    {
      k0(paramInt, paramView);
      Y(paramView, 0);
    }
  }
  
  static void k(View paramView)
  {
    f localF2 = m(paramView);
    f localF1 = localF2;
    if (localF2 == null) {
      localF1 = new f();
    }
    p0(paramView, localF1);
  }
  
  private static void k0(int paramInt, View paramView)
  {
    paramView = r(paramView);
    int n = 0;
    while (n < paramView.size())
    {
      if (((c.a)paramView.get(n)).b() == paramInt)
      {
        paramView.remove(n);
        return;
      }
      n += 1;
    }
  }
  
  public static int l()
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return i.a();
    }
    AtomicInteger localAtomicInteger;
    int i2;
    int n;
    do
    {
      localAtomicInteger = a;
      i2 = localAtomicInteger.get();
      int i1 = i2 + 1;
      n = i1;
      if (i1 > 16777215) {
        n = 1;
      }
    } while (!localAtomicInteger.compareAndSet(i2, n));
    return i2;
  }
  
  public static void l0(View paramView, c.a paramA, CharSequence paramCharSequence, c.h.q.p0.f paramF)
  {
    if ((paramF == null) && (paramCharSequence == null))
    {
      j0(paramView, paramA.b());
      return;
    }
    c(paramView, paramA.a(paramCharSequence, paramF));
  }
  
  public static f m(View paramView)
  {
    paramView = n(paramView);
    if (paramView == null) {
      return null;
    }
    if ((paramView instanceof f.a)) {
      return a;
    }
    return new f(paramView);
  }
  
  public static void m0(View paramView)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 20)
    {
      l.c(paramView);
      return;
    }
    if (n >= 16) {
      h.p(paramView);
    }
  }
  
  private static View.AccessibilityDelegate n(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 29) {
      return r.a(paramView);
    }
    return o(paramView);
  }
  
  public static void n0(View paramView, Context paramContext, int[] paramArrayOfInt, AttributeSet paramAttributeSet, TypedArray paramTypedArray, int paramInt1, int paramInt2)
  {
    if (Build.VERSION.SDK_INT >= 29) {
      r.c(paramView, paramContext, paramArrayOfInt, paramAttributeSet, paramTypedArray, paramInt1, paramInt2);
    }
  }
  
  /* Error */
  private static View.AccessibilityDelegate o(View paramView)
  {
    // Byte code:
    //   0: getstatic 100	c/h/q/f0:i	Z
    //   3: ifeq +5 -> 8
    //   6: aconst_null
    //   7: areturn
    //   8: getstatic 805	c/h/q/f0:h	Ljava/lang/reflect/Field;
    //   11: ifnonnull +30 -> 41
    //   14: ldc -33
    //   16: ldc_w 807
    //   19: invokevirtual 242	java/lang/Class:getDeclaredField	(Ljava/lang/String;)Ljava/lang/reflect/Field;
    //   22: astore_1
    //   23: aload_1
    //   24: putstatic 805	c/h/q/f0:h	Ljava/lang/reflect/Field;
    //   27: aload_1
    //   28: iconst_1
    //   29: invokevirtual 250	java/lang/reflect/Field:setAccessible	(Z)V
    //   32: goto +9 -> 41
    //   35: iconst_1
    //   36: putstatic 100	c/h/q/f0:i	Z
    //   39: aconst_null
    //   40: areturn
    //   41: getstatic 805	c/h/q/f0:h	Ljava/lang/reflect/Field;
    //   44: aload_0
    //   45: invokevirtual 254	java/lang/reflect/Field:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   48: astore_0
    //   49: aload_0
    //   50: instanceof 809
    //   53: ifeq +10 -> 63
    //   56: aload_0
    //   57: checkcast 809	android/view/View$AccessibilityDelegate
    //   60: astore_0
    //   61: aload_0
    //   62: areturn
    //   63: aconst_null
    //   64: areturn
    //   65: iconst_1
    //   66: putstatic 100	c/h/q/f0:i	Z
    //   69: aconst_null
    //   70: areturn
    //   71: astore_0
    //   72: goto -37 -> 35
    //   75: astore_0
    //   76: goto -11 -> 65
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	79	0	paramView	View
    //   22	6	1	localField	Field
    // Exception table:
    //   from	to	target	type
    //   14	32	71	finally
    //   41	61	75	finally
  }
  
  private static f<Boolean> o0()
  {
    return new a(c.h.e.d0, Boolean.class, 28);
  }
  
  public static int p(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      return k.a(paramView);
    }
    return 0;
  }
  
  public static void p0(View paramView, f paramF)
  {
    f localF = paramF;
    if (paramF == null)
    {
      localF = paramF;
      if ((n(paramView) instanceof f.a)) {
        localF = new f();
      }
    }
    if (localF == null) {
      paramF = null;
    } else {
      paramF = localF.d();
    }
    paramView.setAccessibilityDelegate(paramF);
  }
  
  public static CharSequence q(View paramView)
  {
    return (CharSequence)d0().f(paramView);
  }
  
  public static void q0(View paramView, boolean paramBoolean)
  {
    a().g(paramView, Boolean.valueOf(paramBoolean));
  }
  
  private static List<c.a> r(View paramView)
  {
    int n = c.h.e.W;
    ArrayList localArrayList2 = (ArrayList)paramView.getTag(n);
    ArrayList localArrayList1 = localArrayList2;
    if (localArrayList2 == null)
    {
      localArrayList1 = new ArrayList();
      paramView.setTag(n, localArrayList1);
    }
    return localArrayList1;
  }
  
  public static void r0(View paramView, int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 19) {
      k.f(paramView, paramInt);
    }
  }
  
  private static int s(View paramView, CharSequence paramCharSequence)
  {
    paramView = r(paramView);
    int n = 0;
    while (n < paramView.size())
    {
      if (TextUtils.equals(paramCharSequence, ((c.a)paramView.get(n)).c())) {
        return ((c.a)paramView.get(n)).b();
      }
      n += 1;
    }
    int i1 = -1;
    n = 0;
    for (;;)
    {
      paramCharSequence = k;
      if ((n >= paramCharSequence.length) || (i1 != -1)) {
        break;
      }
      int i5 = paramCharSequence[n];
      int i3 = 0;
      int i2 = 1;
      while (i3 < paramView.size())
      {
        int i4;
        if (((c.a)paramView.get(i3)).b() != i5) {
          i4 = 1;
        } else {
          i4 = 0;
        }
        i2 &= i4;
        i3 += 1;
      }
      if (i2 != 0) {
        i1 = i5;
      }
      n += 1;
    }
    return i1;
  }
  
  public static void s0(View paramView, CharSequence paramCharSequence)
  {
    if (Build.VERSION.SDK_INT >= 19)
    {
      d0().g(paramView, paramCharSequence);
      if (paramCharSequence != null)
      {
        m.a(paramView);
        return;
      }
      m.d(paramView);
    }
  }
  
  public static ColorStateList t(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.g(paramView);
    }
    if ((paramView instanceof e0)) {
      return ((e0)paramView).getSupportBackgroundTintList();
    }
    return null;
  }
  
  public static void t0(View paramView, Drawable paramDrawable)
  {
    if (Build.VERSION.SDK_INT >= 16)
    {
      h.q(paramView, paramDrawable);
      return;
    }
    paramView.setBackgroundDrawable(paramDrawable);
  }
  
  public static PorterDuff.Mode u(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.h(paramView);
    }
    if ((paramView instanceof e0)) {
      return ((e0)paramView).getSupportBackgroundTintMode();
    }
    return null;
  }
  
  public static void u0(View paramView, ColorStateList paramColorStateList)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 21)
    {
      m.q(paramView, paramColorStateList);
      if (n == 21)
      {
        paramColorStateList = paramView.getBackground();
        if ((m.g(paramView) == null) && (m.h(paramView) == null)) {
          n = 0;
        } else {
          n = 1;
        }
        if ((paramColorStateList != null) && (n != 0))
        {
          if (paramColorStateList.isStateful()) {
            paramColorStateList.setState(paramView.getDrawableState());
          }
          h.q(paramView, paramColorStateList);
        }
      }
    }
    else if ((paramView instanceof e0))
    {
      ((e0)paramView).setSupportBackgroundTintList(paramColorStateList);
    }
  }
  
  public static Rect v(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      return j.a(paramView);
    }
    return null;
  }
  
  public static void v0(View paramView, PorterDuff.Mode paramMode)
  {
    int n = Build.VERSION.SDK_INT;
    if (n >= 21)
    {
      m.r(paramView, paramMode);
      if (n == 21)
      {
        paramMode = paramView.getBackground();
        if ((m.g(paramView) == null) && (m.h(paramView) == null)) {
          n = 0;
        } else {
          n = 1;
        }
        if ((paramMode != null) && (n != 0))
        {
          if (paramMode.isStateful()) {
            paramMode.setState(paramView.getDrawableState());
          }
          h.q(paramView, paramMode);
        }
      }
    }
    else if ((paramView instanceof e0))
    {
      ((e0)paramView).setSupportBackgroundTintMode(paramMode);
    }
  }
  
  public static Display w(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 17) {
      return i.b(paramView);
    }
    if (S(paramView)) {
      return ((WindowManager)paramView.getContext().getSystemService("window")).getDefaultDisplay();
    }
    return null;
  }
  
  public static void w0(View paramView, Rect paramRect)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      j.c(paramView, paramRect);
    }
  }
  
  public static float x(View paramView)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      return m.i(paramView);
    }
    return 0.0F;
  }
  
  public static void x0(View paramView, float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      m.s(paramView, paramFloat);
    }
  }
  
  private static Rect y()
  {
    if (j == null) {
      j = new ThreadLocal();
    }
    Rect localRect2 = (Rect)j.get();
    Rect localRect1 = localRect2;
    if (localRect2 == null)
    {
      localRect1 = new Rect();
      j.set(localRect1);
    }
    localRect1.setEmpty();
    return localRect1;
  }
  
  @Deprecated
  public static void y0(View paramView, boolean paramBoolean)
  {
    paramView.setFitsSystemWindows(paramBoolean);
  }
  
  private static b0 z(View paramView)
  {
    if ((paramView instanceof b0)) {
      return (b0)paramView;
    }
    return l;
  }
  
  public static void z0(View paramView, boolean paramBoolean)
  {
    if (Build.VERSION.SDK_INT >= 16) {
      h.r(paramView, paramBoolean);
    }
  }
  
  class a
    extends f0.f<Boolean>
  {
    a(Class paramClass, int paramInt)
    {
      super(paramClass, paramInt);
    }
    
    Boolean i(View paramView)
    {
      return Boolean.valueOf(f0.q.d(paramView));
    }
    
    void j(View paramView, Boolean paramBoolean)
    {
      f0.q.i(paramView, paramBoolean.booleanValue());
    }
    
    boolean k(Boolean paramBoolean1, Boolean paramBoolean2)
    {
      return a(paramBoolean1, paramBoolean2) ^ true;
    }
  }
  
  class b
    extends f0.f<CharSequence>
  {
    b(Class paramClass, int paramInt1, int paramInt2)
    {
      super(paramClass, paramInt1, paramInt2);
    }
    
    CharSequence i(View paramView)
    {
      return f0.q.b(paramView);
    }
    
    void j(View paramView, CharSequence paramCharSequence)
    {
      f0.q.h(paramView, paramCharSequence);
    }
    
    boolean k(CharSequence paramCharSequence1, CharSequence paramCharSequence2)
    {
      return TextUtils.equals(paramCharSequence1, paramCharSequence2) ^ true;
    }
  }
  
  class c
    extends f0.f<CharSequence>
  {
    c(Class paramClass, int paramInt1, int paramInt2)
    {
      super(paramClass, paramInt1, paramInt2);
    }
    
    CharSequence i(View paramView)
    {
      return f0.s.a(paramView);
    }
    
    void j(View paramView, CharSequence paramCharSequence)
    {
      f0.s.b(paramView, paramCharSequence);
    }
    
    boolean k(CharSequence paramCharSequence1, CharSequence paramCharSequence2)
    {
      return TextUtils.equals(paramCharSequence1, paramCharSequence2) ^ true;
    }
  }
  
  class d
    extends f0.f<Boolean>
  {
    d(Class paramClass, int paramInt)
    {
      super(paramClass, paramInt);
    }
    
    Boolean i(View paramView)
    {
      return Boolean.valueOf(f0.q.c(paramView));
    }
    
    void j(View paramView, Boolean paramBoolean)
    {
      f0.q.g(paramView, paramBoolean.booleanValue());
    }
    
    boolean k(Boolean paramBoolean1, Boolean paramBoolean2)
    {
      return a(paramBoolean1, paramBoolean2) ^ true;
    }
  }
  
  static class e
    implements ViewTreeObserver.OnGlobalLayoutListener, View.OnAttachStateChangeListener
  {
    private final WeakHashMap<View, Boolean> b = new WeakHashMap();
    
    e() {}
    
    private void b(View paramView, boolean paramBoolean)
    {
      boolean bool;
      if ((paramView.isShown()) && (paramView.getWindowVisibility() == 0)) {
        bool = true;
      } else {
        bool = false;
      }
      if (paramBoolean != bool)
      {
        int i;
        if (bool) {
          i = 16;
        } else {
          i = 32;
        }
        f0.Y(paramView, i);
        b.put(paramView, Boolean.valueOf(bool));
      }
    }
    
    private void c(View paramView)
    {
      paramView.getViewTreeObserver().addOnGlobalLayoutListener(this);
    }
    
    private void e(View paramView)
    {
      f0.h.o(paramView.getViewTreeObserver(), this);
    }
    
    void a(View paramView)
    {
      WeakHashMap localWeakHashMap = b;
      boolean bool;
      if ((paramView.isShown()) && (paramView.getWindowVisibility() == 0)) {
        bool = true;
      } else {
        bool = false;
      }
      localWeakHashMap.put(paramView, Boolean.valueOf(bool));
      paramView.addOnAttachStateChangeListener(this);
      if (f0.k.b(paramView)) {
        c(paramView);
      }
    }
    
    void d(View paramView)
    {
      b.remove(paramView);
      paramView.removeOnAttachStateChangeListener(this);
      e(paramView);
    }
    
    public void onGlobalLayout()
    {
      if (Build.VERSION.SDK_INT < 28)
      {
        Iterator localIterator = b.entrySet().iterator();
        while (localIterator.hasNext())
        {
          Map.Entry localEntry = (Map.Entry)localIterator.next();
          b((View)localEntry.getKey(), ((Boolean)localEntry.getValue()).booleanValue());
        }
      }
    }
    
    public void onViewAttachedToWindow(View paramView)
    {
      c(paramView);
    }
    
    public void onViewDetachedFromWindow(View paramView) {}
  }
  
  static abstract class f<T>
  {
    private final int a;
    private final Class<T> b;
    private final int c;
    private final int d;
    
    f(int paramInt1, Class<T> paramClass, int paramInt2)
    {
      this(paramInt1, paramClass, 0, paramInt2);
    }
    
    f(int paramInt1, Class<T> paramClass, int paramInt2, int paramInt3)
    {
      a = paramInt1;
      b = paramClass;
      d = paramInt2;
      c = paramInt3;
    }
    
    private boolean b()
    {
      return Build.VERSION.SDK_INT >= 19;
    }
    
    private boolean c()
    {
      return Build.VERSION.SDK_INT >= c;
    }
    
    boolean a(Boolean paramBoolean1, Boolean paramBoolean2)
    {
      int i;
      if ((paramBoolean1 != null) && (paramBoolean1.booleanValue())) {
        i = 1;
      } else {
        i = 0;
      }
      int j;
      if ((paramBoolean2 != null) && (paramBoolean2.booleanValue())) {
        j = 1;
      } else {
        j = 0;
      }
      return i == j;
    }
    
    abstract T d(View paramView);
    
    abstract void e(View paramView, T paramT);
    
    T f(View paramView)
    {
      if (c()) {
        return d(paramView);
      }
      if (b())
      {
        paramView = paramView.getTag(a);
        if (b.isInstance(paramView)) {
          return paramView;
        }
      }
      return null;
    }
    
    void g(View paramView, T paramT)
    {
      if (c())
      {
        e(paramView, paramT);
        return;
      }
      if ((b()) && (h(f(paramView), paramT)))
      {
        f0.k(paramView);
        paramView.setTag(a, paramT);
        f0.Y(paramView, d);
      }
    }
    
    abstract boolean h(T paramT1, T paramT2);
  }
  
  static class g
  {
    static boolean a(View paramView)
    {
      return paramView.hasOnClickListeners();
    }
  }
  
  static class h
  {
    static AccessibilityNodeProvider a(View paramView)
    {
      return paramView.getAccessibilityNodeProvider();
    }
    
    static boolean b(View paramView)
    {
      return paramView.getFitsSystemWindows();
    }
    
    static int c(View paramView)
    {
      return paramView.getImportantForAccessibility();
    }
    
    static int d(View paramView)
    {
      return paramView.getMinimumHeight();
    }
    
    static int e(View paramView)
    {
      return paramView.getMinimumWidth();
    }
    
    static ViewParent f(View paramView)
    {
      return paramView.getParentForAccessibility();
    }
    
    static int g(View paramView)
    {
      return paramView.getWindowSystemUiVisibility();
    }
    
    static boolean h(View paramView)
    {
      return paramView.hasOverlappingRendering();
    }
    
    static boolean i(View paramView)
    {
      return paramView.hasTransientState();
    }
    
    static boolean j(View paramView, int paramInt, Bundle paramBundle)
    {
      return paramView.performAccessibilityAction(paramInt, paramBundle);
    }
    
    static void k(View paramView)
    {
      paramView.postInvalidateOnAnimation();
    }
    
    static void l(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      paramView.postInvalidateOnAnimation(paramInt1, paramInt2, paramInt3, paramInt4);
    }
    
    static void m(View paramView, Runnable paramRunnable)
    {
      paramView.postOnAnimation(paramRunnable);
    }
    
    static void n(View paramView, Runnable paramRunnable, long paramLong)
    {
      paramView.postOnAnimationDelayed(paramRunnable, paramLong);
    }
    
    static void o(ViewTreeObserver paramViewTreeObserver, ViewTreeObserver.OnGlobalLayoutListener paramOnGlobalLayoutListener)
    {
      paramViewTreeObserver.removeOnGlobalLayoutListener(paramOnGlobalLayoutListener);
    }
    
    static void p(View paramView)
    {
      paramView.requestFitSystemWindows();
    }
    
    static void q(View paramView, Drawable paramDrawable)
    {
      paramView.setBackground(paramDrawable);
    }
    
    static void r(View paramView, boolean paramBoolean)
    {
      paramView.setHasTransientState(paramBoolean);
    }
    
    static void s(View paramView, int paramInt)
    {
      paramView.setImportantForAccessibility(paramInt);
    }
  }
  
  static class i
  {
    static int a()
    {
      return View.generateViewId();
    }
    
    static Display b(View paramView)
    {
      return paramView.getDisplay();
    }
    
    static int c(View paramView)
    {
      return paramView.getLabelFor();
    }
    
    static int d(View paramView)
    {
      return paramView.getLayoutDirection();
    }
    
    static int e(View paramView)
    {
      return paramView.getPaddingEnd();
    }
    
    static int f(View paramView)
    {
      return paramView.getPaddingStart();
    }
    
    static boolean g(View paramView)
    {
      return paramView.isPaddingRelative();
    }
    
    static void h(View paramView, int paramInt)
    {
      paramView.setLabelFor(paramInt);
    }
    
    static void i(View paramView, Paint paramPaint)
    {
      paramView.setLayerPaint(paramPaint);
    }
    
    static void j(View paramView, int paramInt)
    {
      paramView.setLayoutDirection(paramInt);
    }
    
    static void k(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      paramView.setPaddingRelative(paramInt1, paramInt2, paramInt3, paramInt4);
    }
  }
  
  static class j
  {
    static Rect a(View paramView)
    {
      return paramView.getClipBounds();
    }
    
    static boolean b(View paramView)
    {
      return paramView.isInLayout();
    }
    
    static void c(View paramView, Rect paramRect)
    {
      paramView.setClipBounds(paramRect);
    }
  }
  
  static class k
  {
    static int a(View paramView)
    {
      return paramView.getAccessibilityLiveRegion();
    }
    
    static boolean b(View paramView)
    {
      return paramView.isAttachedToWindow();
    }
    
    static boolean c(View paramView)
    {
      return paramView.isLaidOut();
    }
    
    static boolean d(View paramView)
    {
      return paramView.isLayoutDirectionResolved();
    }
    
    static void e(ViewParent paramViewParent, View paramView1, View paramView2, int paramInt)
    {
      paramViewParent.notifySubtreeAccessibilityStateChanged(paramView1, paramView2, paramInt);
    }
    
    static void f(View paramView, int paramInt)
    {
      paramView.setAccessibilityLiveRegion(paramInt);
    }
    
    static void g(AccessibilityEvent paramAccessibilityEvent, int paramInt)
    {
      paramAccessibilityEvent.setContentChangeTypes(paramInt);
    }
  }
  
  static class l
  {
    static WindowInsets a(View paramView, WindowInsets paramWindowInsets)
    {
      return paramView.dispatchApplyWindowInsets(paramWindowInsets);
    }
    
    static WindowInsets b(View paramView, WindowInsets paramWindowInsets)
    {
      return paramView.onApplyWindowInsets(paramWindowInsets);
    }
    
    static void c(View paramView)
    {
      paramView.requestApplyInsets();
    }
  }
  
  private static class m
  {
    static void a(WindowInsets paramWindowInsets, View paramView)
    {
      View.OnApplyWindowInsetsListener localOnApplyWindowInsetsListener = (View.OnApplyWindowInsetsListener)paramView.getTag(c.h.e.i0);
      if (localOnApplyWindowInsetsListener != null) {
        localOnApplyWindowInsetsListener.onApplyWindowInsets(paramView, paramWindowInsets);
      }
    }
    
    static n0 b(View paramView, n0 paramN0, Rect paramRect)
    {
      WindowInsets localWindowInsets = paramN0.u();
      if (localWindowInsets != null) {
        return n0.w(paramView.computeSystemWindowInsets(localWindowInsets, paramRect), paramView);
      }
      paramRect.setEmpty();
      return paramN0;
    }
    
    static boolean c(View paramView, float paramFloat1, float paramFloat2, boolean paramBoolean)
    {
      return paramView.dispatchNestedFling(paramFloat1, paramFloat2, paramBoolean);
    }
    
    static boolean d(View paramView, float paramFloat1, float paramFloat2)
    {
      return paramView.dispatchNestedPreFling(paramFloat1, paramFloat2);
    }
    
    static boolean e(View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt1, int[] paramArrayOfInt2)
    {
      return paramView.dispatchNestedPreScroll(paramInt1, paramInt2, paramArrayOfInt1, paramArrayOfInt2);
    }
    
    static boolean f(View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int[] paramArrayOfInt)
    {
      return paramView.dispatchNestedScroll(paramInt1, paramInt2, paramInt3, paramInt4, paramArrayOfInt);
    }
    
    static ColorStateList g(View paramView)
    {
      return paramView.getBackgroundTintList();
    }
    
    static PorterDuff.Mode h(View paramView)
    {
      return paramView.getBackgroundTintMode();
    }
    
    static float i(View paramView)
    {
      return paramView.getElevation();
    }
    
    public static n0 j(View paramView)
    {
      return n0.a.a(paramView);
    }
    
    static String k(View paramView)
    {
      return paramView.getTransitionName();
    }
    
    static float l(View paramView)
    {
      return paramView.getTranslationZ();
    }
    
    static float m(View paramView)
    {
      return paramView.getZ();
    }
    
    static boolean n(View paramView)
    {
      return paramView.hasNestedScrollingParent();
    }
    
    static boolean o(View paramView)
    {
      return paramView.isImportantForAccessibility();
    }
    
    static boolean p(View paramView)
    {
      return paramView.isNestedScrollingEnabled();
    }
    
    static void q(View paramView, ColorStateList paramColorStateList)
    {
      paramView.setBackgroundTintList(paramColorStateList);
    }
    
    static void r(View paramView, PorterDuff.Mode paramMode)
    {
      paramView.setBackgroundTintMode(paramMode);
    }
    
    static void s(View paramView, float paramFloat)
    {
      paramView.setElevation(paramFloat);
    }
    
    static void t(View paramView, boolean paramBoolean)
    {
      paramView.setNestedScrollingEnabled(paramBoolean);
    }
    
    static void u(View paramView, final z paramZ)
    {
      if (Build.VERSION.SDK_INT < 30) {
        paramView.setTag(c.h.e.a0, paramZ);
      }
      if (paramZ == null)
      {
        paramView.setOnApplyWindowInsetsListener((View.OnApplyWindowInsetsListener)paramView.getTag(c.h.e.i0));
        return;
      }
      paramView.setOnApplyWindowInsetsListener(new a(paramZ));
    }
    
    static void v(View paramView, String paramString)
    {
      paramView.setTransitionName(paramString);
    }
    
    static void w(View paramView, float paramFloat)
    {
      paramView.setTranslationZ(paramFloat);
    }
    
    static void x(View paramView, float paramFloat)
    {
      paramView.setZ(paramFloat);
    }
    
    static boolean y(View paramView, int paramInt)
    {
      return paramView.startNestedScroll(paramInt);
    }
    
    static void z(View paramView)
    {
      paramView.stopNestedScroll();
    }
    
    class a
      implements View.OnApplyWindowInsetsListener
    {
      n0 a = null;
      
      a(z paramZ) {}
      
      public WindowInsets onApplyWindowInsets(View paramView, WindowInsets paramWindowInsets)
      {
        n0 localN0 = n0.w(paramWindowInsets, paramView);
        int i = Build.VERSION.SDK_INT;
        if (i < 30)
        {
          f0.m.a(paramWindowInsets, f0.m.this);
          if (localN0.equals(a)) {
            return paramZ.a(paramView, localN0).u();
          }
        }
        a = localN0;
        paramWindowInsets = paramZ.a(paramView, localN0);
        if (i >= 30) {
          return paramWindowInsets.u();
        }
        f0.m0(paramView);
        return paramWindowInsets.u();
      }
    }
  }
  
  private static class n
  {
    public static n0 a(View paramView)
    {
      Object localObject = paramView.getRootWindowInsets();
      if (localObject == null) {
        return null;
      }
      localObject = n0.v((WindowInsets)localObject);
      ((n0)localObject).s((n0)localObject);
      ((n0)localObject).d(paramView.getRootView());
      return localObject;
    }
    
    static int b(View paramView)
    {
      return paramView.getScrollIndicators();
    }
    
    static void c(View paramView, int paramInt)
    {
      paramView.setScrollIndicators(paramInt);
    }
    
    static void d(View paramView, int paramInt1, int paramInt2)
    {
      paramView.setScrollIndicators(paramInt1, paramInt2);
    }
  }
  
  static class o
  {
    static void a(View paramView)
    {
      paramView.cancelDragAndDrop();
    }
    
    static void b(View paramView)
    {
      paramView.dispatchFinishTemporaryDetach();
    }
    
    static void c(View paramView)
    {
      paramView.dispatchStartTemporaryDetach();
    }
    
    static void d(View paramView, PointerIcon paramPointerIcon)
    {
      paramView.setPointerIcon(paramPointerIcon);
    }
    
    static boolean e(View paramView, ClipData paramClipData, View.DragShadowBuilder paramDragShadowBuilder, Object paramObject, int paramInt)
    {
      return paramView.startDragAndDrop(paramClipData, paramDragShadowBuilder, paramObject, paramInt);
    }
    
    static void f(View paramView, View.DragShadowBuilder paramDragShadowBuilder)
    {
      paramView.updateDragShadow(paramDragShadowBuilder);
    }
  }
  
  static class p
  {
    static void a(View paramView, Collection<View> paramCollection, int paramInt)
    {
      paramView.addKeyboardNavigationClusters(paramCollection, paramInt);
    }
    
    static int b(View paramView)
    {
      return paramView.getImportantForAutofill();
    }
    
    static int c(View paramView)
    {
      return paramView.getNextClusterForwardId();
    }
    
    static boolean d(View paramView)
    {
      return paramView.hasExplicitFocusable();
    }
    
    static boolean e(View paramView)
    {
      return paramView.isFocusedByDefault();
    }
    
    static boolean f(View paramView)
    {
      return paramView.isImportantForAutofill();
    }
    
    static boolean g(View paramView)
    {
      return paramView.isKeyboardNavigationCluster();
    }
    
    static View h(View paramView1, View paramView2, int paramInt)
    {
      return paramView1.keyboardNavigationClusterSearch(paramView2, paramInt);
    }
    
    static boolean i(View paramView)
    {
      return paramView.restoreDefaultFocus();
    }
    
    static void j(View paramView, String... paramVarArgs)
    {
      paramView.setAutofillHints(paramVarArgs);
    }
    
    static void k(View paramView, boolean paramBoolean)
    {
      paramView.setFocusedByDefault(paramBoolean);
    }
    
    static void l(View paramView, int paramInt)
    {
      paramView.setImportantForAutofill(paramInt);
    }
    
    static void m(View paramView, boolean paramBoolean)
    {
      paramView.setKeyboardNavigationCluster(paramBoolean);
    }
    
    static void n(View paramView, int paramInt)
    {
      paramView.setNextClusterForwardId(paramInt);
    }
    
    static void o(View paramView, CharSequence paramCharSequence)
    {
      paramView.setTooltipText(paramCharSequence);
    }
  }
  
  static class q
  {
    static void a(View paramView, f0.v paramV)
    {
      int i = c.h.e.h0;
      Object localObject2 = (g)paramView.getTag(i);
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject1 = new g();
        paramView.setTag(i, localObject1);
      }
      Objects.requireNonNull(paramV);
      localObject2 = new e(paramV);
      ((g)localObject1).put(paramV, localObject2);
      paramView.addOnUnhandledKeyEventListener((View.OnUnhandledKeyEventListener)localObject2);
    }
    
    static CharSequence b(View paramView)
    {
      return paramView.getAccessibilityPaneTitle();
    }
    
    static boolean c(View paramView)
    {
      return paramView.isAccessibilityHeading();
    }
    
    static boolean d(View paramView)
    {
      return paramView.isScreenReaderFocusable();
    }
    
    static void e(View paramView, f0.v paramV)
    {
      g localG = (g)paramView.getTag(c.h.e.h0);
      if (localG == null) {
        return;
      }
      paramV = (View.OnUnhandledKeyEventListener)localG.get(paramV);
      if (paramV != null) {
        paramView.removeOnUnhandledKeyEventListener(paramV);
      }
    }
    
    static <T> T f(View paramView, int paramInt)
    {
      return paramView.requireViewById(paramInt);
    }
    
    static void g(View paramView, boolean paramBoolean)
    {
      paramView.setAccessibilityHeading(paramBoolean);
    }
    
    static void h(View paramView, CharSequence paramCharSequence)
    {
      paramView.setAccessibilityPaneTitle(paramCharSequence);
    }
    
    static void i(View paramView, boolean paramBoolean)
    {
      paramView.setScreenReaderFocusable(paramBoolean);
    }
  }
  
  private static class r
  {
    static View.AccessibilityDelegate a(View paramView)
    {
      return paramView.getAccessibilityDelegate();
    }
    
    static List<Rect> b(View paramView)
    {
      return paramView.getSystemGestureExclusionRects();
    }
    
    static void c(View paramView, Context paramContext, int[] paramArrayOfInt, AttributeSet paramAttributeSet, TypedArray paramTypedArray, int paramInt1, int paramInt2)
    {
      paramView.saveAttributeDataForStyleable(paramContext, paramArrayOfInt, paramAttributeSet, paramTypedArray, paramInt1, paramInt2);
    }
    
    static void d(View paramView, List<Rect> paramList)
    {
      paramView.setSystemGestureExclusionRects(paramList);
    }
  }
  
  private static class s
  {
    static CharSequence a(View paramView)
    {
      return paramView.getStateDescription();
    }
    
    static void b(View paramView, CharSequence paramCharSequence)
    {
      paramView.setStateDescription(paramCharSequence);
    }
  }
  
  private static final class t
  {
    public static String[] a(View paramView)
    {
      return paramView.getReceiveContentMimeTypes();
    }
    
    public static h b(View paramView, h paramH)
    {
      ContentInfo localContentInfo = paramH.f();
      paramView = paramView.performReceiveContent(localContentInfo);
      if (paramView == null) {
        return null;
      }
      if (paramView == localContentInfo) {
        return paramH;
      }
      return h.g(paramView);
    }
    
    public static void c(View paramView, String[] paramArrayOfString, a0 paramA0)
    {
      if (paramA0 == null)
      {
        paramView.setOnReceiveContentListener(paramArrayOfString, null);
        return;
      }
      paramView.setOnReceiveContentListener(paramArrayOfString, new f0.u(paramA0));
    }
  }
  
  private static final class u
    implements OnReceiveContentListener
  {
    private final a0 a;
    
    u(a0 paramA0)
    {
      a = paramA0;
    }
    
    public ContentInfo onReceiveContent(View paramView, ContentInfo paramContentInfo)
    {
      h localH = h.g(paramContentInfo);
      paramView = a.a(paramView, localH);
      if (paramView == null) {
        return null;
      }
      if (paramView == localH) {
        return paramContentInfo;
      }
      return paramView.f();
    }
  }
  
  public static abstract interface v
  {
    public abstract boolean onUnhandledKeyEvent(View paramView, KeyEvent paramKeyEvent);
  }
  
  static class w
  {
    private static final ArrayList<WeakReference<View>> a = new ArrayList();
    private WeakHashMap<View, Boolean> b = null;
    private SparseArray<WeakReference<View>> c = null;
    private WeakReference<KeyEvent> d = null;
    
    w() {}
    
    static w a(View paramView)
    {
      int i = c.h.e.g0;
      w localW2 = (w)paramView.getTag(i);
      w localW1 = localW2;
      if (localW2 == null)
      {
        localW1 = new w();
        paramView.setTag(i, localW1);
      }
      return localW1;
    }
    
    private View c(View paramView, KeyEvent paramKeyEvent)
    {
      Object localObject = b;
      if (localObject != null)
      {
        if (!((WeakHashMap)localObject).containsKey(paramView)) {
          return null;
        }
        if ((paramView instanceof ViewGroup))
        {
          localObject = (ViewGroup)paramView;
          int i = ((ViewGroup)localObject).getChildCount() - 1;
          while (i >= 0)
          {
            View localView = c(((ViewGroup)localObject).getChildAt(i), paramKeyEvent);
            if (localView != null) {
              return localView;
            }
            i -= 1;
          }
        }
        if (e(paramView, paramKeyEvent)) {
          return paramView;
        }
      }
      return null;
    }
    
    private SparseArray<WeakReference<View>> d()
    {
      if (c == null) {
        c = new SparseArray();
      }
      return c;
    }
    
    private boolean e(View paramView, KeyEvent paramKeyEvent)
    {
      ArrayList localArrayList = (ArrayList)paramView.getTag(c.h.e.h0);
      if (localArrayList != null)
      {
        int i = localArrayList.size() - 1;
        while (i >= 0)
        {
          if (((f0.v)localArrayList.get(i)).onUnhandledKeyEvent(paramView, paramKeyEvent)) {
            return true;
          }
          i -= 1;
        }
      }
      return false;
    }
    
    private void g()
    {
      Object localObject1 = b;
      if (localObject1 != null) {
        ((WeakHashMap)localObject1).clear();
      }
      ArrayList localArrayList = a;
      if (localArrayList.isEmpty()) {
        return;
      }
      for (;;)
      {
        int i;
        try
        {
          if (b == null) {
            b = new WeakHashMap();
          }
          i = localArrayList.size() - 1;
          if (i >= 0)
          {
            localObject1 = a;
            View localView = (View)((WeakReference)((ArrayList)localObject1).get(i)).get();
            if (localView == null)
            {
              ((ArrayList)localObject1).remove(i);
            }
            else
            {
              b.put(localView, Boolean.TRUE);
              localObject1 = localView.getParent();
              if ((localObject1 instanceof View))
              {
                b.put((View)localObject1, Boolean.TRUE);
                localObject1 = ((ViewParent)localObject1).getParent();
                continue;
              }
            }
          }
          else
          {
            return;
          }
        }
        finally {}
        i -= 1;
      }
    }
    
    boolean b(View paramView, KeyEvent paramKeyEvent)
    {
      if (paramKeyEvent.getAction() == 0) {
        g();
      }
      paramView = c(paramView, paramKeyEvent);
      if (paramKeyEvent.getAction() == 0)
      {
        int i = paramKeyEvent.getKeyCode();
        if ((paramView != null) && (!KeyEvent.isModifierKey(i))) {
          d().put(i, new WeakReference(paramView));
        }
      }
      return paramView != null;
    }
    
    boolean f(KeyEvent paramKeyEvent)
    {
      Object localObject1 = d;
      if ((localObject1 != null) && (((WeakReference)localObject1).get() == paramKeyEvent)) {
        return false;
      }
      d = new WeakReference(paramKeyEvent);
      Object localObject2 = null;
      SparseArray localSparseArray = d();
      localObject1 = localObject2;
      if (paramKeyEvent.getAction() == 1)
      {
        int i = localSparseArray.indexOfKey(paramKeyEvent.getKeyCode());
        localObject1 = localObject2;
        if (i >= 0)
        {
          localObject1 = (WeakReference)localSparseArray.valueAt(i);
          localSparseArray.removeAt(i);
        }
      }
      localObject2 = localObject1;
      if (localObject1 == null) {
        localObject2 = (WeakReference)localSparseArray.get(paramKeyEvent.getKeyCode());
      }
      if (localObject2 != null)
      {
        localObject1 = (View)((WeakReference)localObject2).get();
        if ((localObject1 != null) && (f0.S((View)localObject1))) {
          e((View)localObject1, paramKeyEvent);
        }
        return true;
      }
      return false;
    }
  }
}
