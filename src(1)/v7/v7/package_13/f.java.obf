package c.h.q;

import android.graphics.Rect;
import android.os.Build.VERSION;
import android.util.Log;
import android.view.View;
import android.view.WindowInsets;
import android.view.WindowInsets.Builder;
import android.view.WindowInsets.Type;
import androidx.core.graphics.b;
import c.h.p.c;
import c.h.p.h;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Objects;

public class n0
{
  public static final n0 a = l.a;
  private final l b;
  
  static
  {
    if (Build.VERSION.SDK_INT >= 30)
    {
      a = k.q;
      return;
    }
  }
  
  private n0(WindowInsets paramWindowInsets)
  {
    int i = Build.VERSION.SDK_INT;
    if (i >= 30)
    {
      b = new k(this, paramWindowInsets);
      return;
    }
    if (i >= 29)
    {
      b = new j(this, paramWindowInsets);
      return;
    }
    if (i >= 28)
    {
      b = new i(this, paramWindowInsets);
      return;
    }
    if (i >= 21)
    {
      b = new h(this, paramWindowInsets);
      return;
    }
    if (i >= 20)
    {
      b = new g(this, paramWindowInsets);
      return;
    }
    b = new l(this);
  }
  
  public n0(n0 paramN0)
  {
    if (paramN0 != null)
    {
      paramN0 = b;
      int i = Build.VERSION.SDK_INT;
      if ((i >= 30) && ((paramN0 instanceof k))) {
        b = new k(this, (k)paramN0);
      } else if ((i >= 29) && ((paramN0 instanceof j))) {
        b = new j(this, (j)paramN0);
      } else if ((i >= 28) && ((paramN0 instanceof i))) {
        b = new i(this, (i)paramN0);
      } else if ((i >= 21) && ((paramN0 instanceof h))) {
        b = new h(this, (h)paramN0);
      } else if ((i >= 20) && ((paramN0 instanceof g))) {
        b = new g(this, (g)paramN0);
      } else {
        b = new l(this);
      }
      paramN0.e(this);
      return;
    }
    b = new l(this);
  }
  
  static b n(b paramB, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    int i = Math.max(0, b - paramInt1);
    int j = Math.max(0, c - paramInt2);
    int k = Math.max(0, d - paramInt3);
    int m = Math.max(0, e - paramInt4);
    if ((i == paramInt1) && (j == paramInt2) && (k == paramInt3) && (m == paramInt4)) {
      return paramB;
    }
    return b.b(i, j, k, m);
  }
  
  public static n0 v(WindowInsets paramWindowInsets)
  {
    return w(paramWindowInsets, null);
  }
  
  public static n0 w(WindowInsets paramWindowInsets, View paramView)
  {
    paramWindowInsets = new n0((WindowInsets)h.g(paramWindowInsets));
    if ((paramView != null) && (f0.S(paramView)))
    {
      paramWindowInsets.s(f0.J(paramView));
      paramWindowInsets.d(paramView.getRootView());
    }
    return paramWindowInsets;
  }
  
  @Deprecated
  public n0 a()
  {
    return b.a();
  }
  
  @Deprecated
  public n0 b()
  {
    return b.b();
  }
  
  @Deprecated
  public n0 c()
  {
    return b.c();
  }
  
  void d(View paramView)
  {
    b.d(paramView);
  }
  
  public i e()
  {
    return b.f();
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof n0)) {
      return false;
    }
    paramObject = (n0)paramObject;
    return c.a(b, b);
  }
  
  public b f(int paramInt)
  {
    return b.g(paramInt);
  }
  
  @Deprecated
  public b g()
  {
    return b.h();
  }
  
  @Deprecated
  public b h()
  {
    return b.i();
  }
  
  public int hashCode()
  {
    l localL = b;
    if (localL == null) {
      return 0;
    }
    return localL.hashCode();
  }
  
  @Deprecated
  public int i()
  {
    return b.k().e;
  }
  
  @Deprecated
  public int j()
  {
    return b.k().b;
  }
  
  @Deprecated
  public int k()
  {
    return b.k().d;
  }
  
  @Deprecated
  public int l()
  {
    return b.k().c;
  }
  
  public n0 m(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    return b.m(paramInt1, paramInt2, paramInt3, paramInt4);
  }
  
  public boolean o()
  {
    return b.n();
  }
  
  @Deprecated
  public n0 p(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    return new b(this).c(b.b(paramInt1, paramInt2, paramInt3, paramInt4)).a();
  }
  
  void q(b[] paramArrayOfB)
  {
    b.p(paramArrayOfB);
  }
  
  void r(b paramB)
  {
    b.q(paramB);
  }
  
  void s(n0 paramN0)
  {
    b.r(paramN0);
  }
  
  void t(b paramB)
  {
    b.s(paramB);
  }
  
  public WindowInsets u()
  {
    l localL = b;
    if ((localL instanceof g)) {
      return h;
    }
    return null;
  }
  
  static class a
  {
    private static Field a;
    private static Field b;
    private static Field c;
    private static boolean d;
    
    static
    {
      try
      {
        Object localObject1 = View.class.getDeclaredField("mAttachInfo");
        a = (Field)localObject1;
        ((Field)localObject1).setAccessible(true);
        localObject1 = Class.forName("android.view.View$AttachInfo");
        localObject2 = ((Class)localObject1).getDeclaredField("mStableInsets");
        b = (Field)localObject2;
        ((Field)localObject2).setAccessible(true);
        localObject1 = ((Class)localObject1).getDeclaredField("mContentInsets");
        c = (Field)localObject1;
        ((Field)localObject1).setAccessible(true);
        d = true;
        return;
      }
      catch (ReflectiveOperationException localReflectiveOperationException)
      {
        Object localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Failed to get visible insets from AttachInfo ");
        ((StringBuilder)localObject2).append(localReflectiveOperationException.getMessage());
        Log.w("WindowInsetsCompat", ((StringBuilder)localObject2).toString(), localReflectiveOperationException);
      }
    }
    
    public static n0 a(View paramView)
    {
      if (d)
      {
        if (!paramView.isAttachedToWindow()) {
          return null;
        }
        Object localObject1 = paramView.getRootView();
        try
        {
          Object localObject2 = a.get(localObject1);
          if (localObject2 != null)
          {
            localObject1 = (Rect)b.get(localObject2);
            localObject2 = (Rect)c.get(localObject2);
            if ((localObject1 != null) && (localObject2 != null))
            {
              localObject1 = new n0.b().b(b.c((Rect)localObject1)).c(b.c((Rect)localObject2)).a();
              ((n0)localObject1).s((n0)localObject1);
              ((n0)localObject1).d(paramView.getRootView());
              return localObject1;
            }
          }
        }
        catch (IllegalAccessException paramView)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("Failed to get insets from AttachInfo. ");
          ((StringBuilder)localObject1).append(paramView.getMessage());
          Log.w("WindowInsetsCompat", ((StringBuilder)localObject1).toString(), paramView);
        }
      }
      return null;
    }
  }
  
  public static final class b
  {
    private final n0.f a;
    
    public b()
    {
      int i = Build.VERSION.SDK_INT;
      if (i >= 30)
      {
        a = new n0.e();
        return;
      }
      if (i >= 29)
      {
        a = new n0.d();
        return;
      }
      if (i >= 20)
      {
        a = new n0.c();
        return;
      }
      a = new n0.f();
    }
    
    public b(n0 paramN0)
    {
      int i = Build.VERSION.SDK_INT;
      if (i >= 30)
      {
        a = new n0.e(paramN0);
        return;
      }
      if (i >= 29)
      {
        a = new n0.d(paramN0);
        return;
      }
      if (i >= 20)
      {
        a = new n0.c(paramN0);
        return;
      }
      a = new n0.f(paramN0);
    }
    
    public n0 a()
    {
      return a.b();
    }
    
    @Deprecated
    public b b(b paramB)
    {
      a.d(paramB);
      return this;
    }
    
    @Deprecated
    public b c(b paramB)
    {
      a.f(paramB);
      return this;
    }
  }
  
  private static class c
    extends n0.f
  {
    private static Field c;
    private static boolean d = false;
    private static Constructor<WindowInsets> e;
    private static boolean f = false;
    private WindowInsets g;
    private b h;
    
    c()
    {
      g = h();
    }
    
    c(n0 paramN0)
    {
      super();
      g = paramN0.u();
    }
    
    private static WindowInsets h()
    {
      if (!d)
      {
        try
        {
          c = WindowInsets.class.getDeclaredField("CONSUMED");
        }
        catch (ReflectiveOperationException localReflectiveOperationException1)
        {
          Log.i("WindowInsetsCompat", "Could not retrieve WindowInsets.CONSUMED field", localReflectiveOperationException1);
        }
        d = true;
      }
      Object localObject1 = c;
      if (localObject1 != null) {
        try
        {
          localObject1 = (WindowInsets)((Field)localObject1).get(null);
          if (localObject1 != null)
          {
            localObject1 = new WindowInsets((WindowInsets)localObject1);
            return localObject1;
          }
        }
        catch (ReflectiveOperationException localReflectiveOperationException2)
        {
          Log.i("WindowInsetsCompat", "Could not get value from WindowInsets.CONSUMED field", localReflectiveOperationException2);
        }
      }
      if (!f)
      {
        try
        {
          e = WindowInsets.class.getConstructor(new Class[] { Rect.class });
        }
        catch (ReflectiveOperationException localReflectiveOperationException3)
        {
          Log.i("WindowInsetsCompat", "Could not retrieve WindowInsets(Rect) constructor", localReflectiveOperationException3);
        }
        f = true;
      }
      Object localObject2 = e;
      if (localObject2 != null) {
        try
        {
          localObject2 = (WindowInsets)((Constructor)localObject2).newInstance(new Object[] { new Rect() });
          return localObject2;
        }
        catch (ReflectiveOperationException localReflectiveOperationException4)
        {
          Log.i("WindowInsetsCompat", "Could not invoke WindowInsets(Rect) constructor", localReflectiveOperationException4);
        }
      }
      return null;
    }
    
    n0 b()
    {
      a();
      n0 localN0 = n0.v(g);
      localN0.q(b);
      localN0.t(h);
      return localN0;
    }
    
    void d(b paramB)
    {
      h = paramB;
    }
    
    void f(b paramB)
    {
      WindowInsets localWindowInsets = g;
      if (localWindowInsets != null) {
        g = localWindowInsets.replaceSystemWindowInsets(b, c, d, e);
      }
    }
  }
  
  private static class d
    extends n0.f
  {
    final WindowInsets.Builder c;
    
    d()
    {
      c = new WindowInsets.Builder();
    }
    
    d(n0 paramN0)
    {
      super();
      paramN0 = paramN0.u();
      if (paramN0 != null) {
        paramN0 = new WindowInsets.Builder(paramN0);
      } else {
        paramN0 = new WindowInsets.Builder();
      }
      c = paramN0;
    }
    
    n0 b()
    {
      a();
      n0 localN0 = n0.v(c.build());
      localN0.q(b);
      return localN0;
    }
    
    void c(b paramB)
    {
      c.setMandatorySystemGestureInsets(paramB.e());
    }
    
    void d(b paramB)
    {
      c.setStableInsets(paramB.e());
    }
    
    void e(b paramB)
    {
      c.setSystemGestureInsets(paramB.e());
    }
    
    void f(b paramB)
    {
      c.setSystemWindowInsets(paramB.e());
    }
    
    void g(b paramB)
    {
      c.setTappableElementInsets(paramB.e());
    }
  }
  
  private static class e
    extends n0.d
  {
    e() {}
    
    e(n0 paramN0)
    {
      super();
    }
  }
  
  private static class f
  {
    private final n0 a;
    b[] b;
    
    f()
    {
      this(new n0(null));
    }
    
    f(n0 paramN0)
    {
      a = paramN0;
    }
    
    protected final void a()
    {
      Object localObject1 = b;
      if (localObject1 != null)
      {
        Object localObject3 = localObject1[n0.m.a(1)];
        Object localObject2 = b[n0.m.a(2)];
        localObject1 = localObject2;
        if (localObject2 == null) {
          localObject1 = a.f(2);
        }
        localObject2 = localObject3;
        if (localObject3 == null) {
          localObject2 = a.f(1);
        }
        f(b.a((b)localObject2, (b)localObject1));
        localObject1 = b[n0.m.a(16)];
        if (localObject1 != null) {
          e((b)localObject1);
        }
        localObject1 = b[n0.m.a(32)];
        if (localObject1 != null) {
          c((b)localObject1);
        }
        localObject1 = b[n0.m.a(64)];
        if (localObject1 != null) {
          g((b)localObject1);
        }
      }
    }
    
    n0 b()
    {
      a();
      return a;
    }
    
    void c(b paramB) {}
    
    void d(b paramB) {}
    
    void e(b paramB) {}
    
    void f(b paramB) {}
    
    void g(b paramB) {}
  }
  
  private static class g
    extends n0.l
  {
    private static boolean c = false;
    private static Method d;
    private static Class<?> e;
    private static Field f;
    private static Field g;
    final WindowInsets h;
    private b[] i;
    private b j = null;
    private n0 k;
    b l;
    
    g(n0 paramN0, WindowInsets paramWindowInsets)
    {
      super();
      h = paramWindowInsets;
    }
    
    g(n0 paramN0, g paramG)
    {
      this(paramN0, new WindowInsets(h));
    }
    
    private b t(int paramInt, boolean paramBoolean)
    {
      b localB = b.a;
      int m = 1;
      while (m <= 256)
      {
        if ((paramInt & m) != 0) {
          localB = b.a(localB, u(m, paramBoolean));
        }
        m <<= 1;
      }
      return localB;
    }
    
    private b v()
    {
      n0 localN0 = k;
      if (localN0 != null) {
        return localN0.h();
      }
      return b.a;
    }
    
    private b w(View paramView)
    {
      if (Build.VERSION.SDK_INT < 30)
      {
        if (!c) {
          x();
        }
        Object localObject = d;
        StringBuilder localStringBuilder = null;
        if ((localObject != null) && (e != null))
        {
          if (f == null) {
            return null;
          }
          try
          {
            paramView = ((Method)localObject).invoke(paramView, new Object[0]);
            if (paramView == null)
            {
              Log.w("WindowInsetsCompat", "Failed to get visible insets. getViewRootImpl() returned null from the provided view. This means that the view is either not attached or the method has been overridden", new NullPointerException());
              return null;
            }
            paramView = g.get(paramView);
            localObject = (Rect)f.get(paramView);
            paramView = localStringBuilder;
            if (localObject != null) {
              paramView = b.c((Rect)localObject);
            }
            return paramView;
          }
          catch (ReflectiveOperationException paramView)
          {
            localStringBuilder = new StringBuilder();
            localStringBuilder.append("Failed to get visible insets. (Reflection error). ");
            localStringBuilder.append(paramView.getMessage());
            Log.e("WindowInsetsCompat", localStringBuilder.toString(), paramView);
          }
        }
        return null;
      }
      throw new UnsupportedOperationException("getVisibleInsets() should not be called on API >= 30. Use WindowInsets.isVisible() instead.");
    }
    
    private static void x()
    {
      try
      {
        d = View.class.getDeclaredMethod("getViewRootImpl", new Class[0]);
        Class localClass = Class.forName("android.view.View$AttachInfo");
        e = localClass;
        f = localClass.getDeclaredField("mVisibleInsets");
        g = Class.forName("android.view.ViewRootImpl").getDeclaredField("mAttachInfo");
        f.setAccessible(true);
        g.setAccessible(true);
      }
      catch (ReflectiveOperationException localReflectiveOperationException)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Failed to get visible insets. (Reflection error). ");
        localStringBuilder.append(localReflectiveOperationException.getMessage());
        Log.e("WindowInsetsCompat", localStringBuilder.toString(), localReflectiveOperationException);
      }
      c = true;
    }
    
    void d(View paramView)
    {
      b localB = w(paramView);
      paramView = localB;
      if (localB == null) {
        paramView = b.a;
      }
      q(paramView);
    }
    
    void e(n0 paramN0)
    {
      paramN0.s(k);
      paramN0.r(l);
    }
    
    public boolean equals(Object paramObject)
    {
      if (!super.equals(paramObject)) {
        return false;
      }
      paramObject = (g)paramObject;
      return Objects.equals(l, l);
    }
    
    public b g(int paramInt)
    {
      return t(paramInt, false);
    }
    
    final b k()
    {
      if (j == null) {
        j = b.b(h.getSystemWindowInsetLeft(), h.getSystemWindowInsetTop(), h.getSystemWindowInsetRight(), h.getSystemWindowInsetBottom());
      }
      return j;
    }
    
    n0 m(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      n0.b localB = new n0.b(n0.v(h));
      localB.c(n0.n(k(), paramInt1, paramInt2, paramInt3, paramInt4));
      localB.b(n0.n(i(), paramInt1, paramInt2, paramInt3, paramInt4));
      return localB.a();
    }
    
    boolean o()
    {
      return h.isRound();
    }
    
    public void p(b[] paramArrayOfB)
    {
      i = paramArrayOfB;
    }
    
    void q(b paramB)
    {
      l = paramB;
    }
    
    void r(n0 paramN0)
    {
      k = paramN0;
    }
    
    protected b u(int paramInt, boolean paramBoolean)
    {
      if (paramInt != 1)
      {
        Object localObject1 = null;
        b localB = null;
        if (paramInt != 2)
        {
          if (paramInt != 8)
          {
            if (paramInt != 16)
            {
              if (paramInt != 32)
              {
                if (paramInt != 64)
                {
                  if (paramInt != 128) {
                    return b.a;
                  }
                  localObject1 = k;
                  if (localObject1 != null) {
                    localObject1 = ((n0)localObject1).e();
                  } else {
                    localObject1 = f();
                  }
                  if (localObject1 != null) {
                    return b.b(((i)localObject1).b(), ((i)localObject1).d(), ((i)localObject1).c(), ((i)localObject1).a());
                  }
                  return b.a;
                }
                return l();
              }
              return h();
            }
            return j();
          }
          localObject2 = i;
          localObject1 = localB;
          if (localObject2 != null) {
            localObject1 = localObject2[n0.m.a(8)];
          }
          if (localObject1 != null) {
            return localObject1;
          }
          localB = k();
          localObject1 = v();
          paramInt = e;
          if (paramInt > e) {
            return b.b(0, 0, 0, paramInt);
          }
          localB = l;
          if ((localB != null) && (!localB.equals(b.a)))
          {
            paramInt = l.e;
            if (paramInt > e) {
              return b.b(0, 0, 0, paramInt);
            }
          }
          return b.a;
        }
        if (paramBoolean)
        {
          localObject1 = v();
          localB = i();
          return b.b(Math.max(b, b), 0, Math.max(d, d), Math.max(e, e));
        }
        localB = k();
        Object localObject2 = k;
        if (localObject2 != null) {
          localObject1 = ((n0)localObject2).h();
        }
        int m = e;
        paramInt = m;
        if (localObject1 != null) {
          paramInt = Math.min(m, e);
        }
        return b.b(b, 0, d, paramInt);
      }
      if (paramBoolean) {
        return b.b(0, Math.max(vc, kc), 0, 0);
      }
      return b.b(0, kc, 0, 0);
    }
  }
  
  private static class h
    extends n0.g
  {
    private b m = null;
    
    h(n0 paramN0, WindowInsets paramWindowInsets)
    {
      super(paramWindowInsets);
    }
    
    h(n0 paramN0, h paramH)
    {
      super(paramH);
      m = m;
    }
    
    n0 b()
    {
      return n0.v(h.consumeStableInsets());
    }
    
    n0 c()
    {
      return n0.v(h.consumeSystemWindowInsets());
    }
    
    final b i()
    {
      if (m == null) {
        m = b.b(h.getStableInsetLeft(), h.getStableInsetTop(), h.getStableInsetRight(), h.getStableInsetBottom());
      }
      return m;
    }
    
    boolean n()
    {
      return h.isConsumed();
    }
    
    public void s(b paramB)
    {
      m = paramB;
    }
  }
  
  private static class i
    extends n0.h
  {
    i(n0 paramN0, WindowInsets paramWindowInsets)
    {
      super(paramWindowInsets);
    }
    
    i(n0 paramN0, i paramI)
    {
      super(paramI);
    }
    
    n0 a()
    {
      return n0.v(h.consumeDisplayCutout());
    }
    
    public boolean equals(Object paramObject)
    {
      if (this == paramObject) {
        return true;
      }
      if (!(paramObject instanceof i)) {
        return false;
      }
      paramObject = (i)paramObject;
      return (Objects.equals(h, h)) && (Objects.equals(l, l));
    }
    
    i f()
    {
      return i.e(h.getDisplayCutout());
    }
    
    public int hashCode()
    {
      return h.hashCode();
    }
  }
  
  private static class j
    extends n0.i
  {
    private b n = null;
    private b o = null;
    private b p = null;
    
    j(n0 paramN0, WindowInsets paramWindowInsets)
    {
      super(paramWindowInsets);
    }
    
    j(n0 paramN0, j paramJ)
    {
      super(paramJ);
    }
    
    b h()
    {
      if (o == null) {
        o = b.d(h.getMandatorySystemGestureInsets());
      }
      return o;
    }
    
    b j()
    {
      if (n == null) {
        n = b.d(h.getSystemGestureInsets());
      }
      return n;
    }
    
    b l()
    {
      if (p == null) {
        p = b.d(h.getTappableElementInsets());
      }
      return p;
    }
    
    n0 m(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      return n0.v(h.inset(paramInt1, paramInt2, paramInt3, paramInt4));
    }
    
    public void s(b paramB) {}
  }
  
  private static class k
    extends n0.j
  {
    static final n0 q = n0.v(WindowInsets.CONSUMED);
    
    k(n0 paramN0, WindowInsets paramWindowInsets)
    {
      super(paramWindowInsets);
    }
    
    k(n0 paramN0, k paramK)
    {
      super(paramK);
    }
    
    final void d(View paramView) {}
    
    public b g(int paramInt)
    {
      return b.d(h.getInsets(n0.n.a(paramInt)));
    }
  }
  
  private static class l
  {
    static final n0 a = new n0.b().a().a().b().c();
    final n0 b;
    
    l(n0 paramN0)
    {
      b = paramN0;
    }
    
    n0 a()
    {
      return b;
    }
    
    n0 b()
    {
      return b;
    }
    
    n0 c()
    {
      return b;
    }
    
    void d(View paramView) {}
    
    void e(n0 paramN0) {}
    
    public boolean equals(Object paramObject)
    {
      if (this == paramObject) {
        return true;
      }
      if (!(paramObject instanceof l)) {
        return false;
      }
      paramObject = (l)paramObject;
      return (o() == paramObject.o()) && (n() == paramObject.n()) && (c.a(k(), paramObject.k())) && (c.a(i(), paramObject.i())) && (c.a(f(), paramObject.f()));
    }
    
    i f()
    {
      return null;
    }
    
    b g(int paramInt)
    {
      return b.a;
    }
    
    b h()
    {
      return k();
    }
    
    public int hashCode()
    {
      return c.b(new Object[] { Boolean.valueOf(o()), Boolean.valueOf(n()), k(), i(), f() });
    }
    
    b i()
    {
      return b.a;
    }
    
    b j()
    {
      return k();
    }
    
    b k()
    {
      return b.a;
    }
    
    b l()
    {
      return k();
    }
    
    n0 m(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      return a;
    }
    
    boolean n()
    {
      return false;
    }
    
    boolean o()
    {
      return false;
    }
    
    public void p(b[] paramArrayOfB) {}
    
    void q(b paramB) {}
    
    void r(n0 paramN0) {}
    
    public void s(b paramB) {}
  }
  
  public static final class m
  {
    static int a(int paramInt)
    {
      if (paramInt != 1)
      {
        if (paramInt != 2)
        {
          if (paramInt != 4)
          {
            if (paramInt != 8)
            {
              if (paramInt != 16)
              {
                if (paramInt != 32)
                {
                  if (paramInt != 64)
                  {
                    if (paramInt != 128)
                    {
                      if (paramInt == 256) {
                        return 8;
                      }
                      StringBuilder localStringBuilder = new StringBuilder();
                      localStringBuilder.append("type needs to be >= FIRST and <= LAST, type=");
                      localStringBuilder.append(paramInt);
                      throw new IllegalArgumentException(localStringBuilder.toString());
                    }
                    return 7;
                  }
                  return 6;
                }
                return 5;
              }
              return 4;
            }
            return 3;
          }
          return 2;
        }
        return 1;
      }
      return 0;
    }
    
    public static int b()
    {
      return 7;
    }
  }
  
  private static final class n
  {
    static int a(int paramInt)
    {
      int k = 0;
      int j = 1;
      while (j <= 256)
      {
        int i = k;
        if ((paramInt & j) != 0)
        {
          if (j != 1)
          {
            if (j != 2)
            {
              if (j != 4)
              {
                if (j != 8)
                {
                  if (j != 16)
                  {
                    if (j != 32)
                    {
                      if (j != 64)
                      {
                        if (j != 128)
                        {
                          i = k;
                          break label127;
                        }
                        i = WindowInsets.Type.displayCutout();
                      }
                      else
                      {
                        i = WindowInsets.Type.tappableElement();
                      }
                    }
                    else {
                      i = WindowInsets.Type.mandatorySystemGestures();
                    }
                  }
                  else {
                    i = WindowInsets.Type.systemGestures();
                  }
                }
                else {
                  i = WindowInsets.Type.ime();
                }
              }
              else {
                i = WindowInsets.Type.captionBar();
              }
            }
            else {
              i = WindowInsets.Type.navigationBars();
            }
          }
          else {
            i = WindowInsets.Type.statusBars();
          }
          i = k | i;
        }
        label127:
        j <<= 1;
        k = i;
      }
      return k;
    }
  }
}
