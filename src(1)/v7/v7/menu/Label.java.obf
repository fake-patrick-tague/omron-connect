package c.h.m;

import android.os.Build.VERSION;
import android.os.LocaleList;
import c.h.o.b;
import java.util.Locale;

public final class h
{
  private static final h a = a(new Locale[0]);
  private final j b;
  
  private h(j paramJ)
  {
    b = paramJ;
  }
  
  public static h a(Locale... paramVarArgs)
  {
    if (Build.VERSION.SDK_INT >= 24) {
      return i(b.a(paramVarArgs));
    }
    return new h(new i(paramVarArgs));
  }
  
  static Locale b(String paramString)
  {
    if (paramString.contains("-"))
    {
      localObject = paramString.split("-", -1);
      if (localObject.length > 2) {
        return new Locale(localObject[0], localObject[1], localObject[2]);
      }
      if (localObject.length > 1) {
        return new Locale(localObject[0], localObject[1]);
      }
      if (localObject.length == 1) {
        return new Locale(localObject[0]);
      }
    }
    else
    {
      if (!paramString.contains("_")) {
        break label194;
      }
      localObject = paramString.split("_", -1);
      if (localObject.length > 2) {
        return new Locale(localObject[0], localObject[1], localObject[2]);
      }
      if (localObject.length > 1) {
        return new Locale(localObject[0], localObject[1]);
      }
      if (localObject.length == 1) {
        return new Locale(localObject[0]);
      }
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Can not parse language tag: [");
    ((StringBuilder)localObject).append(paramString);
    ((StringBuilder)localObject).append("]");
    throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    label194:
    return new Locale(paramString);
  }
  
  public static h c(String paramString)
  {
    if ((paramString != null) && (!paramString.isEmpty()))
    {
      String[] arrayOfString = paramString.split(",", -1);
      int j = arrayOfString.length;
      Locale[] arrayOfLocale = new Locale[j];
      int i = 0;
      while (i < j)
      {
        if (Build.VERSION.SDK_INT >= 21) {
          paramString = a.a(arrayOfString[i]);
        } else {
          paramString = b(arrayOfString[i]);
        }
        arrayOfLocale[i] = paramString;
        i += 1;
      }
      return a(arrayOfLocale);
    }
    return e();
  }
  
  public static h e()
  {
    return a;
  }
  
  public static h i(LocaleList paramLocaleList)
  {
    return new h(new k(paramLocaleList));
  }
  
  public Locale d(int paramInt)
  {
    return b.get(paramInt);
  }
  
  public boolean equals(Object paramObject)
  {
    return ((paramObject instanceof h)) && (b.equals(b));
  }
  
  public boolean f()
  {
    return b.isEmpty();
  }
  
  public int g()
  {
    return b.size();
  }
  
  public String h()
  {
    return b.a();
  }
  
  public int hashCode()
  {
    return b.hashCode();
  }
  
  public String toString()
  {
    return b.toString();
  }
  
  static class a
  {
    private static final Locale[] a = { new Locale("en", "XA"), new Locale("ar", "XB") };
    
    static Locale a(String paramString)
    {
      return Locale.forLanguageTag(paramString);
    }
    
    private static boolean b(Locale paramLocale)
    {
      Locale[] arrayOfLocale = a;
      int j = arrayOfLocale.length;
      int i = 0;
      while (i < j)
      {
        if (arrayOfLocale[i].equals(paramLocale)) {
          return true;
        }
        i += 1;
      }
      return false;
    }
    
    static boolean c(Locale paramLocale1, Locale paramLocale2)
    {
      boolean bool2 = paramLocale1.equals(paramLocale2);
      boolean bool1 = true;
      if (bool2) {
        return true;
      }
      if (!paramLocale1.getLanguage().equals(paramLocale2.getLanguage())) {
        return false;
      }
      if (!b(paramLocale1))
      {
        if (b(paramLocale2)) {
          return false;
        }
        String str = b.c(paramLocale1);
        if (str.isEmpty())
        {
          paramLocale1 = paramLocale1.getCountry();
          if (!paramLocale1.isEmpty())
          {
            if (paramLocale1.equals(paramLocale2.getCountry())) {
              return true;
            }
            bool1 = false;
          }
          return bool1;
        }
        return str.equals(b.c(paramLocale2));
      }
      return false;
    }
  }
  
  static class b
  {
    static LocaleList a(Locale... paramVarArgs)
    {
      return new LocaleList(paramVarArgs);
    }
    
    static LocaleList b()
    {
      return LocaleList.getAdjustedDefault();
    }
    
    static LocaleList c()
    {
      return LocaleList.getDefault();
    }
  }
}
